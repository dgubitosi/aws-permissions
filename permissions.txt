a4b:ApproveSkill [write] => *
a4b:AssociateContactWithAddressBook [write] => addressbook*,contact*
a4b:AssociateDeviceWithNetworkProfile [write] => device*,networkprofile*
a4b:AssociateDeviceWithRoom [write] => device*,room*
a4b:AssociateSkillGroupWithRoom [write] => room*,skillgroup*
a4b:AssociateSkillWithSkillGroup [write] => skillgroup*
a4b:AssociateSkillWithUsers [write] => *
a4b:CompleteRegistration [write] => *
a4b:CreateAddressBook [write] => *
a4b:CreateBusinessReportSchedule [write] => *
a4b:CreateConferenceProvider [write] => *
a4b:CreateContact [write] => *
a4b:CreateGatewayGroup [write] => *
a4b:CreateNetworkProfile [write] => *
a4b:CreateProfile [write] => *
a4b:CreateRoom [write] => profile*
a4b:CreateSkillGroup [write] => *
a4b:CreateUser [write] => user*
a4b:DeleteAddressBook [write] => addressbook*
a4b:DeleteBusinessReportSchedule [write] => schedule*
a4b:DeleteConferenceProvider [write] => conferenceprovider*
a4b:DeleteContact [write] => contact*
a4b:DeleteDevice [write] => device*
a4b:DeleteDeviceUsageData [write] => device*
a4b:DeleteGatewayGroup [write] => gatewaygroup*
a4b:DeleteNetworkProfile [write] => networkprofile*
a4b:DeleteProfile [write] => profile*
a4b:DeleteRoom [write] => room*
a4b:DeleteRoomSkillParameter [write] => room*
a4b:DeleteSkillAuthorization [write] => room*
a4b:DeleteSkillGroup [write] => skillgroup*
a4b:DeleteUser [write] => user*
a4b:DisassociateContactFromAddressBook [write] => addressbook*,contact*
a4b:DisassociateDeviceFromRoom [write] => device*
a4b:DisassociateSkillFromSkillGroup [write] => skillgroup*
a4b:DisassociateSkillFromUsers [write] => user*
a4b:DisassociateSkillGroupFromRoom [write] => room*,skillgroup*
a4b:ForgetSmartHomeAppliances [write] => room*
a4b:GetAddressBook [read] => addressbook*
a4b:GetConferencePreference [read] => *
a4b:GetConferenceProvider [read] => conferenceprovider*
a4b:GetContact [read] => contact*
a4b:GetDevice [read] => device*
a4b:GetGateway [read] => gateway*
a4b:GetGatewayGroup [read] => gatewaygroup*
a4b:GetInvitationConfiguration [read] => *
a4b:GetNetworkProfile [read] => networkprofile*
a4b:GetProfile [read] => profile*
a4b:GetRoom [read] => room*
a4b:GetRoomSkillParameter [read] => room*
a4b:GetSkillGroup [read] => skillgroup*
a4b:ListBusinessReportSchedules [list] => *
a4b:ListConferenceProviders [list] => *
a4b:ListDeviceEvents [list] => device*
a4b:ListGatewayGroups [list] => *
a4b:ListGateways [list] => gatewaygroup*
a4b:ListSkills [list] => *
a4b:ListSkillsStoreCategories [list] => *
a4b:ListSkillsStoreSkillsByCategory [list] => *
a4b:ListSmartHomeAppliances [list] => room*
a4b:ListTags [read] => device,room,user
a4b:PutConferencePreference [write] => *
a4b:PutDeviceSetupEvents [write] => *
a4b:PutInvitationConfiguration [write] => *
a4b:PutRoomSkillParameter [write] => room*
a4b:PutSkillAuthorization [write] => room*
a4b:RegisterAVSDevice [write] => *
a4b:RegisterDevice [write] => *
a4b:RejectSkill [write] => *
a4b:ResolveRoom [read] => *
a4b:RevokeInvitation [write] => user*
a4b:SearchAddressBooks [list] => *
a4b:SearchContacts [list] => *
a4b:SearchDevices [list] => *
a4b:SearchNetworkProfiles [list] => *
a4b:SearchProfiles [list] => *
a4b:SearchRooms [list] => *
a4b:SearchSkillGroups [list] => *
a4b:SearchUsers [list] => *
a4b:SendAnnouncement [write] => *
a4b:SendInvitation [write] => user*
a4b:StartDeviceSync [write] => *
a4b:StartSmartHomeApplianceDiscovery [read] => room*
a4b:TagResource [tagging] => device,room,user
a4b:UntagResource [tagging] => device,room,user
a4b:UpdateAddressBook [write] => addressbook*
a4b:UpdateBusinessReportSchedule [write] => schedule*
a4b:UpdateConferenceProvider [write] => conferenceprovider*
a4b:UpdateContact [write] => contact*
a4b:UpdateDevice [write] => device*
a4b:UpdateGateway [write] => gateway*
a4b:UpdateGatewayGroup [write] => gatewaygroup*
a4b:UpdateNetworkProfile [write] => networkprofile*
a4b:UpdateProfile [write] => profile*
a4b:UpdateRoom [write] => room*
a4b:UpdateSkillGroup [write] => skillgroup*
access-analyzer:ApplyArchiveRule [write] => Analyzer*
access-analyzer:CancelPolicyGeneration [write] => *
access-analyzer:CreateAccessPreview [write] => Analyzer*
access-analyzer:CreateAnalyzer [write] => *,Analyzer*
access-analyzer:CreateArchiveRule [write] => ArchiveRule*
access-analyzer:DeleteAnalyzer [write] => Analyzer*
access-analyzer:DeleteArchiveRule [write] => ArchiveRule*
access-analyzer:GetAccessPreview [read] => Analyzer*
access-analyzer:GetAnalyzedResource [read] => Analyzer*
access-analyzer:GetAnalyzer [read] => *,Analyzer*
access-analyzer:GetArchiveRule [read] => ArchiveRule*
access-analyzer:GetFinding [read] => Analyzer*
access-analyzer:GetGeneratedPolicy [read] => *
access-analyzer:ListAccessPreviewFindings [read] => Analyzer*
access-analyzer:ListAccessPreviews [list] => Analyzer*
access-analyzer:ListAnalyzedResources [read] => Analyzer*
access-analyzer:ListAnalyzers [list] => *
access-analyzer:ListArchiveRules [list] => Analyzer*
access-analyzer:ListFindings [read] => Analyzer*
access-analyzer:ListPolicyGenerations [read] => *
access-analyzer:ListTagsForResource [read] => Analyzer
access-analyzer:StartPolicyGeneration [write] => *
access-analyzer:StartResourceScan [write] => Analyzer*
access-analyzer:TagResource [tagging] => *,Analyzer
access-analyzer:UntagResource [tagging] => *,Analyzer
access-analyzer:UpdateArchiveRule [write] => ArchiveRule*
access-analyzer:UpdateFindings [write] => Analyzer*
access-analyzer:ValidatePolicy [read] => *
account:DeleteAlternateContact [write] => *,account,accountInOrganization
account:DisableRegion [write] => *
account:EnableRegion [write] => *
account:GetAlternateContact [read] => *,account,accountInOrganization
account:GetContactInformation [read] => account,accountInOrganization
account:ListRegions [list] => *
account:PutAlternateContact [write] => *,account,accountInOrganization
account:PutContactInformation [write] => account,accountInOrganization
acm:AddTagsToCertificate [tagging] => *,certificate*
acm:DeleteCertificate [write] => certificate*
acm:DescribeCertificate [read] => certificate*
acm:ExportCertificate [read] => certificate*
acm:GetAccountConfiguration [read] => *
acm:GetCertificate [read] => certificate*
acm:ImportCertificate [write] => *,certificate*
acm:ListCertificates [list] => *
acm:ListTagsForCertificate [read] => certificate*
acm:PutAccountConfiguration [write] => *
acm:RemoveTagsFromCertificate [tagging] => *,certificate*
acm:RenewCertificate [write] => certificate*
acm:RequestCertificate [write] => *
acm:ResendValidationEmail [write] => certificate*
acm:UpdateCertificateOptions [write] => certificate*
acm-pca:CreateCertificateAuthority [write] => *
acm-pca:CreateCertificateAuthorityAuditReport [write] => certificate-authority*
acm-pca:CreatePermission [permissions-management] => certificate-authority*
acm-pca:DeleteCertificateAuthority [write] => certificate-authority*
acm-pca:DeletePermission [permissions-management] => certificate-authority*
acm-pca:DeletePolicy [permissions-management] => certificate-authority*
acm-pca:DescribeCertificateAuthority [read] => certificate-authority*
acm-pca:DescribeCertificateAuthorityAuditReport [read] => certificate-authority*
acm-pca:GetCertificate [read] => certificate-authority*
acm-pca:GetCertificateAuthorityCertificate [read] => certificate-authority*
acm-pca:GetCertificateAuthorityCsr [read] => certificate-authority*
acm-pca:GetPolicy [read] => certificate-authority*
acm-pca:ImportCertificateAuthorityCertificate [write] => certificate-authority*
acm-pca:IssueCertificate [write] => *,certificate-authority*
acm-pca:ListCertificateAuthorities [list] => *
acm-pca:ListPermissions [read] => certificate-authority*
acm-pca:ListTags [read] => certificate-authority*
acm-pca:PutPolicy [permissions-management] => certificate-authority*
acm-pca:RestoreCertificateAuthority [write] => certificate-authority*
acm-pca:RevokeCertificate [write] => certificate-authority*
acm-pca:TagCertificateAuthority [tagging] => *,certificate-authority*
acm-pca:UntagCertificateAuthority [tagging] => *,certificate-authority*
acm-pca:UpdateCertificateAuthority [write] => certificate-authority*
activate:CreateForm [write] => *
activate:GetAccountContact [read] => *
activate:GetContentInfo [read] => *
activate:GetCosts [read] => *
activate:GetCredits [read] => *
activate:GetMemberInfo [read] => *
activate:GetProgram [read] => *
activate:PutMemberInfo [write] => *
airflow:CreateCliToken [write] => environment*
airflow:CreateEnvironment [write] => *,environment*
airflow:CreateWebLoginToken [write] => rbac-role*
airflow:DeleteEnvironment [write] => *,environment*
airflow:GetEnvironment [read] => *,environment*
airflow:ListEnvironments [list] => *
airflow:ListTagsForResource [read] => *,environment
airflow:PublishMetrics [write] => environment*
airflow:TagResource [tagging] => *,environment
airflow:UntagResource [tagging] => *,environment
airflow:UpdateEnvironment [write] => *,environment*
amplify:CreateApp [write] => *,apps*
amplify:CreateBackendEnvironment [write] => apps*
amplify:CreateBranch [write] => *,apps*
amplify:CreateDeployment [write] => branches*
amplify:CreateDomainAssociation [write] => *,apps*
amplify:CreateWebHook [write] => branches*
amplify:DeleteApp [write] => apps*
amplify:DeleteBackendEnvironment [write] => apps*
amplify:DeleteBranch [write] => branches*
amplify:DeleteDomainAssociation [write] => domains*
amplify:DeleteJob [write] => jobs*
amplify:DeleteWebHook [write] => apps*
amplify:GenerateAccessLogs [write] => apps*
amplify:GetApp [read] => apps*
amplify:GetArtifactUrl [read] => apps*
amplify:GetBackendEnvironment [read] => apps*
amplify:GetBranch [read] => branches*
amplify:GetDomainAssociation [read] => domains*
amplify:GetJob [read] => jobs*
amplify:GetWebHook [read] => apps*
amplify:ListApps [list] => *
amplify:ListArtifacts [list] => apps*
amplify:ListBackendEnvironments [list] => apps*
amplify:ListBranches [list] => apps*
amplify:ListDomainAssociations [list] => apps*
amplify:ListJobs [list] => branches*
amplify:ListTagsForResource [read] => apps,branches,jobs
amplify:ListWebHooks [list] => apps*
amplify:StartDeployment [write] => branches*
amplify:StartJob [write] => jobs*
amplify:StopJob [write] => jobs*
amplify:TagResource [tagging] => *,apps,branches,jobs
amplify:UntagResource [tagging] => *,apps,branches,jobs
amplify:UpdateApp [write] => apps*
amplify:UpdateBranch [write] => branches*
amplify:UpdateDomainAssociation [write] => domains*
amplify:UpdateWebHook [write] => apps*
amplifybackend:CloneBackend [write] => backend*
amplifybackend:CreateBackend [write] => backend*
amplifybackend:CreateBackendAPI [write] => api*,backend*,environment*
amplifybackend:CreateBackendAuth [write] => auth*,backend*,environment*
amplifybackend:CreateBackendConfig [write] => backend*
amplifybackend:CreateBackendStorage [write] => backend*,environment*
amplifybackend:CreateToken [write] => backend*
amplifybackend:DeleteBackend [write] => backend*,environment*
amplifybackend:DeleteBackendAPI [write] => api*,backend*,environment*
amplifybackend:DeleteBackendAuth [write] => auth*,backend*,environment*
amplifybackend:DeleteBackendStorage [write] => backend*,environment*,storage*
amplifybackend:DeleteToken [write] => backend*
amplifybackend:GenerateBackendAPIModels [write] => api*,backend*,environment*
amplifybackend:GetBackend [read] => backend*,environment*
amplifybackend:GetBackendAPI [read] => api*,backend*,environment*
amplifybackend:GetBackendAPIModels [read] => api*,backend*,environment*
amplifybackend:GetBackendAuth [read] => auth*,backend*,environment*
amplifybackend:GetBackendJob [read] => backend*,job*
amplifybackend:GetBackendStorage [read] => backend*,environment*
amplifybackend:GetToken [read] => backend*
amplifybackend:ImportBackendAuth [write] => auth*,backend*,environment*
amplifybackend:ImportBackendStorage [write] => backend*,environment*,storage*
amplifybackend:ListBackendJobs [list] => backend*,job*
amplifybackend:ListS3Buckets [list] => *
amplifybackend:RemoveAllBackends [write] => backend*,environment*
amplifybackend:RemoveBackendConfig [write] => backend*
amplifybackend:UpdateBackendAPI [write] => api*,backend*,environment*
amplifybackend:UpdateBackendAuth [write] => auth*,backend*,environment*
amplifybackend:UpdateBackendConfig [write] => backend*
amplifybackend:UpdateBackendJob [write] => backend*,job*
amplifybackend:UpdateBackendStorage [write] => backend*,environment*,storage*
amplifyuibuilder:CreateComponent [write] => *
amplifyuibuilder:CreateTheme [write] => *
amplifyuibuilder:DeleteComponent [write] => ComponentResource*
amplifyuibuilder:DeleteTheme [write] => ThemeResource*
amplifyuibuilder:ExchangeCodeForToken [write] => *
amplifyuibuilder:ExportComponents [read] => *
amplifyuibuilder:ExportThemes [read] => *
amplifyuibuilder:GetComponent [read] => ComponentResource*
amplifyuibuilder:GetTheme [read] => ThemeResource*
amplifyuibuilder:ListComponents [list] => *
amplifyuibuilder:ListTagsForResource [read] => ComponentResource,ThemeResource
amplifyuibuilder:ListThemes [list] => *
amplifyuibuilder:RefreshToken [write] => *
amplifyuibuilder:TagResource [tagging] => *,ComponentResource,ThemeResource
amplifyuibuilder:UntagResource [tagging] => *,ComponentResource,ThemeResource
amplifyuibuilder:UpdateComponent [write] => ComponentResource*
amplifyuibuilder:UpdateTheme [write] => ThemeResource*
apigateway:AddCertificateToDomain [permissions-management] => DomainName,DomainNames
apigateway:DELETE [write] => *,ApiKey,Authorizer,BasePathMapping,ClientCertificate,Deployment,DocumentationPart,DocumentationVersion,DomainName,GatewayResponse,Integration,IntegrationResponse,Method,MethodResponse,Model,RequestValidator,Resource,RestApi,Stage,Template,UsagePlan,UsagePlanKey,VpcLink
apigateway:GET [read] => Account,ApiKey,ApiKeys,Authorizer,Authorizers,BasePathMapping,BasePathMappings,ClientCertificate,ClientCertificates,Deployment,Deployments,DocumentationPart,DocumentationParts,DocumentationVersion,DocumentationVersions,DomainName,DomainNames,GatewayResponse,GatewayResponses,Integration,IntegrationResponse,Method,MethodResponse,Model,Models,RequestValidator,RequestValidators,Resource,Resources,RestApi,RestApis,Sdk,Stage,Stages,UsagePlan,UsagePlanKey,UsagePlanKeys,UsagePlans,VpcLink,VpcLinks
apigateway:PATCH [write] => *,Account,ApiKey,Authorizer,BasePathMapping,ClientCertificate,Deployment,DocumentationPart,DocumentationVersion,DomainName,GatewayResponse,Integration,IntegrationResponse,Method,MethodResponse,Model,RequestValidator,Resource,RestApi,Stage,Template,UsagePlan,UsagePlanKey,VpcLink
apigateway:POST [write] => *,ApiKeys,Authorizers,BasePathMappings,ClientCertificates,Deployments,DocumentationParts,DocumentationVersions,DomainNames,GatewayResponses,IntegrationResponse,MethodResponse,Models,RequestValidators,Resources,RestApis,Stages,UsagePlanKeys,UsagePlans,VpcLinks
apigateway:PUT [write] => *,DocumentationPart,GatewayResponse,IntegrationResponse,MethodResponse,RestApi
apigateway:RemoveCertificateFromDomain [permissions-management] => DomainName,DomainNames
apigateway:SetWebACL [permissions-management] => Stage,Stages
apigateway:UpdateRestApiPolicy [permissions-management] => RestApi,RestApis
apigateway:DELETE [write] => *,AccessLogSettings,Api,ApiMapping,Authorizer,AuthorizersCache,Cors,Deployment,Integration,IntegrationResponse,Model,Route,RouteRequestParameter,RouteResponse,RouteSettings,Stage
apigateway:GET [read] => AccessLogSettings,Api,ApiMapping,ApiMappings,Apis,Authorizer,Authorizers,AuthorizersCache,Cors,Deployment,Deployments,ExportedAPI,Integration,IntegrationResponse,IntegrationResponses,Integrations,Model,ModelTemplate,Models,Route,RouteRequestParameter,RouteResponse,RouteResponses,RouteSettings,Routes,Stage,Stages
apigateway:PATCH [write] => *,Api,ApiMapping,Authorizer,Deployment,Integration,IntegrationResponse,Model,Route,RouteRequestParameter,RouteResponse,Stage
apigateway:POST [write] => *,ApiMappings,Apis,Authorizers,Deployments,IntegrationResponses,Integrations,Models,RouteResponses,Routes,Stages
apigateway:PUT [write] => *,Apis
app-integrations:CreateDataIntegration [write] => *,data-integration*
app-integrations:CreateDataIntegrationAssociation [write] => data-integration*
app-integrations:CreateEventIntegration [write] => *,event-integration*
app-integrations:CreateEventIntegrationAssociation [write] => event-integration*
app-integrations:DeleteDataIntegration [write] => *,data-integration*
app-integrations:DeleteDataIntegrationAssociation [write] => data-integration-association*
app-integrations:DeleteEventIntegration [write] => *,event-integration*
app-integrations:DeleteEventIntegrationAssociation [write] => event-integration-association*
app-integrations:GetDataIntegration [read] => *,data-integration*
app-integrations:GetEventIntegration [read] => *,event-integration*
app-integrations:ListDataIntegrationAssociations [list] => *
app-integrations:ListDataIntegrations [list] => *
app-integrations:ListEventIntegrationAssociations [read] => *
app-integrations:ListEventIntegrations [list] => *
app-integrations:ListTagsForResource [read] => *,data-integration,data-integration-association,event-integration,event-integration-association
app-integrations:TagResource [tagging] => *,data-integration,data-integration-association,event-integration,event-integration-association
app-integrations:UntagResource [tagging] => *,data-integration,data-integration-association,event-integration,event-integration-association
app-integrations:UpdateDataIntegration [write] => *,data-integration*
app-integrations:UpdateEventIntegration [write] => *,event-integration*
appconfig:CreateApplication [write] => *
appconfig:CreateConfigurationProfile [write] => *,application*
appconfig:CreateDeploymentStrategy [write] => *
appconfig:CreateEnvironment [write] => *,application*
appconfig:CreateExtension [write] => *
appconfig:CreateExtensionAssociation [write] => *
appconfig:CreateHostedConfigurationVersion [write] => application*,configurationprofile*
appconfig:DeleteApplication [write] => application*
appconfig:DeleteConfigurationProfile [write] => application*,configurationprofile*
appconfig:DeleteDeploymentStrategy [write] => deploymentstrategy*
appconfig:DeleteEnvironment [write] => application*,environment*
appconfig:DeleteExtension [write] => extension*
appconfig:DeleteExtensionAssociation [write] => extensionassociation*
appconfig:DeleteHostedConfigurationVersion [write] => application*,configurationprofile*,hostedconfigurationversion*
appconfig:GetApplication [read] => *,application*
appconfig:GetConfiguration [read] => *,application*,configurationprofile*,environment*
appconfig:GetConfigurationProfile [read] => *,application*,configurationprofile*
appconfig:GetDeployment [read] => *,application*,deployment*,environment*
appconfig:GetDeploymentStrategy [read] => *,deploymentstrategy*
appconfig:GetEnvironment [read] => *,application*,environment*
appconfig:GetExtension [read] => *,extension*
appconfig:GetExtensionAssociation [read] => *,extensionassociation*
appconfig:GetHostedConfigurationVersion [read] => application*,configurationprofile*,hostedconfigurationversion*
appconfig:GetLatestConfiguration [read] => *,configuration*
appconfig:ListApplications [list] => *
appconfig:ListConfigurationProfiles [list] => application*
appconfig:ListDeploymentStrategies [list] => *
appconfig:ListDeployments [list] => application*,environment*
appconfig:ListEnvironments [list] => application*
appconfig:ListExtensionAssociations [list] => *
appconfig:ListExtensions [list] => *
appconfig:ListHostedConfigurationVersions [list] => application*,configurationprofile*
appconfig:ListTagsForResource [read] => *,application,configurationprofile,deployment,deploymentstrategy,environment
appconfig:StartConfigurationSession [write] => *,configuration*
appconfig:StartDeployment [write] => *,application*,configurationprofile*,deploymentstrategy*,environment*
appconfig:StopDeployment [write] => application*,deployment*,environment*
appconfig:TagResource [tagging] => *,application,configuration,configurationprofile,deployment,deploymentstrategy,environment,extension,extensionassociation
appconfig:UntagResource [tagging] => *,application,configuration,configurationprofile,deployment,deploymentstrategy,environment,extension,extensionassociation
appconfig:UpdateApplication [write] => *,application*
appconfig:UpdateConfigurationProfile [write] => *,application*,configurationprofile*
appconfig:UpdateDeploymentStrategy [write] => *,deploymentstrategy*
appconfig:UpdateEnvironment [write] => *,application*,environment*
appconfig:UpdateExtension [write] => *,extension*
appconfig:UpdateExtensionAssociation [write] => *,extensionassociation*
appconfig:ValidateConfiguration [write] => application*,configurationprofile*
appflow:CreateConnectorProfile [write] => *
appflow:CreateFlow [write] => *
appflow:DeleteConnectorProfile [write] => connectorprofile*
appflow:DeleteFlow [write] => *,flow*
appflow:DescribeConnector [read] => connector*
appflow:DescribeConnectorEntity [read] => connectorprofile*
appflow:DescribeConnectorFields [read] => connectorprofile*
appflow:DescribeConnectorProfiles [read] => *
appflow:DescribeConnectors [read] => *
appflow:DescribeFlow [read] => *
appflow:DescribeFlowExecution [read] => flow*
appflow:DescribeFlowExecutionRecords [read] => flow*
appflow:DescribeFlows [read] => *
appflow:ListConnectorEntities [list] => connectorprofile*
appflow:ListConnectorFields [read] => connectorprofile*
appflow:ListConnectors [list] => connector*
appflow:ListFlows [list] => flow*
appflow:ListTagsForResource [read] => flow*
appflow:RegisterConnector [write] => *
appflow:RunFlow [write] => flow*
appflow:StartFlow [write] => flow*
appflow:StopFlow [write] => flow*
appflow:TagResource [tagging] => *,flow*
appflow:UnRegisterConnector [write] => *,connector*
appflow:UntagResource [tagging] => *,flow*
appflow:UpdateConnectorProfile [write] => connectorprofile*
appflow:UpdateFlow [write] => flow*
appflow:UseConnectorProfile [write] => connectorprofile*
application-autoscaling:DeleteScalingPolicy [write] => *
application-autoscaling:DeleteScheduledAction [write] => *
application-autoscaling:DeregisterScalableTarget [write] => *
application-autoscaling:DescribeScalableTargets [read] => *
application-autoscaling:DescribeScalingActivities [read] => *
application-autoscaling:DescribeScalingPolicies [read] => *
application-autoscaling:DescribeScheduledActions [read] => *
application-autoscaling:PutScalingPolicy [write] => *
application-autoscaling:PutScheduledAction [write] => *
application-autoscaling:RegisterScalableTarget [write] => *
application-cost-profiler:DeleteReportDefinition [write] => *
application-cost-profiler:GetReportDefinition [read] => *
application-cost-profiler:ImportApplicationUsage [write] => *
application-cost-profiler:ListReportDefinitions [read] => *
application-cost-profiler:PutReportDefinition [write] => *
application-cost-profiler:UpdateReportDefinition [write] => *
applicationinsights:CreateApplication [write] => *
applicationinsights:CreateComponent [write] => *
applicationinsights:CreateLogPattern [write] => *
applicationinsights:DeleteApplication [write] => *
applicationinsights:DeleteComponent [write] => *
applicationinsights:DeleteLogPattern [write] => *
applicationinsights:DescribeApplication [read] => *
applicationinsights:DescribeComponent [read] => *
applicationinsights:DescribeComponentConfiguration [read] => *
applicationinsights:DescribeComponentConfigurationRecommendation [read] => *
applicationinsights:DescribeLogPattern [read] => *
applicationinsights:DescribeObservation [read] => *
applicationinsights:DescribeProblem [read] => *
applicationinsights:DescribeProblemObservations [read] => *
applicationinsights:ListApplications [list] => *
applicationinsights:ListComponents [list] => *
applicationinsights:ListConfigurationHistory [list] => *
applicationinsights:ListLogPatternSets [list] => *
applicationinsights:ListLogPatterns [list] => *
applicationinsights:ListProblems [list] => *
applicationinsights:ListTagsForResource [read] => *
applicationinsights:TagResource [tagging] => *
applicationinsights:UntagResource [tagging] => *
applicationinsights:UpdateApplication [write] => *
applicationinsights:UpdateComponent [write] => *
applicationinsights:UpdateComponentConfiguration [write] => *
applicationinsights:UpdateLogPattern [write] => *
appmesh:CreateGatewayRoute [write] => *,gatewayRoute*,virtualService
appmesh:CreateMesh [write] => *,mesh*
appmesh:CreateRoute [write] => *,route*,virtualNode
appmesh:CreateVirtualGateway [write] => *,virtualGateway*
appmesh:CreateVirtualNode [write] => *,virtualNode*,virtualService
appmesh:CreateVirtualRouter [write] => *,virtualRouter*
appmesh:CreateVirtualService [write] => *,virtualNode,virtualRouter,virtualService*
appmesh:DeleteGatewayRoute [write] => gatewayRoute*
appmesh:DeleteMesh [write] => mesh*
appmesh:DeleteRoute [write] => route*
appmesh:DeleteVirtualGateway [write] => virtualGateway*
appmesh:DeleteVirtualNode [write] => virtualNode*
appmesh:DeleteVirtualRouter [write] => virtualRouter*
appmesh:DeleteVirtualService [write] => virtualService*
appmesh:DescribeGatewayRoute [read] => gatewayRoute*
appmesh:DescribeMesh [read] => mesh*
appmesh:DescribeRoute [read] => route*
appmesh:DescribeVirtualGateway [read] => virtualGateway*
appmesh:DescribeVirtualNode [read] => virtualNode*
appmesh:DescribeVirtualRouter [read] => virtualRouter*
appmesh:DescribeVirtualService [read] => virtualService*
appmesh:ListGatewayRoutes [list] => virtualGateway*
appmesh:ListMeshes [list] => *
appmesh:ListRoutes [list] => virtualRouter*
appmesh:ListTagsForResource [list] => gatewayRoute,mesh,route,virtualGateway,virtualNode,virtualRouter,virtualService
appmesh:ListVirtualGateways [list] => mesh*
appmesh:ListVirtualNodes [list] => mesh*
appmesh:ListVirtualRouters [list] => mesh*
appmesh:ListVirtualServices [list] => mesh*
appmesh:StreamAggregatedResources [read] => virtualGateway,virtualNode
appmesh:TagResource [tagging] => *,gatewayRoute,mesh,route,virtualGateway,virtualNode,virtualRouter,virtualService
appmesh:UntagResource [tagging] => *,gatewayRoute,mesh,route,virtualGateway,virtualNode,virtualRouter,virtualService
appmesh:UpdateGatewayRoute [write] => gatewayRoute*,virtualService
appmesh:UpdateMesh [write] => mesh*
appmesh:UpdateRoute [write] => route*,virtualNode
appmesh:UpdateVirtualGateway [write] => virtualGateway*
appmesh:UpdateVirtualNode [write] => virtualNode*
appmesh:UpdateVirtualRouter [write] => virtualRouter*
appmesh:UpdateVirtualService [write] => virtualNode,virtualRouter,virtualService*
appmesh-preview:CreateGatewayRoute [write] => gatewayRoute*,virtualService
appmesh-preview:CreateMesh [write] => mesh*
appmesh-preview:CreateRoute [write] => route*,virtualNode
appmesh-preview:CreateVirtualGateway [write] => virtualGateway*
appmesh-preview:CreateVirtualNode [write] => virtualNode*,virtualService
appmesh-preview:CreateVirtualRouter [write] => virtualRouter*
appmesh-preview:CreateVirtualService [write] => virtualNode,virtualRouter,virtualService*
appmesh-preview:DeleteGatewayRoute [write] => gatewayRoute*
appmesh-preview:DeleteMesh [write] => mesh*
appmesh-preview:DeleteRoute [write] => route*
appmesh-preview:DeleteVirtualGateway [write] => virtualGateway*
appmesh-preview:DeleteVirtualNode [write] => virtualNode*
appmesh-preview:DeleteVirtualRouter [write] => virtualRouter*
appmesh-preview:DeleteVirtualService [write] => virtualService*
appmesh-preview:DescribeGatewayRoute [read] => gatewayRoute*
appmesh-preview:DescribeMesh [read] => mesh*
appmesh-preview:DescribeRoute [read] => route*
appmesh-preview:DescribeVirtualGateway [read] => virtualGateway*
appmesh-preview:DescribeVirtualNode [read] => virtualNode*
appmesh-preview:DescribeVirtualRouter [read] => virtualRouter*
appmesh-preview:DescribeVirtualService [read] => virtualService*
appmesh-preview:ListGatewayRoutes [list] => virtualGateway*
appmesh-preview:ListMeshes [list] => *
appmesh-preview:ListRoutes [list] => virtualRouter*
appmesh-preview:ListVirtualGateways [list] => mesh*
appmesh-preview:ListVirtualNodes [list] => mesh*
appmesh-preview:ListVirtualRouters [list] => mesh*
appmesh-preview:ListVirtualServices [list] => mesh*
appmesh-preview:StreamAggregatedResources [read] => virtualGateway,virtualNode
appmesh-preview:UpdateGatewayRoute [write] => gatewayRoute*,virtualService
appmesh-preview:UpdateMesh [write] => mesh*
appmesh-preview:UpdateRoute [write] => route*,virtualNode
appmesh-preview:UpdateVirtualGateway [write] => virtualGateway*
appmesh-preview:UpdateVirtualNode [write] => virtualNode*
appmesh-preview:UpdateVirtualRouter [write] => virtualRouter*
appmesh-preview:UpdateVirtualService [write] => virtualNode,virtualRouter,virtualService*
apprunner:AssociateCustomDomain [write] => service*
apprunner:CreateAutoScalingConfiguration [write] => *,autoscalingconfiguration*
apprunner:CreateConnection [write] => *,connection*
apprunner:CreateObservabilityConfiguration [write] => *,observabilityconfiguration*
apprunner:CreateService [write] => *,autoscalingconfiguration,connection,observabilityconfiguration,service*,vpcconnector
apprunner:CreateVpcConnector [write] => *,vpcconnector*
apprunner:DeleteAutoScalingConfiguration [write] => autoscalingconfiguration*
apprunner:DeleteConnection [write] => connection*
apprunner:DeleteObservabilityConfiguration [write] => observabilityconfiguration*
apprunner:DeleteService [write] => service*
apprunner:DeleteVpcConnector [write] => vpcconnector*
apprunner:DescribeAutoScalingConfiguration [read] => autoscalingconfiguration*
apprunner:DescribeCustomDomains [read] => service*
apprunner:DescribeObservabilityConfiguration [read] => observabilityconfiguration*
apprunner:DescribeOperation [read] => service*
apprunner:DescribeService [read] => service*
apprunner:DescribeVpcConnector [read] => vpcconnector*
apprunner:DisassociateCustomDomain [write] => service*
apprunner:ListAutoScalingConfigurations [list] => *
apprunner:ListConnections [list] => *
apprunner:ListObservabilityConfigurations [list] => *
apprunner:ListOperations [list] => service*
apprunner:ListServices [list] => *
apprunner:ListTagsForResource [read] => autoscalingconfiguration,connection,observabilityconfiguration,service,vpcconnector
apprunner:ListVpcConnectors [list] => *
apprunner:PauseService [write] => service*
apprunner:ResumeService [write] => service*
apprunner:StartDeployment [write] => service*
apprunner:TagResource [tagging] => *,autoscalingconfiguration,connection,observabilityconfiguration,service,vpcconnector
apprunner:UntagResource [tagging] => *,autoscalingconfiguration,connection,observabilityconfiguration,service,vpcconnector
apprunner:UpdateService [write] => *,autoscalingconfiguration,connection,observabilityconfiguration,service*,vpcconnector
appstream:AssociateApplicationFleet [write] => *,application*,fleet*
appstream:AssociateApplicationToEntitlement [write] => stack*
appstream:AssociateFleet [write] => *,fleet*,stack*
appstream:BatchAssociateUserStack [write] => *,stack*
appstream:BatchDisassociateUserStack [write] => *,stack*
appstream:CopyImage [write] => *,image*
appstream:CreateAppBlock [write] => *
appstream:CreateApplication [write] => *,app-block*
appstream:CreateDirectoryConfig [write] => *
appstream:CreateEntitlement [write] => stack*
appstream:CreateFleet [write] => *,fleet*,image
appstream:CreateImageBuilder [write] => *,image*,image-builder*
appstream:CreateImageBuilderStreamingURL [write] => *,image-builder*
appstream:CreateStack [write] => *,stack*
appstream:CreateStreamingURL [write] => *,fleet*,stack*
appstream:CreateUpdatedImage [write] => *,image*
appstream:CreateUsageReportSubscription [write] => *
appstream:CreateUser [write] => *
appstream:DeleteAppBlock [write] => *,app-block*
appstream:DeleteApplication [write] => *,application*
appstream:DeleteDirectoryConfig [write] => *
appstream:DeleteEntitlement [write] => stack*
appstream:DeleteFleet [write] => *,fleet*
appstream:DeleteImage [write] => *,image*
appstream:DeleteImageBuilder [write] => *,image-builder*
appstream:DeleteImagePermissions [write] => *,image*
appstream:DeleteStack [write] => *,stack*
appstream:DeleteUsageReportSubscription [write] => *
appstream:DeleteUser [write] => *
appstream:DescribeAppBlocks [read] => app-block
appstream:DescribeApplicationFleetAssociations [read] => application,fleet
appstream:DescribeApplications [read] => application
appstream:DescribeDirectoryConfigs [read] => *
appstream:DescribeEntitlements [read] => stack*
appstream:DescribeFleets [read] => fleet
appstream:DescribeImageBuilders [read] => image-builder
appstream:DescribeImagePermissions [read] => image*
appstream:DescribeImages [read] => image
appstream:DescribeSessions [read] => fleet*,stack*
appstream:DescribeStacks [read] => stack
appstream:DescribeUsageReportSubscriptions [read] => *
appstream:DescribeUserStackAssociations [read] => stack
appstream:DescribeUsers [read] => *
appstream:DisableUser [write] => *
appstream:DisassociateApplicationFleet [write] => *,application*,fleet*
appstream:DisassociateApplicationFromEntitlement [write] => stack*
appstream:DisassociateFleet [write] => *,fleet*,stack*
appstream:EnableUser [write] => *
appstream:ExpireSession [write] => *
appstream:ListAssociatedFleets [read] => stack*
appstream:ListAssociatedStacks [read] => fleet*
appstream:ListEntitledApplications [list] => stack*
appstream:ListTagsForResource [read] => *
appstream:StartFleet [write] => *,fleet*
appstream:StartImageBuilder [write] => *,image-builder*
appstream:StopFleet [write] => *,fleet*
appstream:StopImageBuilder [write] => *,image-builder*
appstream:Stream [write] => *,stack*
appstream:TagResource [tagging] => *,app-block,application,fleet,image,image-builder,stack
appstream:UntagResource [tagging] => *,app-block,application,fleet,image,image-builder,stack
appstream:UpdateApplication [write] => *,app-block,application*
appstream:UpdateDirectoryConfig [write] => *
appstream:UpdateEntitlement [write] => stack*
appstream:UpdateFleet [write] => *,fleet*,image
appstream:UpdateImagePermissions [write] => *,image*
appstream:UpdateStack [write] => *,stack*
appsync:AssociateApi [write] => domain*
appsync:CreateApiCache [write] => *
appsync:CreateApiKey [write] => *
appsync:CreateDataSource [write] => *
appsync:CreateDomainName [write] => *
appsync:CreateFunction [write] => *
appsync:CreateGraphqlApi [write] => *
appsync:CreateResolver [write] => *
appsync:CreateType [write] => *
appsync:DeleteApiCache [write] => *
appsync:DeleteApiKey [write] => *
appsync:DeleteDataSource [write] => *
appsync:DeleteDomainName [write] => domain*
appsync:DeleteFunction [write] => *
appsync:DeleteGraphqlApi [write] => *,graphqlapi*
appsync:DeleteResolver [write] => *
appsync:DeleteType [write] => *
appsync:DisassociateApi [write] => domain*
appsync:EvaluateMappingTemplate [read] => *
appsync:FlushApiCache [write] => *
appsync:GetApiAssociation [read] => domain*
appsync:GetApiCache [read] => *
appsync:GetDataSource [read] => *
appsync:GetDomainName [read] => domain*
appsync:GetFunction [read] => *
appsync:GetGraphqlApi [read] => *,graphqlapi*
appsync:GetIntrospectionSchema [read] => *
appsync:GetResolver [read] => *
appsync:GetSchemaCreationStatus [read] => *
appsync:GetType [read] => *
appsync:GraphQL [write] => field*,graphqlapi*
appsync:ListApiKeys [list] => *
appsync:ListDataSources [list] => *
appsync:ListDomainNames [list] => *
appsync:ListFunctions [list] => *
appsync:ListGraphqlApis [list] => *
appsync:ListResolvers [list] => *
appsync:ListResolversByFunction [list] => *
appsync:ListTagsForResource [read] => *,graphqlapi
appsync:ListTypes [list] => *
appsync:SetWebACL [write] => *
appsync:StartSchemaCreation [write] => *
appsync:TagResource [tagging] => *,graphqlapi,graphqlapi*
appsync:UntagResource [tagging] => *,graphqlapi,graphqlapi*
appsync:UpdateApiCache [write] => *
appsync:UpdateApiKey [write] => *
appsync:UpdateDataSource [write] => *
appsync:UpdateDomainName [write] => domain*
appsync:UpdateFunction [write] => *
appsync:UpdateGraphqlApi [write] => *,graphqlapi*
appsync:UpdateResolver [write] => *
appsync:UpdateType [write] => *
aps:CreateAlertManagerAlerts [write] => *,workspace*
aps:CreateAlertManagerDefinition [write] => *,workspace*
aps:CreateLoggingConfiguration [write] => *,workspace*
aps:CreateRuleGroupsNamespace [write] => *,rulegroupsnamespace*
aps:CreateWorkspace [write] => *
aps:DeleteAlertManagerDefinition [write] => *,workspace*
aps:DeleteAlertManagerSilence [write] => *,workspace*
aps:DeleteLoggingConfiguration [write] => *,workspace*
aps:DeleteRuleGroupsNamespace [write] => *,rulegroupsnamespace*
aps:DeleteWorkspace [write] => *,workspace*
aps:DescribeAlertManagerDefinition [read] => *,workspace*
aps:DescribeLoggingConfiguration [read] => *,workspace*
aps:DescribeRuleGroupsNamespace [read] => *,rulegroupsnamespace*
aps:DescribeWorkspace [read] => *,workspace*
aps:GetAlertManagerSilence [read] => *,workspace*
aps:GetAlertManagerStatus [read] => *,workspace*
aps:GetLabels [read] => *,workspace*
aps:GetMetricMetadata [read] => *,workspace*
aps:GetSeries [read] => *,workspace*
aps:ListAlertManagerAlertGroups [read] => *,workspace*
aps:ListAlertManagerAlerts [read] => *,workspace*
aps:ListAlertManagerReceivers [read] => *,workspace*
aps:ListAlertManagerSilences [read] => *,workspace*
aps:ListAlerts [read] => *,workspace*
aps:ListRuleGroupsNamespaces [list] => *,workspace*
aps:ListRules [read] => *,workspace*
aps:ListTagsForResource [read] => *,rulegroupsnamespace,workspace
aps:ListWorkspaces [list] => *
aps:PutAlertManagerDefinition [write] => *,workspace*
aps:PutAlertManagerSilences [write] => *,workspace*
aps:PutRuleGroupsNamespace [write] => *,rulegroupsnamespace*
aps:QueryMetrics [read] => *,workspace*
aps:RemoteWrite [write] => *,workspace*
aps:TagResource [tagging] => *,rulegroupsnamespace,workspace
aps:UntagResource [tagging] => *,rulegroupsnamespace,workspace
aps:UpdateLoggingConfiguration [write] => *,workspace*
aps:UpdateWorkspaceAlias [write] => *,workspace*
arsenal:RegisterOnPremisesAgent [write] => *
artifact:AcceptAgreement [write] => agreement*
artifact:DownloadAgreement [read] => agreement,customer-agreement
artifact:Get [read] => report-package*
artifact:TerminateAgreement [write] => customer-agreement*
athena:BatchGetNamedQuery [read] => workgroup*
athena:BatchGetPreparedStatement [read] => workgroup*
athena:BatchGetQueryExecution [read] => workgroup*
athena:CreateDataCatalog [write] => *,datacatalog*
athena:CreateNamedQuery [write] => workgroup*
athena:CreatePreparedStatement [write] => workgroup*
athena:CreateWorkGroup [write] => *,workgroup*
athena:DeleteDataCatalog [write] => datacatalog*
athena:DeleteNamedQuery [write] => workgroup*
athena:DeletePreparedStatement [write] => workgroup*
athena:DeleteWorkGroup [write] => workgroup*
athena:GetDataCatalog [read] => datacatalog*
athena:GetDatabase [read] => datacatalog*
athena:GetNamedQuery [read] => workgroup*
athena:GetPreparedStatement [read] => workgroup*
athena:GetQueryExecution [read] => workgroup*
athena:GetQueryResults [read] => workgroup*
athena:GetQueryResultsStream [read] => workgroup*
athena:GetQueryRuntimeStatistics [read] => workgroup*
athena:GetTableMetadata [read] => datacatalog*
athena:GetWorkGroup [read] => workgroup*
athena:ListDataCatalogs [list] => *
athena:ListDatabases [list] => datacatalog*
athena:ListEngineVersions [read] => *
athena:ListNamedQueries [list] => workgroup*
athena:ListPreparedStatements [list] => workgroup*
athena:ListQueryExecutions [read] => workgroup*
athena:ListTableMetadata [read] => datacatalog*
athena:ListTagsForResource [read] => datacatalog*,workgroup*
athena:ListWorkGroups [list] => *
athena:StartQueryExecution [write] => workgroup*
athena:StopQueryExecution [write] => workgroup*
athena:TagResource [tagging] => *,datacatalog*,workgroup*
athena:UntagResource [tagging] => *,datacatalog*,workgroup*
athena:UpdateDataCatalog [write] => datacatalog*
athena:UpdateNamedQuery [write] => workgroup*
athena:UpdatePreparedStatement [write] => workgroup*
athena:UpdateWorkGroup [write] => workgroup*
auditmanager:AssociateAssessmentReportEvidenceFolder [write] => assessment*
auditmanager:BatchAssociateAssessmentReportEvidence [write] => assessment*
auditmanager:BatchCreateDelegationByAssessment [write] => assessment*
auditmanager:BatchDeleteDelegationByAssessment [write] => assessment*
auditmanager:BatchDisassociateAssessmentReportEvidence [write] => assessment*
auditmanager:BatchImportEvidenceToAssessmentControl [write] => assessmentControlSet*
auditmanager:CreateAssessment [write] => *
auditmanager:CreateAssessmentFramework [write] => *
auditmanager:CreateAssessmentReport [write] => assessment*
auditmanager:CreateControl [write] => *
auditmanager:DeleteAssessment [write] => *,assessment*
auditmanager:DeleteAssessmentFramework [write] => *,assessmentFramework*
auditmanager:DeleteAssessmentFrameworkShare [write] => *
auditmanager:DeleteAssessmentReport [write] => assessment*
auditmanager:DeleteControl [write] => *,control*
auditmanager:DeregisterAccount [write] => *
auditmanager:DeregisterOrganizationAdminAccount [write] => *
auditmanager:DisassociateAssessmentReportEvidenceFolder [write] => assessment*
auditmanager:GetAccountStatus [read] => *
auditmanager:GetAssessment [read] => assessment*
auditmanager:GetAssessmentFramework [read] => assessmentFramework*
auditmanager:GetAssessmentReportUrl [read] => assessment*
auditmanager:GetChangeLogs [read] => assessment*
auditmanager:GetControl [read] => control*
auditmanager:GetDelegations [list] => *
auditmanager:GetEvidence [read] => assessmentControlSet*
auditmanager:GetEvidenceByEvidenceFolder [read] => assessmentControlSet*
auditmanager:GetEvidenceFolder [read] => assessmentControlSet*
auditmanager:GetEvidenceFoldersByAssessment [read] => assessment*
auditmanager:GetEvidenceFoldersByAssessmentControl [read] => assessmentControlSet*
auditmanager:GetInsights [read] => *
auditmanager:GetInsightsByAssessment [read] => *
auditmanager:GetOrganizationAdminAccount [read] => *
auditmanager:GetServicesInScope [read] => *
auditmanager:GetSettings [read] => *
auditmanager:ListAssessmentControlInsightsByControlDomain [list] => *
auditmanager:ListAssessmentFrameworkShareRequests [list] => *
auditmanager:ListAssessmentFrameworks [list] => *
auditmanager:ListAssessmentReports [list] => *
auditmanager:ListAssessments [list] => *
auditmanager:ListControlDomainInsights [list] => *
auditmanager:ListControlDomainInsightsByAssessment [list] => *
auditmanager:ListControlInsightsByControlDomain [list] => *
auditmanager:ListControls [list] => *
auditmanager:ListKeywordsForDataSource [list] => *
auditmanager:ListNotifications [list] => *
auditmanager:ListTagsForResource [read] => assessment,control
auditmanager:RegisterAccount [write] => *
auditmanager:RegisterOrganizationAdminAccount [write] => *
auditmanager:StartAssessmentFrameworkShare [write] => assessmentFramework*
auditmanager:TagResource [tagging] => *,assessment,control
auditmanager:UntagResource [tagging] => *,assessment,control
auditmanager:UpdateAssessment [write] => assessment*
auditmanager:UpdateAssessmentControl [write] => assessmentControlSet*
auditmanager:UpdateAssessmentControlSetStatus [write] => assessmentControlSet*
auditmanager:UpdateAssessmentFramework [write] => assessmentFramework*
auditmanager:UpdateAssessmentFrameworkShare [write] => *
auditmanager:UpdateAssessmentStatus [write] => assessment*
auditmanager:UpdateControl [write] => control*
auditmanager:UpdateSettings [write] => *
auditmanager:ValidateAssessmentReportIntegrity [read] => *
autoscaling:AttachInstances [write] => autoScalingGroup*
autoscaling:AttachLoadBalancerTargetGroups [write] => *,autoScalingGroup*
autoscaling:AttachLoadBalancers [write] => *,autoScalingGroup*
autoscaling:BatchDeleteScheduledAction [write] => autoScalingGroup*
autoscaling:BatchPutScheduledUpdateGroupAction [write] => autoScalingGroup*
autoscaling:CancelInstanceRefresh [write] => autoScalingGroup*
autoscaling:CompleteLifecycleAction [write] => autoScalingGroup*
autoscaling:CreateAutoScalingGroup [write] => *,autoScalingGroup*
autoscaling:CreateLaunchConfiguration [write] => *,launchConfiguration*
autoscaling:CreateOrUpdateTags [tagging] => *,autoScalingGroup*
autoscaling:DeleteAutoScalingGroup [write] => autoScalingGroup*
autoscaling:DeleteLaunchConfiguration [write] => launchConfiguration*
autoscaling:DeleteLifecycleHook [write] => autoScalingGroup*
autoscaling:DeleteNotificationConfiguration [write] => autoScalingGroup*
autoscaling:DeletePolicy [write] => autoScalingGroup*
autoscaling:DeleteScheduledAction [write] => autoScalingGroup*
autoscaling:DeleteTags [tagging] => *,autoScalingGroup*
autoscaling:DeleteWarmPool [write] => autoScalingGroup*
autoscaling:DescribeAccountLimits [list] => *
autoscaling:DescribeAdjustmentTypes [list] => *
autoscaling:DescribeAutoScalingGroups [list] => *
autoscaling:DescribeAutoScalingInstances [list] => *
autoscaling:DescribeAutoScalingNotificationTypes [list] => *
autoscaling:DescribeInstanceRefreshes [list] => *
autoscaling:DescribeLaunchConfigurations [list] => *
autoscaling:DescribeLifecycleHookTypes [list] => *
autoscaling:DescribeLifecycleHooks [list] => *
autoscaling:DescribeLoadBalancerTargetGroups [list] => *
autoscaling:DescribeLoadBalancers [list] => *
autoscaling:DescribeMetricCollectionTypes [list] => *
autoscaling:DescribeNotificationConfigurations [list] => *
autoscaling:DescribePolicies [list] => *
autoscaling:DescribeScalingActivities [list] => *
autoscaling:DescribeScalingProcessTypes [list] => *
autoscaling:DescribeScheduledActions [list] => *
autoscaling:DescribeTags [read] => *
autoscaling:DescribeTerminationPolicyTypes [list] => *
autoscaling:DescribeWarmPool [list] => *
autoscaling:DetachInstances [write] => autoScalingGroup*
autoscaling:DetachLoadBalancerTargetGroups [write] => *,autoScalingGroup*
autoscaling:DetachLoadBalancers [write] => *,autoScalingGroup*
autoscaling:DisableMetricsCollection [write] => autoScalingGroup*
autoscaling:EnableMetricsCollection [write] => autoScalingGroup*
autoscaling:EnterStandby [write] => autoScalingGroup*
autoscaling:ExecutePolicy [write] => autoScalingGroup*
autoscaling:ExitStandby [write] => autoScalingGroup*
autoscaling:GetPredictiveScalingForecast [list] => *
autoscaling:PutLifecycleHook [write] => autoScalingGroup*
autoscaling:PutNotificationConfiguration [write] => autoScalingGroup*
autoscaling:PutScalingPolicy [write] => autoScalingGroup*
autoscaling:PutScheduledUpdateGroupAction [write] => *,autoScalingGroup*
autoscaling:PutWarmPool [write] => autoScalingGroup*
autoscaling:RecordLifecycleActionHeartbeat [write] => autoScalingGroup*
autoscaling:ResumeProcesses [write] => autoScalingGroup*
autoscaling:SetDesiredCapacity [write] => autoScalingGroup*
autoscaling:SetInstanceHealth [write] => autoScalingGroup*
autoscaling:SetInstanceProtection [write] => autoScalingGroup*
autoscaling:StartInstanceRefresh [write] => autoScalingGroup*
autoscaling:SuspendProcesses [write] => autoScalingGroup*
autoscaling:TerminateInstanceInAutoScalingGroup [write] => autoScalingGroup*
autoscaling:UpdateAutoScalingGroup [write] => *,autoScalingGroup*
autoscaling-plans:CreateScalingPlan [write] => *
autoscaling-plans:DeleteScalingPlan [write] => *
autoscaling-plans:DescribeScalingPlanResources [read] => *
autoscaling-plans:DescribeScalingPlans [read] => *
autoscaling-plans:GetScalingPlanResourceForecastData [read] => *
autoscaling-plans:UpdateScalingPlan [write] => *
aws-marketplace:DescribeProcurementSystemConfiguration [read] => *
aws-marketplace:PutProcurementSystemConfiguration [write] => *
aws-marketplace:AcceptAgreementApprovalRequest [write] => *
aws-marketplace:AcceptAgreementRequest [write] => *
aws-marketplace:CancelAgreement [write] => *
aws-marketplace:CancelAgreementRequest [write] => *
aws-marketplace:CreateAgreementRequest [write] => *
aws-marketplace:DescribeAgreement [read] => *
aws-marketplace:GetAgreementApprovalRequest [read] => *
aws-marketplace:GetAgreementRequest [read] => *
aws-marketplace:GetAgreementTerms [list] => *
aws-marketplace:ListAgreementApprovalRequests [list] => *
aws-marketplace:ListAgreementRequests [list] => *
aws-marketplace:RejectAgreementApprovalRequest [write] => *
aws-marketplace:SearchAgreements [list] => *
aws-marketplace:Subscribe [write] => *
aws-marketplace:Unsubscribe [write] => *
aws-marketplace:UpdateAgreementApprovalRequest [write] => *
aws-marketplace:ViewSubscriptions [list] => *
aws-marketplace:AssociateProductsWithPrivateMarketplace [write] => *
aws-marketplace:CreatePrivateMarketplaceRequests [write] => *
aws-marketplace:DescribePrivateMarketplaceRequests [list] => *
aws-marketplace:DisassociateProductsFromPrivateMarketplace [write] => *
aws-marketplace:ListPrivateMarketplaceRequests [list] => *
aws-marketplace:CancelChangeSet [write] => ChangeSet*
aws-marketplace:CompleteTask [write] => *
aws-marketplace:DescribeChangeSet [read] => ChangeSet*
aws-marketplace:DescribeEntity [read] => Entity*
aws-marketplace:DescribeTask [read] => *
aws-marketplace:ListChangeSets [list] => *
aws-marketplace:ListEntities [list] => *
aws-marketplace:ListTasks [list] => *
aws-marketplace:StartChangeSet [write] => *,Entity*
aws-marketplace:UpdateTask [write] => *
aws-marketplace:DescribeBuilds [read] => *
aws-marketplace:ListBuilds [read] => *
aws-marketplace:StartBuild [write] => *
aws-marketplace:BatchMeterUsage [write] => *
aws-marketplace:MeterUsage [write] => *
aws-marketplace:RegisterUsage [write] => *
aws-marketplace:ResolveCustomer [write] => *
aws-marketplace:GetEntitlements [read] => *
aws-marketplace-management:uploadFiles [write] => *
aws-marketplace-management:viewMarketing [list] => *
aws-marketplace-management:viewReports [list] => *
aws-marketplace-management:viewSettings [list] => *
aws-marketplace-management:viewSupport [list] => *
aws-portal:ModifyAccount [write] => *
aws-portal:ModifyBilling [write] => *
aws-portal:ModifyPaymentMethods [write] => *
aws-portal:ViewAccount [read] => *
aws-portal:ViewBilling [read] => *
aws-portal:ViewPaymentMethods [read] => *
aws-portal:ViewUsage [read] => *
awsconnector:GetConnectorHealth [read] => *
awsconnector:RegisterConnector [write] => *
awsconnector:ValidateConnectorId [read] => *
backup:CopyFromBackupVault [write] => *
backup:CopyIntoBackupVault [write] => *
backup:CreateBackupPlan [write] => *,backupPlan*
backup:CreateBackupSelection [write] => backupPlan*
backup:CreateBackupVault [write] => *,backupVault*
backup:CreateFramework [write] => *,framework*
backup:CreateReportPlan [write] => *,reportPlan*
backup:DeleteBackupPlan [write] => backupPlan*
backup:DeleteBackupSelection [write] => backupPlan*
backup:DeleteBackupVault [write] => backupVault*
backup:DeleteBackupVaultAccessPolicy [permissions-management] => backupVault*
backup:DeleteBackupVaultLockConfiguration [write] => backupVault*
backup:DeleteBackupVaultNotifications [write] => backupVault*
backup:DeleteFramework [write] => framework*
backup:DeleteRecoveryPoint [write] => recoveryPoint*
backup:DeleteReportPlan [write] => reportPlan*
backup:DescribeBackupJob [read] => *
backup:DescribeBackupVault [read] => backupVault*
backup:DescribeCopyJob [read] => *
backup:DescribeFramework [read] => framework*
backup:DescribeGlobalSettings [read] => *
backup:DescribeProtectedResource [read] => *
backup:DescribeRecoveryPoint [read] => recoveryPoint*
backup:DescribeRegionSettings [read] => *
backup:DescribeReportJob [read] => *
backup:DescribeReportPlan [read] => reportPlan*
backup:DescribeRestoreJob [read] => *
backup:DisassociateRecoveryPoint [write] => recoveryPoint*
backup:ExportBackupPlanTemplate [read] => *
backup:GetBackupPlan [read] => backupPlan*
backup:GetBackupPlanFromJSON [read] => *
backup:GetBackupPlanFromTemplate [read] => *
backup:GetBackupSelection [read] => backupPlan*
backup:GetBackupVaultAccessPolicy [read] => backupVault*
backup:GetBackupVaultNotifications [read] => backupVault*
backup:GetRecoveryPointRestoreMetadata [read] => recoveryPoint*
backup:GetSupportedResourceTypes [read] => *
backup:ListBackupJobs [list] => *
backup:ListBackupPlanTemplates [list] => *
backup:ListBackupPlanVersions [list] => backupPlan*
backup:ListBackupPlans [list] => *
backup:ListBackupSelections [list] => backupPlan*
backup:ListBackupVaults [list] => *
backup:ListCopyJobs [list] => *
backup:ListFrameworks [list] => *
backup:ListProtectedResources [list] => *
backup:ListRecoveryPointsByBackupVault [list] => backupVault*
backup:ListRecoveryPointsByResource [list] => *
backup:ListReportJobs [list] => *
backup:ListReportPlans [list] => *
backup:ListRestoreJobs [list] => *
backup:ListTags [read] => backupPlan,backupVault,framework,recoveryPoint,reportPlan
backup:PutBackupVaultAccessPolicy [permissions-management] => backupVault*
backup:PutBackupVaultLockConfiguration [write] => backupVault*
backup:PutBackupVaultNotifications [write] => backupVault*
backup:StartBackupJob [write] => *,backupVault*
backup:StartCopyJob [write] => recoveryPoint*
backup:StartReportJob [write] => reportPlan*
backup:StartRestoreJob [write] => recoveryPoint*
backup:StopBackupJob [write] => *
backup:TagResource [tagging] => *,backupPlan,backupVault,framework,recoveryPoint,reportPlan
backup:UntagResource [tagging] => *,backupPlan,backupVault,framework,recoveryPoint,reportPlan
backup:UpdateBackupPlan [write] => *,backupPlan*
backup:UpdateFramework [write] => *,framework*
backup:UpdateGlobalSettings [write] => *
backup:UpdateRecoveryPointLifecycle [write] => recoveryPoint*
backup:UpdateRegionSettings [write] => *
backup:UpdateReportPlan [write] => *,reportPlan*
backup-gateway:AssociateGatewayToServer [write] => gateway*,hypervisor*
backup-gateway:Backup [write] => *,virtualmachine*
backup-gateway:CreateGateway [write] => *
backup-gateway:DeleteGateway [write] => gateway*
backup-gateway:DeleteHypervisor [write] => hypervisor*
backup-gateway:DisassociateGatewayFromServer [write] => gateway*
backup-gateway:GetGateway [read] => gateway*
backup-gateway:ImportHypervisorConfiguration [write] => *
backup-gateway:ListGateways [read] => *
backup-gateway:ListHypervisors [read] => *
backup-gateway:ListTagsForResource [read] => *,gateway,hypervisor,virtualmachine
backup-gateway:ListVirtualMachines [read] => *
backup-gateway:PutMaintenanceStartTime [write] => gateway*
backup-gateway:Restore [write] => *,hypervisor*
backup-gateway:TagResource [tagging] => *,gateway,hypervisor,virtualmachine
backup-gateway:TestHypervisorConfiguration [write] => gateway*
backup-gateway:UntagResource [tagging] => *,gateway,hypervisor,virtualmachine
backup-gateway:UpdateGatewayInformation [write] => gateway*
backup-gateway:UpdateGatewaySoftwareNow [write] => gateway*
backup-gateway:UpdateHypervisor [write] => gateway*
backup-storage:MountCapsule [write] => *
batch:CancelJob [write] => job*
batch:CreateComputeEnvironment [write] => *,compute-environment*
batch:CreateJobQueue [write] => *,compute-environment*,job-queue*,scheduling-policy
batch:CreateSchedulingPolicy [write] => *,scheduling-policy*
batch:DeleteComputeEnvironment [write] => compute-environment*
batch:DeleteJobQueue [write] => job-queue*
batch:DeleteSchedulingPolicy [write] => scheduling-policy*
batch:DeregisterJobDefinition [write] => job-definition*
batch:DescribeComputeEnvironments [read] => *
batch:DescribeJobDefinitions [read] => *
batch:DescribeJobQueues [read] => *
batch:DescribeJobs [read] => *
batch:DescribeSchedulingPolicies [read] => *
batch:ListJobs [list] => *
batch:ListSchedulingPolicies [read] => *
batch:ListTagsForResource [read] => compute-environment,job,job-definition,job-queue,scheduling-policy
batch:RegisterJobDefinition [write] => *,job-definition*
batch:SubmitJob [write] => *,job-definition*,job-queue*
batch:TagResource [tagging] => *,compute-environment,job,job-definition,job-queue,scheduling-policy
batch:TerminateJob [write] => job*
batch:UntagResource [tagging] => *,compute-environment,job,job-definition,job-queue,scheduling-policy
batch:UpdateComputeEnvironment [write] => compute-environment*
batch:UpdateJobQueue [write] => compute-environment,job-queue*,scheduling-policy
batch:UpdateSchedulingPolicy [write] => scheduling-policy*
billing:ListBillingViews [read] => *
billingconductor:AssociateAccounts [write] => billinggroup*
billingconductor:AssociatePricingRules [write] => pricingplan*,pricingrule*
billingconductor:BatchAssociateResourcesToCustomLineItem [write] => customlineitem*
billingconductor:BatchDisassociateResourcesFromCustomLineItem [write] => customlineitem*
billingconductor:CreateBillingGroup [write] => *,pricingplan*
billingconductor:CreateCustomLineItem [write] => *
billingconductor:CreatePricingPlan [write] => *
billingconductor:CreatePricingRule [write] => *
billingconductor:DeleteBillingGroup [write] => billinggroup*
billingconductor:DeleteCustomLineItem [write] => customlineitem*
billingconductor:DeletePricingPlan [write] => pricingplan*
billingconductor:DeletePricingRule [write] => pricingrule*
billingconductor:DisassociateAccounts [write] => billinggroup*
billingconductor:DisassociatePricingRules [write] => pricingplan*,pricingrule*
billingconductor:ListAccountAssociations [list] => *
billingconductor:ListBillingGroupCostReports [read] => *
billingconductor:ListBillingGroups [read] => *
billingconductor:ListCustomLineItems [read] => *
billingconductor:ListPricingPlans [read] => *
billingconductor:ListPricingPlansAssociatedWithPricingRule [list] => pricingplan*,pricingrule*
billingconductor:ListPricingRules [read] => *
billingconductor:ListPricingRulesAssociatedToPricingPlan [list] => pricingplan*,pricingrule*
billingconductor:ListResourcesAssociatedToCustomLineItem [list] => customlineitem*
billingconductor:ListTagsForResource [read] => *
billingconductor:TagResource [tagging] => *
billingconductor:UntagResource [tagging] => *
billingconductor:UpdateBillingGroup [write] => billinggroup*
billingconductor:UpdateCustomLineItem [write] => customlineitem*
billingconductor:UpdatePricingPlan [write] => pricingplan*
billingconductor:UpdatePricingRule [write] => pricingrule*
braket:CancelJob [write] => job*
braket:CancelQuantumTask [write] => quantum-task*
braket:CreateJob [write] => *
braket:CreateQuantumTask [write] => *
braket:GetDevice [read] => *
braket:GetJob [read] => job*
braket:GetQuantumTask [read] => quantum-task*
braket:ListTagsForResource [read] => job,quantum-task
braket:SearchDevices [read] => *
braket:SearchJobs [read] => *
braket:SearchQuantumTasks [read] => *
braket:TagResource [tagging] => *,quantum-task
braket:UntagResource [tagging] => *,job,quantum-task
budgets:CreateBudgetAction [write] => budgetAction*
budgets:DeleteBudgetAction [write] => budgetAction*
budgets:DescribeBudgetAction [read] => budgetAction*
budgets:DescribeBudgetActionHistories [read] => budgetAction*
budgets:DescribeBudgetActionsForAccount [read] => *
budgets:DescribeBudgetActionsForBudget [read] => budget*
budgets:ExecuteBudgetAction [write] => budgetAction*
budgets:ModifyBudget [write] => budget*
budgets:UpdateBudgetAction [write] => budgetAction*
budgets:ViewBudget [read] => budget*
bugbust:CreateEvent [write] => *
bugbust:EvaluateProfilingGroups [write] => *,Event*
bugbust:GetEvent [read] => *,Event*
bugbust:GetJoinEventStatus [read] => *,Event*
bugbust:JoinEvent [write] => *,Event*
bugbust:ListBugs [read] => *,Event*
bugbust:ListEventParticipants [read] => *,Event*
bugbust:ListEventScores [read] => *,Event*
bugbust:ListEvents [list] => *
bugbust:ListProfilingGroups [read] => *,Event*
bugbust:ListPullRequests [read] => *,Event*
bugbust:ListTagsForResource [read] => *,Event*
bugbust:TagResource [tagging] => *,Event*
bugbust:UntagResource [tagging] => *,Event*
bugbust:UpdateEvent [write] => *,Event*
bugbust:UpdateWorkItem [write] => *,Event*
bugbust:UpdateWorkItemAdmin [write] => *,Event*
cases:BatchGetField [read] => Domain*,Field*
cases:BatchPutFieldOptions [write] => Domain*,Field*
cases:CreateCase [write] => Domain*,Field*,Template*
cases:CreateDomain [write] => *
cases:CreateField [write] => Domain*
cases:CreateLayout [write] => Domain*
cases:CreateRelatedItem [write] => Case*,Domain*
cases:CreateTemplate [write] => Domain*,Layout*
cases:GetCase [read] => Case*,Domain*,Field*
cases:GetCaseEventConfiguration [read] => Domain*
cases:GetDomain [read] => Domain*
cases:GetLayout [read] => Domain*,Layout*
cases:GetTemplate [read] => Domain*,Template*
cases:ListCasesForContact [list] => Domain*
cases:ListFieldOptions [list] => Domain*,Field*
cases:ListFields [list] => Domain*
cases:ListTagsForResource [read] => *
cases:ListTemplates [list] => Domain*
cases:PutCaseEventConfiguration [write] => Domain*
cases:SearchCases [read] => Domain*
cases:SearchRelatedItems [read] => Case*,Domain*
cases:TagResource [tagging] => *,Case,Domain,Field,Layout,RelatedItem,Template
cases:UntagResource [tagging] => *,Case,Domain,Field,Layout,RelatedItem,Template
cases:UpdateCase [write] => Case*,Domain*,Field*
cases:UpdateField [write] => Domain*,Field*
cases:UpdateLayout [write] => Domain*,Layout*
cases:UpdateTemplate [write] => Domain*,Template*
cassandra:Alter [write] => *,keyspace,table
cassandra:Create [write] => *,keyspace,table
cassandra:Drop [write] => keyspace,table
cassandra:Modify [write] => table*
cassandra:Restore [write] => *,table*
cassandra:Select [read] => table*
cassandra:TagResource [tagging] => *,keyspace,table
cassandra:UntagResource [tagging] => *,keyspace,table
cassandra:UpdatePartitioner [write] => table*
ce:CreateAnomalyMonitor [write] => *
ce:CreateAnomalySubscription [write] => *
ce:CreateCostCategoryDefinition [write] => *
ce:CreateNotificationSubscription [write] => *
ce:CreateReport [write] => *
ce:DeleteAnomalyMonitor [write] => *,anomalymonitor*
ce:DeleteAnomalySubscription [write] => *,anomalysubscription*
ce:DeleteCostCategoryDefinition [write] => *,costcategory*
ce:DeleteNotificationSubscription [write] => *
ce:DeleteReport [write] => *
ce:DescribeCostCategoryDefinition [read] => *,costcategory*
ce:DescribeNotificationSubscription [read] => *
ce:DescribeReport [read] => *
ce:GetAnomalies [read] => *,anomalymonitor*
ce:GetAnomalyMonitors [read] => *,anomalymonitor*
ce:GetAnomalySubscriptions [read] => *,anomalysubscription*
ce:GetCostAndUsage [read] => *
ce:GetCostAndUsageWithResources [read] => *
ce:GetCostCategories [read] => *
ce:GetCostForecast [read] => *
ce:GetDimensionValues [read] => *
ce:GetPreferences [read] => *
ce:GetReservationCoverage [read] => *
ce:GetReservationPurchaseRecommendation [read] => *
ce:GetReservationUtilization [read] => *
ce:GetRightsizingRecommendation [read] => *
ce:GetSavingsPlansCoverage [read] => *
ce:GetSavingsPlansPurchaseRecommendation [read] => *
ce:GetSavingsPlansUtilization [read] => *
ce:GetSavingsPlansUtilizationDetails [read] => *
ce:GetTags [read] => *
ce:GetUsageForecast [read] => *
ce:ListCostAllocationTags [list] => *
ce:ListCostCategoryDefinitions [list] => *
ce:ListTagsForResource [read] => *,anomalymonitor,anomalysubscription,costcategory
ce:ProvideAnomalyFeedback [write] => *
ce:TagResource [tagging] => *,anomalymonitor,anomalysubscription,costcategory
ce:UntagResource [tagging] => *,anomalymonitor,anomalysubscription,costcategory
ce:UpdateAnomalyMonitor [write] => *,anomalymonitor*
ce:UpdateAnomalySubscription [write] => *,anomalysubscription*
ce:UpdateCostAllocationTagsStatus [write] => *
ce:UpdateCostCategoryDefinition [write] => *,costcategory*
ce:UpdateNotificationSubscription [write] => *
ce:UpdatePreferences [write] => *
ce:UpdateReport [write] => *
chatbot:CreateChimeWebhookConfiguration [write] => *
chatbot:CreateSlackChannelConfiguration [write] => *
chatbot:DeleteChimeWebhookConfiguration [write] => ChatbotConfiguration*
chatbot:DeleteSlackChannelConfiguration [write] => ChatbotConfiguration*
chatbot:DeleteSlackUserIdentity [write] => *
chatbot:DeleteSlackWorkspaceAuthorization [write] => *
chatbot:DescribeChimeWebhookConfigurations [read] => *
chatbot:DescribeSlackChannelConfigurations [read] => *
chatbot:DescribeSlackChannels [read] => *
chatbot:DescribeSlackUserIdentities [read] => *
chatbot:DescribeSlackWorkspaces [read] => *
chatbot:GetAccountPreferences [read] => *
chatbot:GetSlackOauthParameters [read] => *
chatbot:RedeemSlackOauthCode [write] => *
chatbot:UpdateAccountPreferences [write] => *
chatbot:UpdateChimeWebhookConfiguration [write] => ChatbotConfiguration*
chatbot:UpdateSlackChannelConfiguration [write] => ChatbotConfiguration*
chime:AcceptDelegate [write] => *
chime:ActivateUsers [write] => *
chime:AddDomain [write] => *
chime:AddOrUpdateGroups [write] => *
chime:AssociateChannelFlow [write] => app-instance-user*,channel*,channel-flow*
chime:AssociatePhoneNumberWithUser [write] => *
chime:AssociatePhoneNumbersWithVoiceConnector [write] => *
chime:AssociatePhoneNumbersWithVoiceConnectorGroup [write] => *
chime:AssociateSigninDelegateGroupsWithAccount [write] => *
chime:AuthorizeDirectory [write] => *
chime:BatchCreateAttendee [write] => meeting*
chime:BatchCreateChannelMembership [write] => app-instance-user*,channel*
chime:BatchCreateRoomMembership [write] => *
chime:BatchDeletePhoneNumber [write] => *
chime:BatchSuspendUser [write] => *
chime:BatchUnsuspendUser [write] => *
chime:BatchUpdateAttendeeCapabilitiesExcept [write] => meeting*
chime:BatchUpdatePhoneNumber [write] => *
chime:BatchUpdateUser [write] => *
chime:ChannelFlowCallback [write] => channel*
chime:Connect [write] => app-instance-user*
chime:ConnectDirectory [write] => *
chime:CreateAccount [write] => *
chime:CreateApiKey [write] => *
chime:CreateAppInstance [write] => *
chime:CreateAppInstanceAdmin [write] => app-instance*,app-instance-user*
chime:CreateAppInstanceUser [write] => *
chime:CreateAttendee [write] => meeting*
chime:CreateBot [write] => *
chime:CreateCDRBucket [write] => *
chime:CreateChannel [write] => *,app-instance-user*
chime:CreateChannelBan [write] => app-instance-user*,channel*
chime:CreateChannelFlow [write] => *,app-instance*
chime:CreateChannelMembership [write] => app-instance-user*,channel*
chime:CreateChannelModerator [write] => app-instance-user*,channel*
chime:CreateMediaCapturePipeline [write] => *
chime:CreateMediaConcatenationPipeline [write] => *
chime:CreateMediaLiveConnectorPipeline [write] => *
chime:CreateMeeting [write] => *
chime:CreateMeetingDialOut [write] => meeting*
chime:CreateMeetingWithAttendees [write] => *
chime:CreatePhoneNumberOrder [write] => *
chime:CreateProxySession [write] => *
chime:CreateRoom [write] => *
chime:CreateRoomMembership [write] => *
chime:CreateSipMediaApplication [write] => *
chime:CreateSipMediaApplicationCall [write] => *
chime:CreateSipRule [write] => *
chime:CreateUser [write] => *
chime:CreateVoiceConnector [write] => *
chime:CreateVoiceConnectorGroup [write] => *
chime:DeleteAccount [write] => *
chime:DeleteAccountOpenIdConfig [write] => *
chime:DeleteApiKey [write] => *
chime:DeleteAppInstance [write] => app-instance*
chime:DeleteAppInstanceAdmin [write] => app-instance*,app-instance-user*
chime:DeleteAppInstanceStreamingConfigurations [write] => app-instance*
chime:DeleteAppInstanceUser [write] => app-instance-user*
chime:DeleteAttendee [write] => meeting*
chime:DeleteCDRBucket [write] => *
chime:DeleteChannel [write] => app-instance-user*,channel*
chime:DeleteChannelBan [write] => app-instance-user*,channel*
chime:DeleteChannelFlow [write] => channel*
chime:DeleteChannelMembership [write] => app-instance-user*,channel*
chime:DeleteChannelMessage [write] => app-instance-user*,channel*
chime:DeleteChannelModerator [write] => app-instance-user*,channel*
chime:DeleteDelegate [write] => *
chime:DeleteDomain [write] => *
chime:DeleteEventsConfiguration [write] => *
chime:DeleteGroups [write] => *
chime:DeleteMediaCapturePipeline [write] => media-pipeline*
chime:DeleteMediaPipeline [write] => media-pipeline*
chime:DeleteMeeting [write] => meeting*
chime:DeletePhoneNumber [write] => *
chime:DeleteProxySession [write] => *
chime:DeleteRoom [write] => *
chime:DeleteRoomMembership [write] => *
chime:DeleteSipMediaApplication [write] => *
chime:DeleteSipRule [write] => *
chime:DeleteVoiceConnector [write] => *
chime:DeleteVoiceConnectorEmergencyCallingConfiguration [write] => *
chime:DeleteVoiceConnectorGroup [write] => *
chime:DeleteVoiceConnectorOrigination [write] => *
chime:DeleteVoiceConnectorProxy [write] => *
chime:DeleteVoiceConnectorStreamingConfiguration [write] => *
chime:DeleteVoiceConnectorTermination [write] => *
chime:DeleteVoiceConnectorTerminationCredentials [write] => *
chime:DeregisterAppInstanceUserEndpoint [write] => app-instance-user*
chime:DescribeAppInstance [read] => app-instance*
chime:DescribeAppInstanceAdmin [read] => app-instance*,app-instance-user*
chime:DescribeAppInstanceUser [read] => app-instance-user*
chime:DescribeAppInstanceUserEndpoint [read] => app-instance-user*
chime:DescribeChannel [read] => app-instance-user*,channel*
chime:DescribeChannelBan [read] => app-instance-user*,channel*
chime:DescribeChannelFlow [read] => channel-flow*
chime:DescribeChannelMembership [read] => app-instance-user*,channel*
chime:DescribeChannelMembershipForAppInstanceUser [read] => app-instance-user*,channel*
chime:DescribeChannelModeratedByAppInstanceUser [read] => app-instance-user*,channel*
chime:DescribeChannelModerator [read] => app-instance-user*,channel*
chime:DisassociateChannelFlow [write] => app-instance-user*,channel*,channel-flow*
chime:DisassociatePhoneNumberFromUser [write] => *
chime:DisassociatePhoneNumbersFromVoiceConnector [write] => *
chime:DisassociatePhoneNumbersFromVoiceConnectorGroup [write] => *
chime:DisassociateSigninDelegateGroupsFromAccount [write] => *
chime:DisconnectDirectory [write] => *
chime:GetAccount [read] => *
chime:GetAccountResource [read] => *
chime:GetAccountSettings [read] => *
chime:GetAccountWithOpenIdConfig [read] => *
chime:GetAppInstanceRetentionSettings [read] => app-instance*
chime:GetAppInstanceStreamingConfigurations [read] => app-instance*
chime:GetAttendee [read] => meeting*
chime:GetBot [read] => *
chime:GetCDRBucket [read] => *
chime:GetChannelMembershipPreferences [read] => app-instance-user*,channel*
chime:GetChannelMessage [read] => app-instance-user*,channel*
chime:GetChannelMessageStatus [read] => app-instance-user*,channel*
chime:GetDomain [read] => *
chime:GetEventsConfiguration [read] => *
chime:GetGlobalSettings [read] => *
chime:GetMediaCapturePipeline [read] => media-pipeline*
chime:GetMediaPipeline [read] => media-pipeline*
chime:GetMeeting [read] => meeting*
chime:GetMeetingDetail [read] => *
chime:GetMessagingSessionEndpoint [read] => *
chime:GetPhoneNumber [read] => *
chime:GetPhoneNumberOrder [read] => *
chime:GetPhoneNumberSettings [read] => *
chime:GetProxySession [read] => *
chime:GetRetentionSettings [read] => *
chime:GetRoom [read] => *
chime:GetSipMediaApplication [read] => *
chime:GetSipMediaApplicationLoggingConfiguration [read] => *
chime:GetSipRule [read] => *
chime:GetTelephonyLimits [read] => *
chime:GetUser [read] => *
chime:GetUserActivityReportData [read] => *
chime:GetUserByEmail [read] => *
chime:GetUserSettings [read] => *
chime:GetVoiceConnector [read] => *
chime:GetVoiceConnectorEmergencyCallingConfiguration [read] => *
chime:GetVoiceConnectorGroup [read] => *
chime:GetVoiceConnectorLoggingConfiguration [read] => *
chime:GetVoiceConnectorOrigination [read] => *
chime:GetVoiceConnectorProxy [read] => *
chime:GetVoiceConnectorStreamingConfiguration [read] => *
chime:GetVoiceConnectorTermination [read] => *
chime:GetVoiceConnectorTerminationHealth [read] => *
chime:InviteDelegate [write] => *
chime:InviteUsers [write] => *
chime:InviteUsersFromProvider [write] => *
chime:ListAccountUsageReportData [list] => *
chime:ListAccounts [list] => *
chime:ListApiKeys [list] => *
chime:ListAppInstanceAdmins [list] => app-instance*,app-instance-user*
chime:ListAppInstanceUserEndpoints [list] => app-instance-user*
chime:ListAppInstanceUsers [list] => app-instance-user*
chime:ListAppInstances [list] => app-instance*
chime:ListAttendeeTags [list] => meeting*
chime:ListAttendees [list] => meeting*
chime:ListBots [list] => *
chime:ListCDRBucket [list] => *
chime:ListCallingRegions [list] => *
chime:ListChannelBans [list] => app-instance-user*,channel*
chime:ListChannelFlows [list] => channel-flow*
chime:ListChannelMemberships [list] => app-instance-user*,channel*
chime:ListChannelMembershipsForAppInstanceUser [list] => app-instance-user*
chime:ListChannelMessages [read] => app-instance-user*,channel*
chime:ListChannelModerators [list] => app-instance-user*,channel*
chime:ListChannels [list] => app-instance-user*
chime:ListChannelsAssociatedWithChannelFlow [list] => channel-flow*
chime:ListChannelsModeratedByAppInstanceUser [list] => app-instance-user*
chime:ListDelegates [list] => *
chime:ListDirectories [list] => *
chime:ListDomains [list] => *
chime:ListGroups [list] => *
chime:ListMediaCapturePipelines [list] => *
chime:ListMediaPipelines [list] => *
chime:ListMeetingEvents [list] => *
chime:ListMeetingTags [list] => meeting*
chime:ListMeetings [list] => *
chime:ListMeetingsReportData [list] => *
chime:ListPhoneNumberOrders [list] => *
chime:ListPhoneNumbers [list] => *
chime:ListProxySessions [list] => *
chime:ListRoomMemberships [list] => *
chime:ListRooms [list] => *
chime:ListSipMediaApplications [list] => *
chime:ListSipRules [list] => *
chime:ListSubChannels [list] => app-instance-user*,channel*
chime:ListSupportedPhoneNumberCountries [list] => *
chime:ListTagsForResource [read] => channel
chime:ListUsers [list] => *
chime:ListVoiceConnectorGroups [list] => *
chime:ListVoiceConnectorTerminationCredentials [list] => *
chime:ListVoiceConnectors [list] => *
chime:LogoutUser [write] => *
chime:PutAppInstanceRetentionSettings [write] => app-instance*
chime:PutAppInstanceStreamingConfigurations [write] => app-instance*
chime:PutChannelMembershipPreferences [write] => app-instance-user*,channel*
chime:PutEventsConfiguration [write] => *
chime:PutRetentionSettings [write] => *
chime:PutSipMediaApplicationLoggingConfiguration [write] => *
chime:PutVoiceConnectorEmergencyCallingConfiguration [write] => *
chime:PutVoiceConnectorLoggingConfiguration [write] => *
chime:PutVoiceConnectorOrigination [write] => *
chime:PutVoiceConnectorProxy [write] => *
chime:PutVoiceConnectorStreamingConfiguration [write] => *
chime:PutVoiceConnectorTermination [write] => *
chime:PutVoiceConnectorTerminationCredentials [write] => *
chime:RedactChannelMessage [write] => app-instance-user*,channel*
chime:RedactConversationMessage [write] => *
chime:RedactRoomMessage [write] => *
chime:RegenerateSecurityToken [write] => *
chime:RegisterAppInstanceUserEndpoint [write] => app-instance-user*
chime:RenameAccount [write] => *
chime:RenewDelegate [write] => *
chime:ResetAccountResource [write] => *
chime:ResetPersonalPIN [write] => *
chime:RestorePhoneNumber [write] => *
chime:RetrieveDataExports [read] => *
chime:SearchAvailablePhoneNumbers [read] => *
chime:SearchChannels [list] => app-instance-user*
chime:SendChannelMessage [write] => app-instance-user*,channel*
chime:StartDataExport [write] => *
chime:StartMeetingTranscription [write] => *
chime:StopMeetingTranscription [write] => *
chime:SubmitSupportRequest [write] => *
chime:SuspendUsers [write] => *
chime:TagAttendee [tagging] => meeting*
chime:TagMeeting [tagging] => *,meeting*
chime:TagResource [tagging] => *,app-instance,app-instance-user,channel,channel-flow,media-pipeline,meeting
chime:UnauthorizeDirectory [write] => *
chime:UntagAttendee [tagging] => meeting*
chime:UntagMeeting [tagging] => meeting*
chime:UntagResource [tagging] => *,app-instance,app-instance-user,channel,channel-flow,media-pipeline,meeting
chime:UpdateAccount [write] => *
chime:UpdateAccountOpenIdConfig [write] => *
chime:UpdateAccountResource [write] => *
chime:UpdateAccountSettings [write] => *
chime:UpdateAppInstance [write] => app-instance*
chime:UpdateAppInstanceUser [write] => app-instance-user*
chime:UpdateAppInstanceUserEndpoint [write] => app-instance-user*
chime:UpdateAttendeeCapabilities [write] => meeting*
chime:UpdateBot [write] => *
chime:UpdateCDRSettings [write] => *
chime:UpdateChannel [write] => app-instance-user*,channel*
chime:UpdateChannelFlow [write] => channel-flow*
chime:UpdateChannelMessage [write] => app-instance-user*,channel*
chime:UpdateChannelReadMarker [write] => app-instance-user*,channel*
chime:UpdateGlobalSettings [write] => *
chime:UpdatePhoneNumber [write] => *
chime:UpdatePhoneNumberSettings [write] => *
chime:UpdateProxySession [write] => *
chime:UpdateRoom [write] => *
chime:UpdateRoomMembership [write] => *
chime:UpdateSipMediaApplication [write] => *
chime:UpdateSipMediaApplicationCall [write] => *
chime:UpdateSipRule [write] => *
chime:UpdateSupportedLicenses [write] => *
chime:UpdateUser [write] => *
chime:UpdateUserLicenses [write] => *
chime:UpdateUserSettings [write] => *
chime:UpdateVoiceConnector [write] => *
chime:UpdateVoiceConnectorGroup [write] => *
chime:ValidateAccountResource [read] => *
cloud9:ActivateEC2Remote [write] => environment*
cloud9:CreateEnvironmentEC2 [write] => *
cloud9:CreateEnvironmentMembership [write] => *,environment*
cloud9:CreateEnvironmentSSH [write] => *
cloud9:CreateEnvironmentToken [read] => environment*
cloud9:DeleteEnvironment [write] => environment*
cloud9:DeleteEnvironmentMembership [write] => environment*
cloud9:DescribeEC2Remote [read] => environment*
cloud9:DescribeEnvironmentMemberships [read] => *,environment*
cloud9:DescribeEnvironmentStatus [read] => environment*
cloud9:DescribeEnvironments [read] => environment*
cloud9:DescribeSSHRemote [read] => environment*
cloud9:GetEnvironmentConfig [read] => environment*
cloud9:GetEnvironmentSettings [read] => environment*
cloud9:GetMembershipSettings [read] => environment*
cloud9:GetUserPublicKey [read] => *
cloud9:GetUserSettings [read] => *
cloud9:ListEnvironments [read] => *
cloud9:ListTagsForResource [read] => environment*
cloud9:ModifyTemporaryCredentialsOnEnvironmentEC2 [write] => environment*
cloud9:TagResource [tagging] => *,environment*
cloud9:UntagResource [tagging] => *,environment*
cloud9:UpdateEnvironment [write] => environment*
cloud9:UpdateEnvironmentMembership [write] => *,environment*
cloud9:UpdateEnvironmentSettings [write] => environment*
cloud9:UpdateMembershipSettings [write] => environment*
cloud9:UpdateSSHRemote [write] => environment*
cloud9:UpdateUserSettings [write] => *
cloud9:ValidateEnvironmentName [read] => *
clouddirectory:AddFacetToObject [write] => directory*
clouddirectory:ApplySchema [write] => directory*,publishedSchema*
clouddirectory:AttachObject [write] => directory*
clouddirectory:AttachPolicy [write] => directory*
clouddirectory:AttachToIndex [write] => directory*
clouddirectory:AttachTypedLink [write] => directory*
clouddirectory:BatchRead [read] => directory*
clouddirectory:BatchWrite [write] => directory*
clouddirectory:CreateDirectory [write] => publishedSchema*
clouddirectory:CreateFacet [write] => appliedSchema*,developmentSchema*
clouddirectory:CreateIndex [write] => directory*
clouddirectory:CreateObject [write] => directory*
clouddirectory:CreateSchema [write] => *
clouddirectory:CreateTypedLinkFacet [write] => appliedSchema*,developmentSchema*
clouddirectory:DeleteDirectory [write] => directory*
clouddirectory:DeleteFacet [write] => developmentSchema*
clouddirectory:DeleteObject [write] => directory*
clouddirectory:DeleteSchema [write] => developmentSchema*,publishedSchema*
clouddirectory:DeleteTypedLinkFacet [write] => developmentSchema*
clouddirectory:DetachFromIndex [write] => directory*
clouddirectory:DetachObject [write] => directory*
clouddirectory:DetachPolicy [write] => directory*
clouddirectory:DetachTypedLink [write] => directory*
clouddirectory:DisableDirectory [write] => directory*
clouddirectory:EnableDirectory [write] => directory*
clouddirectory:GetAppliedSchemaVersion [read] => appliedSchema*
clouddirectory:GetDirectory [read] => directory*
clouddirectory:GetFacet [read] => appliedSchema*,developmentSchema*,publishedSchema*
clouddirectory:GetLinkAttributes [read] => directory*
clouddirectory:GetObjectAttributes [read] => directory*
clouddirectory:GetObjectInformation [read] => directory*
clouddirectory:GetSchemaAsJson [read] => appliedSchema*,developmentSchema*,publishedSchema*
clouddirectory:GetTypedLinkFacetInformation [read] => appliedSchema*,developmentSchema*,publishedSchema*
clouddirectory:ListAppliedSchemaArns [list] => directory*
clouddirectory:ListAttachedIndices [read] => directory*
clouddirectory:ListDevelopmentSchemaArns [list] => *
clouddirectory:ListDirectories [list] => *
clouddirectory:ListFacetAttributes [read] => appliedSchema*,developmentSchema*,publishedSchema*
clouddirectory:ListFacetNames [read] => appliedSchema*,developmentSchema*,publishedSchema*
clouddirectory:ListIncomingTypedLinks [read] => directory*
clouddirectory:ListIndex [read] => directory*
clouddirectory:ListManagedSchemaArns [list] => *
clouddirectory:ListObjectAttributes [read] => directory*
clouddirectory:ListObjectChildren [read] => directory*
clouddirectory:ListObjectParentPaths [read] => directory*
clouddirectory:ListObjectParents [read] => directory*
clouddirectory:ListObjectPolicies [read] => directory*
clouddirectory:ListOutgoingTypedLinks [read] => directory*
clouddirectory:ListPolicyAttachments [read] => directory*
clouddirectory:ListPublishedSchemaArns [list] => *
clouddirectory:ListTagsForResource [read] => directory*
clouddirectory:ListTypedLinkFacetAttributes [read] => appliedSchema*,developmentSchema*,publishedSchema*
clouddirectory:ListTypedLinkFacetNames [read] => appliedSchema*,developmentSchema*,publishedSchema*
clouddirectory:LookupPolicy [read] => directory*
clouddirectory:PublishSchema [write] => developmentSchema*
clouddirectory:PutSchemaFromJson [write] => *
clouddirectory:RemoveFacetFromObject [write] => directory*
clouddirectory:TagResource [tagging] => directory*
clouddirectory:UntagResource [tagging] => directory*
clouddirectory:UpdateFacet [write] => appliedSchema*,developmentSchema*
clouddirectory:UpdateLinkAttributes [write] => directory*
clouddirectory:UpdateObjectAttributes [write] => directory*
clouddirectory:UpdateSchema [write] => developmentSchema*
clouddirectory:UpdateTypedLinkFacet [write] => developmentSchema*
clouddirectory:UpgradeAppliedSchema [write] => directory*,publishedSchema*
clouddirectory:UpgradePublishedSchema [write] => developmentSchema*,publishedSchema*
cloudformation:CancelResourceRequest [write] => *
cloudformation:CreateResource [write] => *
cloudformation:DeleteResource [write] => *
cloudformation:GetResource [read] => *
cloudformation:GetResourceRequestStatus [read] => *
cloudformation:ListResourceRequests [read] => *
cloudformation:ListResources [read] => *
cloudformation:UpdateResource [write] => *
cloudformation:ActivateType [write] => *
cloudformation:BatchDescribeTypeConfigurations [read] => *
cloudformation:CancelUpdateStack [write] => stack*
cloudformation:ContinueUpdateRollback [write] => *,stack*
cloudformation:CreateChangeSet [write] => *,stack*
cloudformation:CreateStack [write] => *,stack*
cloudformation:CreateStackInstances [write] => *,stackset*,stackset-target,type
cloudformation:CreateStackSet [write] => *
cloudformation:CreateUploadBucket [write] => *
cloudformation:DeactivateType [write] => *
cloudformation:DeleteChangeSet [write] => *,stack*
cloudformation:DeleteStack [write] => *,stack*
cloudformation:DeleteStackInstances [write] => *,stackset*,stackset-target,type
cloudformation:DeleteStackSet [write] => stackset*
cloudformation:DeregisterType [write] => *
cloudformation:DescribeAccountLimits [read] => *
cloudformation:DescribeChangeSet [read] => *,stack*
cloudformation:DescribeChangeSetHooks [read] => *,stack*
cloudformation:DescribePublisher [read] => *
cloudformation:DescribeStackDriftDetectionStatus [read] => *
cloudformation:DescribeStackEvents [read] => stack*
cloudformation:DescribeStackInstance [read] => stackset*
cloudformation:DescribeStackResource [read] => stack*
cloudformation:DescribeStackResourceDrifts [read] => stack*
cloudformation:DescribeStackResources [read] => stack*
cloudformation:DescribeStackSet [read] => stackset*
cloudformation:DescribeStackSetOperation [read] => stackset*
cloudformation:DescribeStacks [list] => stack*
cloudformation:DescribeType [read] => *
cloudformation:DescribeTypeRegistration [read] => *
cloudformation:DetectStackDrift [read] => stack*
cloudformation:DetectStackResourceDrift [read] => stack*
cloudformation:DetectStackSetDrift [read] => stackset*
cloudformation:EstimateTemplateCost [read] => *
cloudformation:ExecuteChangeSet [write] => *,stack*
cloudformation:GetStackPolicy [read] => stack*
cloudformation:GetTemplate [read] => stack*
cloudformation:GetTemplateSummary [read] => stack,stackset
cloudformation:ImportStacksToStackSet [write] => stackset*
cloudformation:ListChangeSets [list] => stack*
cloudformation:ListExports [list] => *
cloudformation:ListImports [list] => *
cloudformation:ListStackInstances [list] => stackset*
cloudformation:ListStackResources [list] => stack*
cloudformation:ListStackSetOperationResults [list] => stackset*
cloudformation:ListStackSetOperations [list] => stackset*
cloudformation:ListStackSets [list] => stackset*
cloudformation:ListStacks [list] => *
cloudformation:ListTypeRegistrations [list] => *
cloudformation:ListTypeVersions [list] => *
cloudformation:ListTypes [list] => *
cloudformation:PublishType [write] => *
cloudformation:RecordHandlerProgress [write] => stack*
cloudformation:RegisterPublisher [write] => *
cloudformation:RegisterType [write] => *
cloudformation:RollbackStack [write] => *,stack*
cloudformation:SetStackPolicy [permissions-management] => *,stack*
cloudformation:SetTypeConfiguration [write] => *
cloudformation:SetTypeDefaultVersion [write] => *
cloudformation:SignalResource [write] => stack*
cloudformation:StopStackSetOperation [write] => stackset*
cloudformation:TagResource [tagging] => *,changeset,stack,stackset
cloudformation:TestType [write] => *
cloudformation:UntagResource [tagging] => *,changeset,stack,stackset
cloudformation:UpdateStack [write] => *,stack*
cloudformation:UpdateStackInstances [write] => *,stackset*,stackset-target,type
cloudformation:UpdateStackSet [write] => *,stackset*,stackset-target,type
cloudformation:UpdateTerminationProtection [write] => stack*
cloudformation:ValidateTemplate [read] => *
cloudfront:AssociateAlias [write] => distribution*
cloudfront:CreateCachePolicy [write] => cache-policy*
cloudfront:CreateCloudFrontOriginAccessIdentity [write] => origin-access-identity*
cloudfront:CreateDistribution [write] => distribution*
cloudfront:CreateFieldLevelEncryptionConfig [write] => field-level-encryption*
cloudfront:CreateFieldLevelEncryptionProfile [write] => field-level-encryption-profile*
cloudfront:CreateFunction [write] => function*
cloudfront:CreateInvalidation [write] => distribution*
cloudfront:CreateKeyGroup [write] => *
cloudfront:CreateMonitoringSubscription [write] => *
cloudfront:CreateOriginRequestPolicy [write] => origin-request-policy*
cloudfront:CreatePublicKey [write] => *
cloudfront:CreateRealtimeLogConfig [write] => realtime-log-config*
cloudfront:CreateResponseHeadersPolicy [write] => response-headers-policy*
cloudfront:CreateStreamingDistribution [write] => streaming-distribution*
cloudfront:CreateStreamingDistributionWithTags [write] => *,streaming-distribution*
cloudfront:DeleteCachePolicy [write] => cache-policy*
cloudfront:DeleteCloudFrontOriginAccessIdentity [write] => origin-access-identity*
cloudfront:DeleteDistribution [write] => distribution*
cloudfront:DeleteFieldLevelEncryptionConfig [write] => field-level-encryption*
cloudfront:DeleteFieldLevelEncryptionProfile [write] => field-level-encryption-profile*
cloudfront:DeleteFunction [write] => function*
cloudfront:DeleteKeyGroup [write] => *
cloudfront:DeleteMonitoringSubscription [write] => *
cloudfront:DeleteOriginRequestPolicy [write] => origin-request-policy*
cloudfront:DeletePublicKey [write] => *
cloudfront:DeleteRealtimeLogConfig [write] => realtime-log-config*
cloudfront:DeleteResponseHeadersPolicy [write] => response-headers-policy*
cloudfront:DeleteStreamingDistribution [write] => streaming-distribution*
cloudfront:DescribeFunction [read] => function*
cloudfront:GetCachePolicy [read] => cache-policy*
cloudfront:GetCachePolicyConfig [read] => cache-policy*
cloudfront:GetCloudFrontOriginAccessIdentity [read] => origin-access-identity*
cloudfront:GetCloudFrontOriginAccessIdentityConfig [read] => origin-access-identity*
cloudfront:GetDistribution [read] => distribution*
cloudfront:GetDistributionConfig [read] => distribution*
cloudfront:GetFieldLevelEncryption [read] => field-level-encryption*
cloudfront:GetFieldLevelEncryptionConfig [read] => field-level-encryption*
cloudfront:GetFieldLevelEncryptionProfile [read] => field-level-encryption-profile*
cloudfront:GetFieldLevelEncryptionProfileConfig [read] => field-level-encryption-profile*
cloudfront:GetFunction [read] => function*
cloudfront:GetInvalidation [read] => distribution*
cloudfront:GetKeyGroup [read] => *
cloudfront:GetKeyGroupConfig [read] => *
cloudfront:GetMonitoringSubscription [read] => *
cloudfront:GetOriginRequestPolicy [read] => origin-request-policy*
cloudfront:GetOriginRequestPolicyConfig [read] => origin-request-policy*
cloudfront:GetPublicKey [read] => *
cloudfront:GetPublicKeyConfig [read] => *
cloudfront:GetRealtimeLogConfig [read] => realtime-log-config*
cloudfront:GetResponseHeadersPolicy [read] => response-headers-policy*
cloudfront:GetResponseHeadersPolicyConfig [read] => response-headers-policy*
cloudfront:GetStreamingDistribution [read] => streaming-distribution*
cloudfront:GetStreamingDistributionConfig [read] => streaming-distribution*
cloudfront:ListCachePolicies [list] => *
cloudfront:ListCloudFrontOriginAccessIdentities [list] => *
cloudfront:ListConflictingAliases [list] => distribution*
cloudfront:ListDistributions [list] => *
cloudfront:ListDistributionsByCachePolicyId [list] => *
cloudfront:ListDistributionsByKeyGroup [list] => *
cloudfront:ListDistributionsByLambdaFunction [list] => *
cloudfront:ListDistributionsByOriginRequestPolicyId [list] => *
cloudfront:ListDistributionsByRealtimeLogConfig [list] => *
cloudfront:ListDistributionsByResponseHeadersPolicyId [list] => *
cloudfront:ListDistributionsByWebACLId [list] => *
cloudfront:ListFieldLevelEncryptionConfigs [list] => *
cloudfront:ListFieldLevelEncryptionProfiles [list] => *
cloudfront:ListFunctions [list] => *
cloudfront:ListInvalidations [list] => distribution*
cloudfront:ListKeyGroups [list] => *
cloudfront:ListOriginRequestPolicies [list] => *
cloudfront:ListPublicKeys [list] => *
cloudfront:ListRealtimeLogConfigs [list] => *
cloudfront:ListResponseHeadersPolicies [list] => *
cloudfront:ListStreamingDistributions [list] => *
cloudfront:ListTagsForResource [read] => distribution,streaming-distribution
cloudfront:PublishFunction [write] => function*
cloudfront:TagResource [tagging] => *,distribution,streaming-distribution
cloudfront:TestFunction [write] => function*
cloudfront:UntagResource [tagging] => *,distribution,streaming-distribution
cloudfront:UpdateCachePolicy [write] => cache-policy*
cloudfront:UpdateCloudFrontOriginAccessIdentity [write] => origin-access-identity*
cloudfront:UpdateDistribution [write] => distribution*
cloudfront:UpdateFieldLevelEncryptionConfig [write] => field-level-encryption*
cloudfront:UpdateFieldLevelEncryptionProfile [write] => field-level-encryption-profile*
cloudfront:UpdateFunction [write] => function*
cloudfront:UpdateKeyGroup [write] => *
cloudfront:UpdateOriginRequestPolicy [write] => origin-request-policy*
cloudfront:UpdatePublicKey [write] => *
cloudfront:UpdateRealtimeLogConfig [write] => realtime-log-config*
cloudfront:UpdateResponseHeadersPolicy [write] => response-headers-policy*
cloudfront:UpdateStreamingDistribution [write] => streaming-distribution*
cloudhsm:AddTagsToResource [tagging] => *
cloudhsm:CopyBackupToRegion [write] => *,backup*
cloudhsm:CreateCluster [write] => *,backup
cloudhsm:CreateHapg [write] => *
cloudhsm:CreateHsm [write] => cluster*
cloudhsm:CreateLunaClient [write] => *
cloudhsm:DeleteBackup [write] => backup*
cloudhsm:DeleteCluster [write] => cluster*
cloudhsm:DeleteHapg [write] => *
cloudhsm:DeleteHsm [write] => *
cloudhsm:DeleteLunaClient [write] => *
cloudhsm:DescribeBackups [read] => *
cloudhsm:DescribeClusters [read] => *
cloudhsm:DescribeHapg [read] => *
cloudhsm:DescribeHsm [read] => *
cloudhsm:DescribeLunaClient [read] => *
cloudhsm:GetConfig [read] => *
cloudhsm:InitializeCluster [write] => cluster*
cloudhsm:ListAvailableZones [list] => *
cloudhsm:ListHapgs [list] => *
cloudhsm:ListHsms [list] => *
cloudhsm:ListLunaClients [list] => *
cloudhsm:ListTags [read] => backup,cluster
cloudhsm:ListTagsForResource [read] => *
cloudhsm:ModifyBackupAttributes [write] => backup*
cloudhsm:ModifyCluster [write] => cluster*
cloudhsm:ModifyHapg [write] => *
cloudhsm:ModifyHsm [write] => *
cloudhsm:ModifyLunaClient [write] => *
cloudhsm:RemoveTagsFromResource [tagging] => *
cloudhsm:RestoreBackup [write] => backup*
cloudhsm:TagResource [tagging] => *,backup,cluster
cloudhsm:UntagResource [tagging] => *,backup,cluster
cloudsearch:AddTags [tagging] => domain*
cloudsearch:BuildSuggesters [write] => domain*
cloudsearch:CreateDomain [write] => domain*
cloudsearch:DefineAnalysisScheme [write] => domain*
cloudsearch:DefineExpression [write] => domain*
cloudsearch:DefineIndexField [write] => domain*
cloudsearch:DefineSuggester [write] => domain*
cloudsearch:DeleteAnalysisScheme [write] => domain*
cloudsearch:DeleteDomain [write] => domain*
cloudsearch:DeleteExpression [write] => domain*
cloudsearch:DeleteIndexField [write] => domain*
cloudsearch:DeleteSuggester [write] => domain*
cloudsearch:DescribeAnalysisSchemes [read] => domain*
cloudsearch:DescribeAvailabilityOptions [read] => domain*
cloudsearch:DescribeDomainEndpointOptions [read] => domain*
cloudsearch:DescribeDomains [list] => domain*
cloudsearch:DescribeExpressions [read] => domain*
cloudsearch:DescribeIndexFields [read] => domain*
cloudsearch:DescribeScalingParameters [read] => domain*
cloudsearch:DescribeServiceAccessPolicies [read] => domain*
cloudsearch:DescribeSuggesters [read] => domain*
cloudsearch:IndexDocuments [write] => domain*
cloudsearch:ListDomainNames [list] => domain*
cloudsearch:ListTags [read] => domain*
cloudsearch:RemoveTags [tagging] => domain*
cloudsearch:UpdateAvailabilityOptions [write] => domain*
cloudsearch:UpdateDomainEndpointOptions [write] => domain*
cloudsearch:UpdateScalingParameters [write] => domain*
cloudsearch:UpdateServiceAccessPolicies [permissions-management] => domain*
cloudsearch:document [write] => domain
cloudsearch:search [read] => domain
cloudsearch:suggest [read] => domain
cloudshell:CreateEnvironment [write] => *
cloudshell:CreateSession [write] => Environment*
cloudshell:DeleteEnvironment [write] => Environment*
cloudshell:GetEnvironmentStatus [read] => Environment*
cloudshell:GetFileDownloadUrls [write] => Environment*
cloudshell:GetFileUploadUrls [write] => Environment*
cloudshell:PutCredentials [write] => Environment*
cloudshell:StartEnvironment [write] => Environment*
cloudshell:StopEnvironment [write] => Environment*
cloudtrail:AddTags [tagging] => *,eventdatastore,trail
cloudtrail:CancelQuery [write] => *
cloudtrail:CreateEventDataStore [write] => *,eventdatastore*
cloudtrail:CreateServiceLinkedChannel [write] => channel*
cloudtrail:CreateTrail [write] => *,trail*
cloudtrail:DeleteEventDataStore [write] => eventdatastore*
cloudtrail:DeleteServiceLinkedChannel [write] => channel*
cloudtrail:DeleteTrail [write] => trail*
cloudtrail:DescribeQuery [read] => *
cloudtrail:DescribeTrails [read] => *
cloudtrail:GetEventDataStore [read] => *
cloudtrail:GetEventSelectors [read] => trail*
cloudtrail:GetInsightSelectors [read] => trail*
cloudtrail:GetQueryResults [read] => *
cloudtrail:GetServiceLinkedChannel [read] => channel*
cloudtrail:GetTrail [read] => *
cloudtrail:GetTrailStatus [read] => trail*
cloudtrail:ListEventDataStores [list] => *
cloudtrail:ListPublicKeys [read] => *
cloudtrail:ListQueries [list] => *
cloudtrail:ListServiceLinkedChannels [list] => *
cloudtrail:ListTags [read] => eventdatastore,trail
cloudtrail:ListTrails [list] => *
cloudtrail:LookupEvents [read] => *
cloudtrail:PutEventSelectors [write] => trail*
cloudtrail:PutInsightSelectors [write] => trail*
cloudtrail:RemoveTags [tagging] => *,eventdatastore,trail
cloudtrail:RestoreEventDataStore [write] => eventdatastore*
cloudtrail:StartLogging [write] => trail*
cloudtrail:StartQuery [write] => *
cloudtrail:StopLogging [write] => trail*
cloudtrail:UpdateEventDataStore [write] => eventdatastore*
cloudtrail:UpdateServiceLinkedChannel [write] => channel*
cloudtrail:UpdateTrail [write] => trail*
cloudwatch:DeleteAlarms [write] => alarm*
cloudwatch:DeleteAnomalyDetector [write] => *
cloudwatch:DeleteDashboards [write] => dashboard*
cloudwatch:DeleteInsightRules [write] => insight-rule*
cloudwatch:DeleteMetricStream [write] => metric-stream*
cloudwatch:DescribeAlarmHistory [read] => alarm*
cloudwatch:DescribeAlarms [read] => alarm*
cloudwatch:DescribeAlarmsForMetric [read] => *
cloudwatch:DescribeAnomalyDetectors [read] => *
cloudwatch:DescribeInsightRules [read] => *
cloudwatch:DisableAlarmActions [write] => alarm*
cloudwatch:DisableInsightRules [write] => insight-rule*
cloudwatch:EnableAlarmActions [write] => alarm*
cloudwatch:EnableInsightRules [write] => insight-rule*
cloudwatch:GetDashboard [read] => dashboard*
cloudwatch:GetInsightRuleReport [read] => insight-rule*
cloudwatch:GetMetricData [read] => *
cloudwatch:GetMetricStatistics [read] => *
cloudwatch:GetMetricStream [read] => metric-stream*
cloudwatch:GetMetricWidgetImage [read] => *
cloudwatch:ListDashboards [list] => *
cloudwatch:ListManagedInsightRules [read] => *
cloudwatch:ListMetricStreams [list] => *
cloudwatch:ListMetrics [list] => *
cloudwatch:ListTagsForResource [list] => alarm,insight-rule
cloudwatch:PutAnomalyDetector [write] => *
cloudwatch:PutCompositeAlarm [write] => *,alarm*
cloudwatch:PutDashboard [write] => dashboard*
cloudwatch:PutInsightRule [write] => *,insight-rule*
cloudwatch:PutManagedInsightRules [write] => *
cloudwatch:PutMetricAlarm [write] => *,alarm*
cloudwatch:PutMetricData [write] => *
cloudwatch:PutMetricStream [write] => *,metric-stream*
cloudwatch:SetAlarmState [write] => alarm*
cloudwatch:StartMetricStreams [write] => metric-stream*
cloudwatch:StopMetricStreams [write] => metric-stream*
cloudwatch:TagResource [tagging] => *,alarm,insight-rule
cloudwatch:UntagResource [tagging] => *,alarm,insight-rule
codeartifact:AssociateExternalConnection [write] => repository*
codeartifact:AssociateWithDownstreamRepository [write] => repository*
codeartifact:CopyPackageVersions [write] => package*,repository*
codeartifact:CreateDomain [write] => *
codeartifact:CreateRepository [write] => *
codeartifact:DeleteDomain [write] => domain*
codeartifact:DeleteDomainPermissionsPolicy [permissions-management] => domain*
codeartifact:DeletePackageVersions [write] => package*
codeartifact:DeleteRepository [write] => repository*
codeartifact:DeleteRepositoryPermissionsPolicy [permissions-management] => repository*
codeartifact:DescribeDomain [read] => domain*
codeartifact:DescribePackage [read] => package*
codeartifact:DescribePackageVersion [read] => package*
codeartifact:DescribeRepository [read] => repository*
codeartifact:DisassociateExternalConnection [write] => repository*
codeartifact:DisposePackageVersions [write] => package*
codeartifact:GetAuthorizationToken [read] => domain*
codeartifact:GetDomainPermissionsPolicy [read] => domain*
codeartifact:GetPackageVersionAsset [read] => package*
codeartifact:GetPackageVersionReadme [read] => package*
codeartifact:GetRepositoryEndpoint [read] => repository*
codeartifact:GetRepositoryPermissionsPolicy [read] => repository*
codeartifact:ListDomains [list] => *
codeartifact:ListPackageVersionAssets [list] => package*
codeartifact:ListPackageVersionDependencies [list] => package*
codeartifact:ListPackageVersions [list] => package*
codeartifact:ListPackages [list] => repository*
codeartifact:ListRepositories [list] => *
codeartifact:ListRepositoriesInDomain [list] => domain*
codeartifact:ListTagsForResource [list] => domain,repository
codeartifact:PublishPackageVersion [write] => package*
codeartifact:PutDomainPermissionsPolicy [write] => domain*
codeartifact:PutPackageMetadata [write] => package*
codeartifact:PutPackageOriginConfiguration [write] => package*
codeartifact:PutRepositoryPermissionsPolicy [write] => repository*
codeartifact:ReadFromRepository [read] => repository*
codeartifact:TagResource [tagging] => *,domain,repository
codeartifact:UntagResource [tagging] => *,domain,repository
codeartifact:UpdatePackageVersionsStatus [write] => package*
codeartifact:UpdateRepository [write] => repository*
codebuild:BatchDeleteBuilds [write] => project*
codebuild:BatchGetBuildBatches [read] => project*
codebuild:BatchGetBuilds [read] => project*
codebuild:BatchGetProjects [read] => project*
codebuild:BatchGetReportGroups [read] => report-group*
codebuild:BatchGetReports [read] => report-group*
codebuild:BatchPutCodeCoverages [write] => report-group*
codebuild:BatchPutTestCases [write] => report-group*
codebuild:CreateProject [write] => *,project*
codebuild:CreateReport [write] => report-group*
codebuild:CreateReportGroup [write] => *,report-group*
codebuild:CreateWebhook [write] => project*
codebuild:DeleteBuildBatch [write] => project*
codebuild:DeleteOAuthToken [write] => *
codebuild:DeleteProject [write] => project*
codebuild:DeleteReport [write] => report-group*
codebuild:DeleteReportGroup [write] => report-group*
codebuild:DeleteResourcePolicy [permissions-management] => project,report-group
codebuild:DeleteSourceCredentials [write] => *
codebuild:DeleteWebhook [write] => project*
codebuild:DescribeCodeCoverages [read] => report-group*
codebuild:DescribeTestCases [read] => report-group*
codebuild:GetReportGroupTrend [read] => report-group*
codebuild:GetResourcePolicy [read] => project,report-group
codebuild:ImportSourceCredentials [write] => *
codebuild:InvalidateProjectCache [write] => project*
codebuild:ListBuildBatches [list] => *
codebuild:ListBuildBatchesForProject [list] => project*
codebuild:ListBuilds [list] => *
codebuild:ListBuildsForProject [list] => project*
codebuild:ListConnectedOAuthAccounts [list] => *
codebuild:ListCuratedEnvironmentImages [list] => *
codebuild:ListProjects [list] => *
codebuild:ListReportGroups [list] => *
codebuild:ListReports [list] => *
codebuild:ListReportsForReportGroup [list] => report-group*
codebuild:ListRepositories [list] => *
codebuild:ListSharedProjects [list] => *
codebuild:ListSharedReportGroups [list] => *
codebuild:ListSourceCredentials [list] => *
codebuild:PersistOAuthToken [write] => *
codebuild:PutResourcePolicy [permissions-management] => project,report-group
codebuild:RetryBuild [write] => project*
codebuild:RetryBuildBatch [write] => project*
codebuild:StartBuild [write] => project*
codebuild:StartBuildBatch [write] => project*
codebuild:StopBuild [write] => project*
codebuild:StopBuildBatch [write] => project*
codebuild:UpdateProject [write] => *,project*
codebuild:UpdateProjectVisibility [write] => *,project*
codebuild:UpdateReport [write] => report-group*
codebuild:UpdateReportGroup [write] => *,report-group*
codebuild:UpdateWebhook [write] => project*
codecommit:AssociateApprovalRuleTemplateWithRepository [write] => repository*
codecommit:BatchAssociateApprovalRuleTemplateWithRepositories [write] => repository*
codecommit:BatchDescribeMergeConflicts [read] => repository*
codecommit:BatchDisassociateApprovalRuleTemplateFromRepositories [write] => repository*
codecommit:BatchGetCommits [read] => repository*
codecommit:BatchGetPullRequests [read] => repository*
codecommit:BatchGetRepositories [read] => repository*
codecommit:CancelUploadArchive [read] => repository*
codecommit:CreateApprovalRuleTemplate [write] => *
codecommit:CreateBranch [write] => *,repository*
codecommit:CreateCommit [write] => *,repository*
codecommit:CreatePullRequest [write] => repository*
codecommit:CreatePullRequestApprovalRule [write] => repository*
codecommit:CreateRepository [write] => *,repository*
codecommit:CreateUnreferencedMergeCommit [write] => *,repository*
codecommit:DeleteApprovalRuleTemplate [write] => *
codecommit:DeleteBranch [write] => *,repository*
codecommit:DeleteCommentContent [write] => repository*
codecommit:DeleteFile [write] => *,repository*
codecommit:DeletePullRequestApprovalRule [write] => repository*
codecommit:DeleteRepository [write] => repository*
codecommit:DescribeMergeConflicts [read] => repository*
codecommit:DescribePullRequestEvents [read] => repository*
codecommit:DisassociateApprovalRuleTemplateFromRepository [write] => repository*
codecommit:EvaluatePullRequestApprovalRules [read] => repository*
codecommit:GetApprovalRuleTemplate [read] => *
codecommit:GetBlob [read] => repository*
codecommit:GetBranch [read] => repository*
codecommit:GetComment [read] => repository*
codecommit:GetCommentReactions [read] => repository*
codecommit:GetCommentsForComparedCommit [read] => repository*
codecommit:GetCommentsForPullRequest [read] => repository*
codecommit:GetCommit [read] => repository*
codecommit:GetCommitHistory [read] => repository*
codecommit:GetCommitsFromMergeBase [read] => repository*
codecommit:GetDifferences [read] => repository*
codecommit:GetFile [read] => repository*
codecommit:GetFolder [read] => repository*
codecommit:GetMergeCommit [read] => *,repository*
codecommit:GetMergeConflicts [read] => repository*
codecommit:GetMergeOptions [read] => repository*
codecommit:GetObjectIdentifier [read] => repository*
codecommit:GetPullRequest [read] => repository*
codecommit:GetPullRequestApprovalStates [read] => repository*
codecommit:GetPullRequestOverrideState [read] => repository*
codecommit:GetReferences [read] => repository*
codecommit:GetRepository [read] => repository*
codecommit:GetRepositoryTriggers [read] => repository*
codecommit:GetTree [read] => repository*
codecommit:GetUploadArchiveStatus [read] => repository*
codecommit:GitPull [read] => repository*
codecommit:GitPush [write] => *,repository*
codecommit:ListApprovalRuleTemplates [list] => *
codecommit:ListAssociatedApprovalRuleTemplatesForRepository [list] => repository*
codecommit:ListBranches [list] => repository*
codecommit:ListPullRequests [list] => repository*
codecommit:ListRepositories [list] => *
codecommit:ListRepositoriesForApprovalRuleTemplate [list] => *
codecommit:ListTagsForResource [list] => repository
codecommit:MergeBranchesByFastForward [write] => *,repository*
codecommit:MergeBranchesBySquash [write] => *,repository*
codecommit:MergeBranchesByThreeWay [write] => *,repository*
codecommit:MergePullRequestByFastForward [write] => *,repository*
codecommit:MergePullRequestBySquash [write] => *,repository*
codecommit:MergePullRequestByThreeWay [write] => *,repository*
codecommit:OverridePullRequestApprovalRules [write] => repository*
codecommit:PostCommentForComparedCommit [write] => repository*
codecommit:PostCommentForPullRequest [write] => repository*
codecommit:PostCommentReply [write] => repository*
codecommit:PutCommentReaction [write] => repository*
codecommit:PutFile [write] => *,repository*
codecommit:PutRepositoryTriggers [write] => repository*
codecommit:TagResource [tagging] => *,repository
codecommit:TestRepositoryTriggers [write] => repository*
codecommit:UntagResource [tagging] => *,repository
codecommit:UpdateApprovalRuleTemplateContent [write] => *
codecommit:UpdateApprovalRuleTemplateDescription [write] => *
codecommit:UpdateApprovalRuleTemplateName [write] => *
codecommit:UpdateComment [write] => repository*
codecommit:UpdateDefaultBranch [write] => repository*
codecommit:UpdatePullRequestApprovalRuleContent [write] => repository*
codecommit:UpdatePullRequestApprovalState [write] => repository*
codecommit:UpdatePullRequestDescription [write] => repository*
codecommit:UpdatePullRequestStatus [write] => repository*
codecommit:UpdatePullRequestTitle [write] => repository*
codecommit:UpdateRepositoryDescription [write] => repository*
codecommit:UpdateRepositoryName [write] => repository*
codecommit:UploadArchive [write] => repository*
codedeploy:AddTagsToOnPremisesInstances [tagging] => instance*
codedeploy:BatchGetApplicationRevisions [read] => application*
codedeploy:BatchGetApplications [read] => application*
codedeploy:BatchGetDeploymentGroups [read] => deploymentgroup*
codedeploy:BatchGetDeploymentInstances [read] => deploymentgroup*
codedeploy:BatchGetDeploymentTargets [read] => *
codedeploy:BatchGetDeployments [read] => deploymentgroup*
codedeploy:BatchGetOnPremisesInstances [read] => instance*
codedeploy:ContinueDeployment [write] => *
codedeploy:CreateApplication [write] => *,application*
codedeploy:CreateCloudFormationDeployment [write] => *
codedeploy:CreateDeployment [write] => deploymentgroup*
codedeploy:CreateDeploymentConfig [write] => deploymentconfig*
codedeploy:CreateDeploymentGroup [write] => *,deploymentgroup*
codedeploy:DeleteApplication [write] => application*
codedeploy:DeleteDeploymentConfig [write] => deploymentconfig*
codedeploy:DeleteDeploymentGroup [write] => deploymentgroup*
codedeploy:DeleteGitHubAccountToken [write] => *
codedeploy:DeleteResourcesByExternalId [write] => *
codedeploy:DeregisterOnPremisesInstance [write] => instance*
codedeploy:GetApplication [list] => application*
codedeploy:GetApplicationRevision [list] => application*
codedeploy:GetDeployment [list] => deploymentgroup*
codedeploy:GetDeploymentConfig [list] => deploymentconfig*
codedeploy:GetDeploymentGroup [list] => deploymentgroup*
codedeploy:GetDeploymentInstance [list] => deploymentgroup*
codedeploy:GetDeploymentTarget [read] => *
codedeploy:GetOnPremisesInstance [list] => instance*
codedeploy:ListApplicationRevisions [list] => application*
codedeploy:ListApplications [list] => *
codedeploy:ListDeploymentConfigs [list] => *
codedeploy:ListDeploymentGroups [list] => application*
codedeploy:ListDeploymentInstances [list] => deploymentgroup*
codedeploy:ListDeploymentTargets [list] => *
codedeploy:ListDeployments [list] => deploymentgroup*
codedeploy:ListGitHubAccountTokenNames [list] => *
codedeploy:ListOnPremisesInstances [list] => *
codedeploy:ListTagsForResource [list] => application,deploymentgroup
codedeploy:PutLifecycleEventHookExecutionStatus [write] => *
codedeploy:RegisterApplicationRevision [write] => application*
codedeploy:RegisterOnPremisesInstance [write] => instance*
codedeploy:RemoveTagsFromOnPremisesInstances [tagging] => instance*
codedeploy:SkipWaitTimeForInstanceTermination [write] => *
codedeploy:StopDeployment [write] => *
codedeploy:TagResource [tagging] => *,application,deploymentgroup
codedeploy:UntagResource [tagging] => *,application,deploymentgroup
codedeploy:UpdateApplication [write] => application*
codedeploy:UpdateDeploymentGroup [write] => deploymentgroup*
codedeploy-commands-secure:GetDeploymentSpecification [read] => *
codedeploy-commands-secure:PollHostCommand [read] => *
codedeploy-commands-secure:PutHostCommandAcknowledgement [write] => *
codedeploy-commands-secure:PutHostCommandComplete [write] => *
codeguru:GetCodeGuruFreeTrialSummary [read] => *
codeguru-profiler:AddNotificationChannels [write] => ProfilingGroup*
codeguru-profiler:BatchGetFrameMetricData [list] => ProfilingGroup*
codeguru-profiler:ConfigureAgent [write] => ProfilingGroup*
codeguru-profiler:CreateProfilingGroup [write] => *
codeguru-profiler:DeleteProfilingGroup [write] => ProfilingGroup*
codeguru-profiler:DescribeProfilingGroup [read] => ProfilingGroup*
codeguru-profiler:GetFindingsReportAccountSummary [read] => *
codeguru-profiler:GetNotificationConfiguration [read] => ProfilingGroup*
codeguru-profiler:GetPolicy [read] => ProfilingGroup*
codeguru-profiler:GetProfile [read] => ProfilingGroup*
codeguru-profiler:GetRecommendations [read] => ProfilingGroup*
codeguru-profiler:ListFindingsReports [list] => ProfilingGroup*
codeguru-profiler:ListProfileTimes [list] => ProfilingGroup*
codeguru-profiler:ListProfilingGroups [list] => *
codeguru-profiler:ListTagsForResource [list] => ProfilingGroup*
codeguru-profiler:PostAgentProfile [write] => ProfilingGroup*
codeguru-profiler:PutPermission [permissions-management] => ProfilingGroup*
codeguru-profiler:RemoveNotificationChannel [write] => ProfilingGroup*
codeguru-profiler:RemovePermission [permissions-management] => ProfilingGroup*
codeguru-profiler:SubmitFeedback [write] => ProfilingGroup*
codeguru-profiler:TagResource [tagging] => *,ProfilingGroup*
codeguru-profiler:UntagResource [tagging] => *,ProfilingGroup*
codeguru-profiler:UpdateProfilingGroup [write] => ProfilingGroup*
codeguru-reviewer:AssociateRepository [write] => *,association*,connection,repository
codeguru-reviewer:CreateCodeReview [write] => *,association*
codeguru-reviewer:CreateConnectionToken [read] => *
codeguru-reviewer:DescribeCodeReview [read] => *,association*
codeguru-reviewer:DescribeRecommendationFeedback [read] => *,association*
codeguru-reviewer:DescribeRepositoryAssociation [read] => *,association*
codeguru-reviewer:DisassociateRepository [write] => *,association*
codeguru-reviewer:GetMetricsData [read] => *
codeguru-reviewer:ListCodeReviews [list] => *
codeguru-reviewer:ListRecommendationFeedback [list] => *,association*
codeguru-reviewer:ListRecommendations [list] => *,association*
codeguru-reviewer:ListRepositoryAssociations [list] => *
codeguru-reviewer:ListTagsForResource [list] => *,association*
codeguru-reviewer:ListThirdPartyRepositories [read] => *
codeguru-reviewer:PutRecommendationFeedback [write] => *,association*
codeguru-reviewer:TagResource [tagging] => *,association*
codeguru-reviewer:UnTagResource [tagging] => *,association*
codepipeline:AcknowledgeJob [write] => *
codepipeline:AcknowledgeThirdPartyJob [write] => *
codepipeline:CreateCustomActionType [write] => *,actiontype*
codepipeline:CreatePipeline [write] => *,pipeline*
codepipeline:DeleteCustomActionType [write] => actiontype*
codepipeline:DeletePipeline [write] => pipeline*
codepipeline:DeleteWebhook [write] => webhook*
codepipeline:DeregisterWebhookWithThirdParty [write] => webhook*
codepipeline:DisableStageTransition [write] => stage*
codepipeline:EnableStageTransition [write] => stage*
codepipeline:GetActionType [read] => *
codepipeline:GetJobDetails [read] => *
codepipeline:GetPipeline [read] => pipeline*
codepipeline:GetPipelineExecution [read] => pipeline*
codepipeline:GetPipelineState [read] => pipeline*
codepipeline:GetThirdPartyJobDetails [read] => *
codepipeline:ListActionExecutions [read] => pipeline*
codepipeline:ListActionTypes [read] => *
codepipeline:ListPipelineExecutions [list] => pipeline*
codepipeline:ListPipelines [list] => *
codepipeline:ListTagsForResource [read] => actiontype,pipeline,webhook
codepipeline:ListWebhooks [list] => webhook*
codepipeline:PollForJobs [write] => actiontype*
codepipeline:PollForThirdPartyJobs [write] => *
codepipeline:PutActionRevision [write] => action*
codepipeline:PutApprovalResult [write] => action*
codepipeline:PutJobFailureResult [write] => *
codepipeline:PutJobSuccessResult [write] => *
codepipeline:PutThirdPartyJobFailureResult [write] => *
codepipeline:PutThirdPartyJobSuccessResult [write] => *
codepipeline:PutWebhook [write] => *,pipeline*,webhook*
codepipeline:RegisterWebhookWithThirdParty [write] => webhook*
codepipeline:RetryStageExecution [write] => stage*
codepipeline:StartPipelineExecution [write] => pipeline*
codepipeline:StopPipelineExecution [write] => pipeline*
codepipeline:TagResource [tagging] => *,actiontype,pipeline,webhook
codepipeline:UntagResource [tagging] => *,actiontype,pipeline,webhook
codepipeline:UpdateActionType [write] => actiontype*
codepipeline:UpdatePipeline [write] => pipeline*
codestar:AssociateTeamMember [permissions-management] => project*
codestar:CreateProject [permissions-management] => *
codestar:CreateUserProfile [write] => user*
codestar:DeleteExtendedAccess [write] => project*
codestar:DeleteProject [permissions-management] => project*
codestar:DeleteUserProfile [write] => user*
codestar:DescribeProject [read] => project*
codestar:DescribeUserProfile [read] => *
codestar:DisassociateTeamMember [permissions-management] => project*
codestar:GetExtendedAccess [read] => project*
codestar:ListProjects [list] => *
codestar:ListResources [list] => project*
codestar:ListTagsForProject [list] => project*
codestar:ListTeamMembers [list] => project*
codestar:ListUserProfiles [list] => *
codestar:PutExtendedAccess [write] => project*
codestar:TagProject [tagging] => *,project*
codestar:UntagProject [tagging] => *,project*
codestar:UpdateProject [write] => project*
codestar:UpdateTeamMember [permissions-management] => project*
codestar:UpdateUserProfile [write] => user*
codestar:VerifyServiceRole [list] => *
codestar-connections:CreateConnection [write] => *
codestar-connections:CreateHost [write] => *
codestar-connections:DeleteConnection [write] => Connection*
codestar-connections:DeleteHost [write] => Host*
codestar-connections:GetConnection [read] => Connection*
codestar-connections:GetHost [read] => Host*
codestar-connections:GetIndividualAccessToken [read] => *
codestar-connections:GetInstallationUrl [read] => *
codestar-connections:ListConnections [list] => *
codestar-connections:ListHosts [list] => *
codestar-connections:ListInstallationTargets [list] => *
codestar-connections:ListTagsForResource [list] => Connection*
codestar-connections:PassConnection [read] => *,Connection*
codestar-connections:RegisterAppCode [read] => *
codestar-connections:StartAppRegistrationHandshake [read] => *
codestar-connections:StartOAuthHandshake [read] => *
codestar-connections:TagResource [tagging] => *,Connection*
codestar-connections:UntagResource [tagging] => *,Connection*
codestar-connections:UpdateConnectionInstallation [write] => *,Connection*
codestar-connections:UpdateHost [write] => Host*
codestar-connections:UseConnection [read] => *,Connection*
codestar-notifications:CreateNotificationRule [write] => *,notificationrule*
codestar-notifications:DeleteNotificationRule [write] => *,notificationrule*
codestar-notifications:DeleteTarget [write] => *
codestar-notifications:DescribeNotificationRule [read] => *,notificationrule*
codestar-notifications:ListEventTypes [list] => *
codestar-notifications:ListNotificationRules [list] => *
codestar-notifications:ListTagsForResource [list] => *,notificationrule*
codestar-notifications:ListTargets [list] => *
codestar-notifications:Subscribe [write] => *,notificationrule*
codestar-notifications:TagResource [tagging] => *,notificationrule*
codestar-notifications:Unsubscribe [write] => *,notificationrule*
codestar-notifications:UntagResource [tagging] => *,notificationrule*
codestar-notifications:UpdateNotificationRule [write] => *,notificationrule*
cognito-identity:CreateIdentityPool [write] => *
cognito-identity:DeleteIdentities [write] => *
cognito-identity:DeleteIdentityPool [write] => identitypool*
cognito-identity:DescribeIdentity [read] => *
cognito-identity:DescribeIdentityPool [read] => identitypool*
cognito-identity:GetCredentialsForIdentity [read] => *
cognito-identity:GetId [write] => *
cognito-identity:GetIdentityPoolRoles [read] => identitypool*
cognito-identity:GetOpenIdToken [read] => *
cognito-identity:GetOpenIdTokenForDeveloperIdentity [read] => identitypool*
cognito-identity:GetPrincipalTagAttributeMap [read] => identitypool*
cognito-identity:ListIdentities [list] => identitypool*
cognito-identity:ListIdentityPools [list] => *
cognito-identity:ListTagsForResource [read] => identitypool
cognito-identity:LookupDeveloperIdentity [read] => identitypool*
cognito-identity:MergeDeveloperIdentities [write] => identitypool*
cognito-identity:SetIdentityPoolRoles [write] => *
cognito-identity:SetPrincipalTagAttributeMap [write] => *
cognito-identity:TagResource [tagging] => *,identitypool
cognito-identity:UnlinkDeveloperIdentity [write] => identitypool*
cognito-identity:UnlinkIdentity [write] => *
cognito-identity:UntagResource [tagging] => *,identitypool
cognito-identity:UpdateIdentityPool [write] => identitypool*
cognito-idp:AddCustomAttributes [write] => userpool*
cognito-idp:AdminAddUserToGroup [write] => userpool*
cognito-idp:AdminConfirmSignUp [write] => userpool*
cognito-idp:AdminCreateUser [write] => userpool*
cognito-idp:AdminDeleteUser [write] => userpool*
cognito-idp:AdminDeleteUserAttributes [write] => userpool*
cognito-idp:AdminDisableProviderForUser [write] => userpool*
cognito-idp:AdminDisableUser [write] => userpool*
cognito-idp:AdminEnableUser [write] => userpool*
cognito-idp:AdminForgetDevice [write] => userpool*
cognito-idp:AdminGetDevice [read] => userpool*
cognito-idp:AdminGetUser [read] => userpool*
cognito-idp:AdminInitiateAuth [write] => userpool*
cognito-idp:AdminLinkProviderForUser [write] => userpool*
cognito-idp:AdminListDevices [list] => userpool*
cognito-idp:AdminListGroupsForUser [list] => userpool*
cognito-idp:AdminListUserAuthEvents [read] => userpool*
cognito-idp:AdminRemoveUserFromGroup [write] => userpool*
cognito-idp:AdminResetUserPassword [write] => userpool*
cognito-idp:AdminRespondToAuthChallenge [write] => userpool*
cognito-idp:AdminSetUserMFAPreference [write] => userpool*
cognito-idp:AdminSetUserPassword [write] => userpool*
cognito-idp:AdminSetUserSettings [write] => userpool*
cognito-idp:AdminUpdateAuthEventFeedback [write] => userpool*
cognito-idp:AdminUpdateDeviceStatus [write] => userpool*
cognito-idp:AdminUpdateUserAttributes [write] => userpool*
cognito-idp:AdminUserGlobalSignOut [write] => userpool*
cognito-idp:AssociateSoftwareToken [write] => *
cognito-idp:AssociateWebACL [write] => userpool*,webacl*
cognito-idp:ChangePassword [write] => *
cognito-idp:ConfirmDevice [write] => *
cognito-idp:ConfirmForgotPassword [write] => *
cognito-idp:ConfirmSignUp [write] => *
cognito-idp:CreateGroup [write] => userpool*
cognito-idp:CreateIdentityProvider [write] => userpool*
cognito-idp:CreateResourceServer [write] => userpool*
cognito-idp:CreateUserImportJob [write] => userpool*
cognito-idp:CreateUserPool [write] => *
cognito-idp:CreateUserPoolClient [write] => userpool*
cognito-idp:CreateUserPoolDomain [write] => userpool*
cognito-idp:DeleteGroup [write] => userpool*
cognito-idp:DeleteIdentityProvider [write] => userpool*
cognito-idp:DeleteResourceServer [write] => userpool*
cognito-idp:DeleteUser [write] => *
cognito-idp:DeleteUserAttributes [write] => *
cognito-idp:DeleteUserPool [write] => userpool*
cognito-idp:DeleteUserPoolClient [write] => userpool*
cognito-idp:DeleteUserPoolDomain [write] => userpool*
cognito-idp:DescribeIdentityProvider [read] => userpool*
cognito-idp:DescribeResourceServer [read] => userpool*
cognito-idp:DescribeRiskConfiguration [read] => userpool*
cognito-idp:DescribeUserImportJob [read] => userpool*
cognito-idp:DescribeUserPool [read] => userpool*
cognito-idp:DescribeUserPoolClient [read] => userpool*
cognito-idp:DescribeUserPoolDomain [read] => *
cognito-idp:DisassociateWebACL [write] => userpool*
cognito-idp:ForgetDevice [write] => *
cognito-idp:ForgotPassword [write] => *
cognito-idp:GetCSVHeader [read] => userpool*
cognito-idp:GetDevice [read] => *
cognito-idp:GetGroup [read] => userpool*
cognito-idp:GetIdentityProviderByIdentifier [read] => userpool*
cognito-idp:GetSigningCertificate [read] => userpool*
cognito-idp:GetUICustomization [read] => userpool*
cognito-idp:GetUser [read] => *
cognito-idp:GetUserAttributeVerificationCode [read] => *
cognito-idp:GetUserPoolMfaConfig [read] => userpool*
cognito-idp:GetWebACLForResource [read] => userpool*
cognito-idp:GlobalSignOut [write] => *
cognito-idp:InitiateAuth [write] => *
cognito-idp:ListDevices [list] => *
cognito-idp:ListGroups [list] => userpool*
cognito-idp:ListIdentityProviders [list] => userpool*
cognito-idp:ListResourceServers [list] => userpool*
cognito-idp:ListResourcesForWebACL [list] => webacl*
cognito-idp:ListTagsForResource [list] => userpool
cognito-idp:ListUserImportJobs [list] => userpool*
cognito-idp:ListUserPoolClients [list] => userpool*
cognito-idp:ListUserPools [list] => *
cognito-idp:ListUsers [list] => userpool*
cognito-idp:ListUsersInGroup [list] => userpool*
cognito-idp:ResendConfirmationCode [write] => *
cognito-idp:RespondToAuthChallenge [write] => *
cognito-idp:RevokeToken [write] => *
cognito-idp:SetRiskConfiguration [write] => userpool*
cognito-idp:SetUICustomization [write] => userpool*
cognito-idp:SetUserMFAPreference [write] => *
cognito-idp:SetUserPoolMfaConfig [write] => userpool*
cognito-idp:SetUserSettings [write] => *
cognito-idp:SignUp [write] => *
cognito-idp:StartUserImportJob [write] => userpool*
cognito-idp:StopUserImportJob [write] => userpool*
cognito-idp:TagResource [tagging] => *,userpool
cognito-idp:UntagResource [tagging] => *,userpool
cognito-idp:UpdateAuthEventFeedback [write] => userpool*
cognito-idp:UpdateDeviceStatus [write] => *
cognito-idp:UpdateGroup [write] => userpool*
cognito-idp:UpdateIdentityProvider [write] => userpool*
cognito-idp:UpdateResourceServer [write] => userpool*
cognito-idp:UpdateUserAttributes [write] => *
cognito-idp:UpdateUserPool [write] => *,userpool*
cognito-idp:UpdateUserPoolClient [write] => userpool*
cognito-idp:UpdateUserPoolDomain [write] => userpool*
cognito-idp:VerifySoftwareToken [write] => *
cognito-idp:VerifyUserAttribute [write] => *
cognito-sync:BulkPublish [write] => identitypool*
cognito-sync:DeleteDataset [write] => dataset*
cognito-sync:DescribeDataset [read] => dataset*
cognito-sync:DescribeIdentityPoolUsage [read] => identitypool*
cognito-sync:DescribeIdentityUsage [read] => identity*
cognito-sync:GetBulkPublishDetails [read] => identitypool*
cognito-sync:GetCognitoEvents [read] => identitypool*
cognito-sync:GetIdentityPoolConfiguration [read] => identitypool*
cognito-sync:ListDatasets [list] => dataset*
cognito-sync:ListIdentityPoolUsage [read] => identitypool*
cognito-sync:ListRecords [read] => dataset*
cognito-sync:QueryRecords [read] => *
cognito-sync:RegisterDevice [write] => identity*
cognito-sync:SetCognitoEvents [write] => identitypool*
cognito-sync:SetDatasetConfiguration [write] => dataset*
cognito-sync:SetIdentityPoolConfiguration [write] => identitypool*
cognito-sync:SubscribeToDataset [write] => dataset*
cognito-sync:UnsubscribeFromDataset [write] => dataset*
cognito-sync:UpdateRecords [write] => dataset*
comprehend:BatchDetectDominantLanguage [read] => *
comprehend:BatchDetectEntities [read] => *
comprehend:BatchDetectKeyPhrases [read] => *
comprehend:BatchDetectSentiment [read] => *
comprehend:BatchDetectSyntax [read] => *
comprehend:BatchDetectTargetedSentiment [read] => *
comprehend:ClassifyDocument [read] => document-classifier-endpoint*
comprehend:ContainsPiiEntities [read] => *
comprehend:CreateDocumentClassifier [write] => *,document-classifier*
comprehend:CreateEndpoint [write] => *,document-classifier*,document-classifier-endpoint*,entity-recognizer*,entity-recognizer-endpoint*
comprehend:CreateEntityRecognizer [write] => *,entity-recognizer*
comprehend:DeleteDocumentClassifier [write] => document-classifier*
comprehend:DeleteEndpoint [write] => document-classifier-endpoint*,entity-recognizer-endpoint*
comprehend:DeleteEntityRecognizer [write] => entity-recognizer*
comprehend:DeleteResourcePolicy [write] => document-classifier*,entity-recognizer*
comprehend:DescribeDocumentClassificationJob [read] => document-classification-job*
comprehend:DescribeDocumentClassifier [read] => document-classifier*
comprehend:DescribeDominantLanguageDetectionJob [read] => dominant-language-detection-job*
comprehend:DescribeEndpoint [read] => document-classifier-endpoint*,entity-recognizer-endpoint*
comprehend:DescribeEntitiesDetectionJob [read] => entities-detection-job*
comprehend:DescribeEntityRecognizer [read] => entity-recognizer*
comprehend:DescribeEventsDetectionJob [read] => events-detection-job*
comprehend:DescribeKeyPhrasesDetectionJob [read] => key-phrases-detection-job*
comprehend:DescribePiiEntitiesDetectionJob [read] => pii-entities-detection-job*
comprehend:DescribeResourcePolicy [read] => document-classifier*,entity-recognizer*
comprehend:DescribeSentimentDetectionJob [read] => sentiment-detection-job*
comprehend:DescribeTargetedSentimentDetectionJob [read] => targeted-sentiment-detection-job*
comprehend:DescribeTopicsDetectionJob [read] => topics-detection-job*
comprehend:DetectDominantLanguage [read] => *
comprehend:DetectEntities [read] => entity-recognizer-endpoint
comprehend:DetectKeyPhrases [read] => *
comprehend:DetectPiiEntities [read] => *
comprehend:DetectSentiment [read] => *
comprehend:DetectSyntax [read] => *
comprehend:DetectTargetedSentiment [read] => *
comprehend:ImportModel [write] => *,document-classifier*,entity-recognizer*
comprehend:ListDocumentClassificationJobs [read] => *
comprehend:ListDocumentClassifierSummaries [read] => *
comprehend:ListDocumentClassifiers [read] => *
comprehend:ListDominantLanguageDetectionJobs [read] => *
comprehend:ListEndpoints [read] => *
comprehend:ListEntitiesDetectionJobs [read] => *
comprehend:ListEntityRecognizerSummaries [read] => *
comprehend:ListEntityRecognizers [read] => *
comprehend:ListEventsDetectionJobs [read] => *
comprehend:ListKeyPhrasesDetectionJobs [read] => *
comprehend:ListPiiEntitiesDetectionJobs [read] => *
comprehend:ListSentimentDetectionJobs [read] => *
comprehend:ListTagsForResource [read] => document-classification-job,document-classifier,document-classifier-endpoint,dominant-language-detection-job,entities-detection-job,entity-recognizer,entity-recognizer-endpoint,events-detection-job,key-phrases-detection-job,pii-entities-detection-job,sentiment-detection-job,targeted-sentiment-detection-job,topics-detection-job
comprehend:ListTargetedSentimentDetectionJobs [read] => *
comprehend:ListTopicsDetectionJobs [read] => *
comprehend:PutResourcePolicy [write] => document-classifier*,entity-recognizer*
comprehend:StartDocumentClassificationJob [write] => *,document-classification-job*,document-classifier*
comprehend:StartDominantLanguageDetectionJob [write] => *,dominant-language-detection-job*
comprehend:StartEntitiesDetectionJob [write] => *,entities-detection-job*,entity-recognizer
comprehend:StartEventsDetectionJob [write] => *,events-detection-job*
comprehend:StartKeyPhrasesDetectionJob [write] => *,key-phrases-detection-job*
comprehend:StartPiiEntitiesDetectionJob [write] => *,pii-entities-detection-job*
comprehend:StartSentimentDetectionJob [write] => *,sentiment-detection-job*
comprehend:StartTargetedSentimentDetectionJob [write] => *,targeted-sentiment-detection-job*
comprehend:StartTopicsDetectionJob [write] => *,topics-detection-job*
comprehend:StopDominantLanguageDetectionJob [write] => dominant-language-detection-job*
comprehend:StopEntitiesDetectionJob [write] => entities-detection-job*
comprehend:StopEventsDetectionJob [write] => events-detection-job*
comprehend:StopKeyPhrasesDetectionJob [write] => key-phrases-detection-job*
comprehend:StopPiiEntitiesDetectionJob [write] => pii-entities-detection-job*
comprehend:StopSentimentDetectionJob [write] => sentiment-detection-job*
comprehend:StopTargetedSentimentDetectionJob [write] => targeted-sentiment-detection-job*
comprehend:StopTrainingDocumentClassifier [write] => document-classifier*
comprehend:StopTrainingEntityRecognizer [write] => entity-recognizer*
comprehend:TagResource [tagging] => *,document-classification-job,document-classifier,document-classifier-endpoint,dominant-language-detection-job,entities-detection-job,entity-recognizer,entity-recognizer-endpoint,events-detection-job,key-phrases-detection-job,pii-entities-detection-job,sentiment-detection-job,targeted-sentiment-detection-job,topics-detection-job
comprehend:UntagResource [tagging] => *,document-classification-job,document-classifier,document-classifier-endpoint,dominant-language-detection-job,entities-detection-job,entity-recognizer,entity-recognizer-endpoint,events-detection-job,key-phrases-detection-job,pii-entities-detection-job,sentiment-detection-job,targeted-sentiment-detection-job,topics-detection-job
comprehend:UpdateEndpoint [write] => document-classifier-endpoint*,entity-recognizer-endpoint*
comprehendmedical:DescribeEntitiesDetectionV2Job [read] => *
comprehendmedical:DescribeICD10CMInferenceJob [read] => *
comprehendmedical:DescribePHIDetectionJob [read] => *
comprehendmedical:DescribeRxNormInferenceJob [read] => *
comprehendmedical:DescribeSNOMEDCTInferenceJob [read] => *
comprehendmedical:DetectEntitiesV2 [read] => *
comprehendmedical:DetectPHI [read] => *
comprehendmedical:InferICD10CM [read] => *
comprehendmedical:InferRxNorm [read] => *
comprehendmedical:InferSNOMEDCT [read] => *
comprehendmedical:ListEntitiesDetectionV2Jobs [read] => *
comprehendmedical:ListICD10CMInferenceJobs [read] => *
comprehendmedical:ListPHIDetectionJobs [read] => *
comprehendmedical:ListRxNormInferenceJobs [read] => *
comprehendmedical:ListSNOMEDCTInferenceJobs [read] => *
comprehendmedical:StartEntitiesDetectionV2Job [write] => *
comprehendmedical:StartICD10CMInferenceJob [write] => *
comprehendmedical:StartPHIDetectionJob [write] => *
comprehendmedical:StartRxNormInferenceJob [write] => *
comprehendmedical:StartSNOMEDCTInferenceJob [write] => *
comprehendmedical:StopEntitiesDetectionV2Job [write] => *
comprehendmedical:StopICD10CMInferenceJob [write] => *
comprehendmedical:StopPHIDetectionJob [write] => *
comprehendmedical:StopRxNormInferenceJob [write] => *
comprehendmedical:StopSNOMEDCTInferenceJob [write] => *
compute-optimizer:DeleteRecommendationPreferences [write] => *
compute-optimizer:DescribeRecommendationExportJobs [list] => *
compute-optimizer:ExportAutoScalingGroupRecommendations [write] => *
compute-optimizer:ExportEBSVolumeRecommendations [write] => *
compute-optimizer:ExportEC2InstanceRecommendations [write] => *
compute-optimizer:ExportLambdaFunctionRecommendations [write] => *
compute-optimizer:GetAutoScalingGroupRecommendations [list] => *
compute-optimizer:GetEBSVolumeRecommendations [list] => *
compute-optimizer:GetEC2InstanceRecommendations [list] => *
compute-optimizer:GetEC2RecommendationProjectedMetrics [list] => *
compute-optimizer:GetEffectiveRecommendationPreferences [read] => *
compute-optimizer:GetEnrollmentStatus [list] => *
compute-optimizer:GetEnrollmentStatusesForOrganization [list] => *
compute-optimizer:GetLambdaFunctionRecommendations [list] => *
compute-optimizer:GetRecommendationPreferences [read] => *
compute-optimizer:GetRecommendationSummaries [list] => *
compute-optimizer:PutRecommendationPreferences [write] => *
compute-optimizer:UpdateEnrollmentStatus [write] => *
config:BatchGetAggregateResourceConfig [read] => ConfigurationAggregator*
config:BatchGetResourceConfig [read] => *
config:DeleteAggregationAuthorization [write] => AggregationAuthorization*
config:DeleteConfigRule [write] => ConfigRule*
config:DeleteConfigurationAggregator [write] => ConfigurationAggregator*
config:DeleteConfigurationRecorder [write] => *
config:DeleteConformancePack [write] => *
config:DeleteDeliveryChannel [write] => *
config:DeleteEvaluationResults [write] => ConfigRule*
config:DeleteOrganizationConfigRule [write] => *
config:DeleteOrganizationConformancePack [write] => *
config:DeletePendingAggregationRequest [write] => *
config:DeleteRemediationConfiguration [write] => RemediationConfiguration*
config:DeleteRemediationExceptions [write] => *
config:DeleteResourceConfig [write] => *
config:DeleteRetentionConfiguration [write] => *
config:DeleteStoredQuery [write] => StoredQuery*
config:DeliverConfigSnapshot [read] => *
config:DescribeAggregateComplianceByConfigRules [read] => ConfigurationAggregator*
config:DescribeAggregateComplianceByConformancePacks [read] => ConfigurationAggregator*
config:DescribeAggregationAuthorizations [list] => *
config:DescribeComplianceByConfigRule [read] => ConfigRule*
config:DescribeComplianceByResource [read] => *
config:DescribeConfigRuleEvaluationStatus [read] => ConfigRule*
config:DescribeConfigRules [list] => ConfigRule*
config:DescribeConfigurationAggregatorSourcesStatus [read] => ConfigurationAggregator*
config:DescribeConfigurationAggregators [list] => *
config:DescribeConfigurationRecorderStatus [read] => *
config:DescribeConfigurationRecorders [list] => *
config:DescribeConformancePackCompliance [read] => *
config:DescribeConformancePackStatus [read] => *
config:DescribeConformancePacks [list] => *
config:DescribeDeliveryChannelStatus [read] => *
config:DescribeDeliveryChannels [list] => *
config:DescribeOrganizationConfigRuleStatuses [read] => *
config:DescribeOrganizationConfigRules [list] => *
config:DescribeOrganizationConformancePackStatuses [read] => *
config:DescribeOrganizationConformancePacks [list] => *
config:DescribePendingAggregationRequests [list] => *
config:DescribeRemediationConfigurations [list] => RemediationConfiguration*
config:DescribeRemediationExceptions [list] => *
config:DescribeRemediationExecutionStatus [read] => RemediationConfiguration*
config:DescribeRetentionConfigurations [list] => *
config:GetAggregateComplianceDetailsByConfigRule [read] => ConfigurationAggregator*
config:GetAggregateConfigRuleComplianceSummary [read] => ConfigurationAggregator*
config:GetAggregateConformancePackComplianceSummary [read] => ConfigurationAggregator*
config:GetAggregateDiscoveredResourceCounts [read] => ConfigurationAggregator*
config:GetAggregateResourceConfig [read] => ConfigurationAggregator*
config:GetComplianceDetailsByConfigRule [read] => ConfigRule*
config:GetComplianceDetailsByResource [read] => *
config:GetComplianceSummaryByConfigRule [read] => *
config:GetComplianceSummaryByResourceType [read] => *
config:GetConformancePackComplianceDetails [read] => *
config:GetConformancePackComplianceSummary [read] => *
config:GetDiscoveredResourceCounts [read] => *
config:GetOrganizationConfigRuleDetailedStatus [read] => *
config:GetOrganizationConformancePackDetailedStatus [read] => *
config:GetResourceConfigHistory [read] => *
config:GetStoredQuery [read] => StoredQuery*
config:ListAggregateDiscoveredResources [list] => ConfigurationAggregator*
config:ListDiscoveredResources [list] => *
config:ListStoredQueries [list] => StoredQuery*
config:ListTagsForResource [read] => AggregationAuthorization,ConfigRule,ConfigurationAggregator
config:PutAggregationAuthorization [write] => *,AggregationAuthorization*
config:PutConfigRule [write] => *,ConfigRule*
config:PutConfigurationAggregator [write] => *,ConfigurationAggregator*
config:PutConfigurationRecorder [write] => *
config:PutConformancePack [write] => *
config:PutDeliveryChannel [write] => *
config:PutEvaluations [write] => *
config:PutExternalEvaluation [write] => *
config:PutOrganizationConfigRule [write] => *
config:PutOrganizationConformancePack [write] => *
config:PutRemediationConfigurations [write] => RemediationConfiguration*
config:PutRemediationExceptions [write] => *
config:PutResourceConfig [write] => *
config:PutRetentionConfiguration [write] => *
config:PutStoredQuery [write] => *,StoredQuery*
config:SelectAggregateResourceConfig [read] => *
config:SelectResourceConfig [read] => *
config:StartConfigRulesEvaluation [write] => ConfigRule*
config:StartConfigurationRecorder [write] => *
config:StartRemediationExecution [write] => RemediationConfiguration*
config:StopConfigurationRecorder [write] => *
config:TagResource [tagging] => *,AggregationAuthorization,ConfigRule,ConfigurationAggregator,ConformancePack
config:UntagResource [tagging] => *,AggregationAuthorization,ConfigRule,ConfigurationAggregator,ConformancePack
connect:AssociateApprovedOrigin [write] => *,instance*
connect:AssociateBot [write] => *,instance*
connect:AssociateCustomerProfilesDomain [write] => instance*
connect:AssociateDefaultVocabulary [write] => *,instance*
connect:AssociateInstanceStorageConfig [write] => *,instance*
connect:AssociateLambdaFunction [write] => *,instance*
connect:AssociateLexBot [write] => *,instance*
connect:AssociatePhoneNumberContactFlow [write] => *,contact-flow*,phone-number*
connect:AssociateQueueQuickConnects [write] => *,queue*,quick-connect*
connect:AssociateRoutingProfileQueues [write] => *,queue*,routing-profile*
connect:AssociateSecurityKey [write] => *,instance*
connect:BatchAssociateAnalyticsDataSet [write] => *,instance*
connect:BatchDisassociateAnalyticsDataSet [write] => *,instance*
connect:ClaimPhoneNumber [write] => *,instance*,wildcard-phone-number*
connect:CreateAgentStatus [write] => *,agent-status*
connect:CreateContactFlow [write] => *,contact-flow*
connect:CreateContactFlowModule [write] => *,contact-flow-module*
connect:CreateHoursOfOperation [write] => *,hours-of-operation*
connect:CreateInstance [write] => *
connect:CreateIntegrationAssociation [write] => *,instance*,integration-association*
connect:CreateQueue [write] => *,contact-flow,hours-of-operation*,phone-number,queue*,quick-connect
connect:CreateQuickConnect [write] => *,contact-flow,queue,quick-connect*,user
connect:CreateRoutingProfile [write] => *,queue*,routing-profile*
connect:CreateSecurityProfile [write] => *,security-profile*
connect:CreateTaskTemplate [write] => task-template*
connect:CreateUseCase [write] => *,instance*,integration-association*,use-case*
connect:CreateUser [write] => *,hierarchy-group,routing-profile*,security-profile*,user*
connect:CreateUserHierarchyGroup [write] => *,hierarchy-group
connect:CreateVocabulary [write] => *,vocabulary*
connect:DeleteContactFlow [write] => *,contact-flow*
connect:DeleteContactFlowModule [write] => *,contact-flow-module*
connect:DeleteHoursOfOperation [write] => *,hours-of-operation*
connect:DeleteInstance [write] => *,instance*
connect:DeleteIntegrationAssociation [write] => *,instance*,integration-association*
connect:DeleteQuickConnect [write] => *,quick-connect*
connect:DeleteSecurityProfile [write] => *,security-profile*
connect:DeleteTaskTemplate [write] => *,task-template*
connect:DeleteUseCase [write] => *,instance*,use-case*
connect:DeleteUser [write] => *,user*
connect:DeleteUserHierarchyGroup [write] => *,hierarchy-group*
connect:DeleteVocabulary [write] => *,vocabulary*
connect:DescribeAgentStatus [read] => *,agent-status*
connect:DescribeContact [read] => *,contact*
connect:DescribeContactFlow [read] => *,contact-flow*
connect:DescribeContactFlowModule [read] => *,contact-flow-module*
connect:DescribeHoursOfOperation [read] => *,hours-of-operation*
connect:DescribeInstance [read] => *,instance*
connect:DescribeInstanceAttribute [read] => *,instance*
connect:DescribeInstanceStorageConfig [read] => *,instance*
connect:DescribePhoneNumber [list] => *,phone-number*
connect:DescribeQueue [read] => *,queue*
connect:DescribeQuickConnect [read] => *,quick-connect*
connect:DescribeRoutingProfile [read] => *,routing-profile*
connect:DescribeSecurityProfile [read] => *,security-profile*
connect:DescribeUser [read] => *,user*
connect:DescribeUserHierarchyGroup [read] => *,hierarchy-group*
connect:DescribeUserHierarchyStructure [read] => *,instance*
connect:DescribeVocabulary [read] => *,vocabulary*
connect:DisassociateApprovedOrigin [write] => *,instance*
connect:DisassociateBot [write] => *,instance*
connect:DisassociateCustomerProfilesDomain [write] => instance*
connect:DisassociateInstanceStorageConfig [write] => *,instance*
connect:DisassociateLambdaFunction [write] => *,instance*
connect:DisassociateLexBot [write] => *,instance*
connect:DisassociatePhoneNumberContactFlow [write] => *,phone-number*
connect:DisassociateQueueQuickConnects [write] => *,queue*,quick-connect*
connect:DisassociateRoutingProfileQueues [write] => *,routing-profile*
connect:DisassociateSecurityKey [write] => *,instance*
connect:GetContactAttributes [read] => *,contact*
connect:GetCurrentMetricData [read] => *,queue*
connect:GetCurrentUserData [read] => *,queue*
connect:GetFederationToken [read] => *,instance*
connect:GetFederationTokens [write] => instance*
connect:GetMetricData [read] => *,queue*
connect:GetTaskTemplate [read] => *,task-template*
connect:ListAgentStatuses [list] => wildcard-agent-status*
connect:ListApprovedOrigins [list] => *,instance*
connect:ListBots [list] => *,instance*
connect:ListContactFlowModules [list] => instance*
connect:ListContactFlows [list] => wildcard-contact-flow*
connect:ListContactReferences [list] => *,contact*
connect:ListDefaultVocabularies [list] => *,instance*
connect:ListHoursOfOperations [list] => *,instance*
connect:ListInstanceAttributes [list] => *,instance*
connect:ListInstanceStorageConfigs [list] => *,instance*
connect:ListInstances [list] => *
connect:ListIntegrationAssociations [list] => *,instance*
connect:ListLambdaFunctions [list] => *,instance*
connect:ListLexBots [list] => *,instance*
connect:ListPhoneNumbers [list] => wildcard-legacy-phone-number*
connect:ListPhoneNumbersV2 [list] => wildcard-phone-number*
connect:ListPrompts [list] => *,instance*
connect:ListQueueQuickConnects [list] => *,queue*
connect:ListQueues [list] => wildcard-queue*
connect:ListQuickConnects [list] => wildcard-quick-connect*
connect:ListRealtimeContactAnalysisSegments [read] => contact*
connect:ListRoutingProfileQueues [list] => *,routing-profile*
connect:ListRoutingProfiles [list] => *,instance*
connect:ListSecurityKeys [list] => *,instance*
connect:ListSecurityProfilePermissions [list] => *,security-profile*
connect:ListSecurityProfiles [list] => *,instance*
connect:ListTagsForResource [read] => *,agent-status,contact-flow,contact-flow-module,hierarchy-group,hours-of-operation,integration-association,phone-number,queue,quick-connect,routing-profile,security-profile,use-case,user,wildcard-phone-number
connect:ListTaskTemplates [list] => instance*
connect:ListUseCases [list] => *,instance*
connect:ListUserHierarchyGroups [list] => *,instance*
connect:ListUsers [list] => *,instance*
connect:PutUserStatus [write] => *,agent-status*,instance*,user*
connect:ReleasePhoneNumber [write] => *,phone-number*
connect:ResumeContactRecording [write] => contact*
connect:SearchAvailablePhoneNumbers [list] => wildcard-phone-number*
connect:SearchQueues [read] => *,instance*
connect:SearchRoutingProfiles [read] => *,instance*
connect:SearchSecurityProfiles [read] => *,instance*
connect:SearchUsers [read] => *,instance*
connect:SearchVocabularies [list] => *,vocabulary*
connect:StartChatContact [write] => contact-flow*
connect:StartContactRecording [write] => contact*
connect:StartContactStreaming [write] => instance*
connect:StartOutboundVoiceContact [write] => contact*
connect:StartTaskContact [write] => *,contact-flow*
connect:StopContact [write] => *,contact*
connect:StopContactRecording [write] => contact*
connect:StopContactStreaming [write] => instance*
connect:SuspendContactRecording [write] => contact*
connect:TagResource [tagging] => *,agent-status,contact-flow,contact-flow-module,hierarchy-group,hours-of-operation,instance,integration-association,phone-number,queue,quick-connect,routing-profile,security-profile,task-template,use-case,user,vocabulary,wildcard-phone-number
connect:TransferContact [write] => *,contact*,contact-flow*,instance*
connect:UntagResource [tagging] => *,agent-status,contact-flow,contact-flow-module,hierarchy-group,hours-of-operation,instance,integration-association,phone-number,queue,quick-connect,routing-profile,security-profile,task-template,use-case,user,vocabulary,wildcard-phone-number
connect:UpdateAgentStatus [write] => *,agent-status*
connect:UpdateContact [write] => *,contact*
connect:UpdateContactAttributes [write] => *,contact*
connect:UpdateContactFlowContent [write] => *,contact-flow*
connect:UpdateContactFlowMetadata [write] => *,contact-flow*
connect:UpdateContactFlowModuleContent [write] => *,contact-flow-module*
connect:UpdateContactFlowModuleMetadata [write] => *,contact-flow-module*
connect:UpdateContactFlowName [write] => *,contact-flow*
connect:UpdateContactSchedule [write] => *,contact*
connect:UpdateHoursOfOperation [write] => *,hours-of-operation*
connect:UpdateInstanceAttribute [write] => *,instance*
connect:UpdateInstanceStorageConfig [write] => *,instance*
connect:UpdatePhoneNumber [write] => *,instance*,phone-number*
connect:UpdateQueueHoursOfOperation [write] => *,hours-of-operation*,queue*
connect:UpdateQueueMaxContacts [write] => *,queue*
connect:UpdateQueueName [write] => *,queue*
connect:UpdateQueueOutboundCallerConfig [write] => *,contact-flow,phone-number,queue*
connect:UpdateQueueStatus [write] => *,queue*
connect:UpdateQuickConnectConfig [write] => *,contact-flow,queue,quick-connect*,user
connect:UpdateQuickConnectName [write] => *,quick-connect*
connect:UpdateRoutingProfileConcurrency [write] => *,routing-profile*
connect:UpdateRoutingProfileDefaultOutboundQueue [write] => *,queue*,routing-profile*
connect:UpdateRoutingProfileName [write] => *,routing-profile*
connect:UpdateRoutingProfileQueues [write] => *,routing-profile*
connect:UpdateSecurityProfile [write] => *,security-profile*
connect:UpdateTaskTemplate [write] => *,task-template*
connect:UpdateUserHierarchy [write] => *,hierarchy-group,user*
connect:UpdateUserHierarchyGroupName [write] => *,hierarchy-group*
connect:UpdateUserHierarchyStructure [write] => *,instance*
connect:UpdateUserIdentityInfo [write] => *,user*
connect:UpdateUserPhoneConfig [write] => *,user*
connect:UpdateUserRoutingProfile [write] => *,routing-profile*,user*
connect:UpdateUserSecurityProfiles [write] => *,security-profile*,user*
connect:UpdatedescribeContent [write] => *,contact-flow-module*
connect-campaigns:CreateCampaign [write] => *,campaign*
connect-campaigns:DeleteCampaign [write] => campaign*
connect-campaigns:DeleteConnectInstanceConfig [write] => *
connect-campaigns:DeleteInstanceOnboardingJob [write] => *
connect-campaigns:DescribeCampaign [read] => *,campaign*
connect-campaigns:GetCampaignState [read] => *,campaign*
connect-campaigns:GetCampaignStateBatch [read] => *,campaign*
connect-campaigns:GetConnectInstanceConfig [read] => *
connect-campaigns:GetInstanceOnboardingJobStatus [read] => *
connect-campaigns:ListCampaigns [list] => *
connect-campaigns:ListTagsForResource [read] => *,campaign
connect-campaigns:PauseCampaign [write] => campaign*
connect-campaigns:PutDialRequestBatch [write] => campaign*
connect-campaigns:ResumeCampaign [write] => campaign*
connect-campaigns:StartCampaign [write] => campaign*
connect-campaigns:StartInstanceOnboardingJob [write] => *
connect-campaigns:StopCampaign [write] => campaign*
connect-campaigns:TagResource [tagging] => *,campaign
connect-campaigns:UntagResource [tagging] => *,campaign
connect-campaigns:UpdateCampaignDialerConfig [write] => campaign*
connect-campaigns:UpdateCampaignName [write] => campaign*
connect-campaigns:UpdateCampaignOutboundCallConfig [write] => campaign*
controltower:CreateManagedAccount [write] => *
controltower:DeregisterManagedAccount [write] => *
controltower:DeregisterOrganizationalUnit [write] => *
controltower:DescribeAccountFactoryConfig [read] => *
controltower:DescribeCoreService [read] => *
controltower:DescribeGuardrail [read] => *
controltower:DescribeGuardrailForTarget [read] => *
controltower:DescribeManagedAccount [read] => *
controltower:DescribeManagedOrganizationalUnit [read] => *
controltower:DescribeSingleSignOn [read] => *
controltower:DisableControl [write] => *
controltower:DisableGuardrail [write] => *
controltower:EnableControl [write] => *
controltower:EnableGuardrail [write] => *
controltower:GetAvailableUpdates [read] => *
controltower:GetControlOperation [read] => *
controltower:GetGuardrailComplianceStatus [read] => *
controltower:GetHomeRegion [read] => *
controltower:GetLandingZoneStatus [read] => *
controltower:ListDirectoryGroups [list] => *
controltower:ListEnabledControls [list] => *
controltower:ListEnabledGuardrails [list] => *
controltower:ListGuardrailViolations [list] => *
controltower:ListGuardrails [list] => *
controltower:ListGuardrailsForTarget [list] => *
controltower:ListManagedAccounts [list] => *
controltower:ListManagedAccountsForGuardrail [list] => *
controltower:ListManagedAccountsForParent [list] => *
controltower:ListManagedOrganizationalUnits [list] => *
controltower:ListManagedOrganizationalUnitsForGuardrail [list] => *
controltower:ManageOrganizationalUnit [write] => *
controltower:SetupLandingZone [write] => *
controltower:UpdateAccountFactoryConfig [write] => *
cur:DeleteReportDefinition [write] => cur*
cur:DescribeReportDefinitions [read] => *
cur:ModifyReportDefinition [write] => cur*
cur:PutReportDefinition [write] => cur*
databrew:BatchDeleteRecipeVersion [write] => Recipe*
databrew:CreateDataset [write] => *
databrew:CreateProfileJob [write] => *
databrew:CreateProject [write] => *
databrew:CreateRecipe [write] => *
databrew:CreateRecipeJob [write] => *
databrew:CreateRuleset [write] => *
databrew:CreateSchedule [write] => *
databrew:DeleteDataset [write] => Dataset*
databrew:DeleteJob [write] => Job*
databrew:DeleteProject [write] => Project*
databrew:DeleteRecipeVersion [write] => Recipe*
databrew:DeleteRuleset [write] => Ruleset*
databrew:DeleteSchedule [write] => Schedule*
databrew:DescribeDataset [read] => Dataset*
databrew:DescribeJob [read] => Job*
databrew:DescribeJobRun [read] => Job*
databrew:DescribeProject [read] => Project*
databrew:DescribeRecipe [read] => Recipe*
databrew:DescribeRuleset [read] => Ruleset*
databrew:DescribeSchedule [read] => Schedule*
databrew:ListDatasets [read] => *
databrew:ListJobRuns [read] => Job*
databrew:ListJobs [read] => *
databrew:ListProjects [read] => *
databrew:ListRecipeVersions [read] => Recipe*
databrew:ListRecipes [read] => *
databrew:ListRulesets [read] => *
databrew:ListSchedules [read] => *
databrew:ListTagsForResource [read] => Dataset,Job,Project,Recipe,Ruleset,Schedule
databrew:PublishRecipe [write] => Recipe*
databrew:SendProjectSessionAction [write] => Project*
databrew:StartJobRun [write] => Job*
databrew:StartProjectSession [write] => Project*
databrew:StopJobRun [write] => Job*
databrew:TagResource [tagging] => *,Dataset,Job,Project,Recipe,Ruleset,Schedule
databrew:UntagResource [tagging] => *,Dataset,Job,Project,Recipe,Ruleset,Schedule
databrew:UpdateDataset [write] => Dataset*
databrew:UpdateProfileJob [write] => Job*
databrew:UpdateProject [write] => Project*
databrew:UpdateRecipe [write] => Recipe*
databrew:UpdateRecipeJob [write] => Job*
databrew:UpdateRuleset [write] => Ruleset*
databrew:UpdateSchedule [write] => Schedule*
dataexchange:CancelJob [write] => jobs*
dataexchange:CreateAsset [write] => *
dataexchange:CreateDataSet [write] => *
dataexchange:CreateEventAction [write] => event-actions*
dataexchange:CreateJob [write] => jobs*
dataexchange:CreateRevision [write] => *
dataexchange:DeleteAsset [write] => assets*
dataexchange:DeleteDataSet [write] => data-sets*
dataexchange:DeleteEventAction [write] => event-actions*
dataexchange:DeleteRevision [write] => revisions*
dataexchange:GetAsset [read] => assets*
dataexchange:GetDataSet [read] => data-sets*
dataexchange:GetEventAction [read] => event-actions*
dataexchange:GetJob [read] => jobs*
dataexchange:GetRevision [read] => revisions*
dataexchange:ListDataSetRevisions [read] => revisions*
dataexchange:ListDataSets [read] => data-sets*
dataexchange:ListEventActions [read] => event-actions*
dataexchange:ListJobs [read] => jobs*
dataexchange:ListRevisionAssets [read] => assets*
dataexchange:ListTagsForResource [read] => data-sets,revisions
dataexchange:PublishDataSet [write] => data-sets*
dataexchange:RevokeRevision [write] => revisions*
dataexchange:SendApiAsset [write] => assets*
dataexchange:StartJob [write] => jobs*
dataexchange:TagResource [tagging] => *,data-sets,revisions
dataexchange:UntagResource [tagging] => *,data-sets,revisions
dataexchange:UpdateAsset [write] => assets*
dataexchange:UpdateDataSet [write] => data-sets*
dataexchange:UpdateEventAction [write] => event-actions*
dataexchange:UpdateRevision [write] => revisions*
datapipeline:ActivatePipeline [write] => *
datapipeline:AddTags [tagging] => *
datapipeline:CreatePipeline [write] => *
datapipeline:DeactivatePipeline [write] => *
datapipeline:DeletePipeline [write] => *
datapipeline:DescribeObjects [read] => *
datapipeline:DescribePipelines [list] => *
datapipeline:EvaluateExpression [read] => *
datapipeline:GetAccountLimits [list] => *
datapipeline:GetPipelineDefinition [read] => *
datapipeline:ListPipelines [list] => *
datapipeline:PollForTask [write] => *
datapipeline:PutAccountLimits [write] => *
datapipeline:PutPipelineDefinition [write] => *
datapipeline:QueryObjects [read] => *
datapipeline:RemoveTags [tagging] => *
datapipeline:ReportTaskProgress [write] => *
datapipeline:ReportTaskRunnerHeartbeat [write] => *
datapipeline:SetStatus [write] => *
datapipeline:SetTaskStatus [write] => *
datapipeline:ValidatePipelineDefinition [read] => *
datasync:CancelTaskExecution [write] => taskexecution*
datasync:CreateAgent [write] => *
datasync:CreateLocationEfs [write] => *
datasync:CreateLocationFsxLustre [write] => *
datasync:CreateLocationFsxOntap [write] => *
datasync:CreateLocationFsxOpenZfs [write] => *
datasync:CreateLocationFsxWindows [write] => *
datasync:CreateLocationHdfs [write] => *
datasync:CreateLocationNfs [write] => *
datasync:CreateLocationObjectStorage [write] => *
datasync:CreateLocationS3 [write] => *
datasync:CreateLocationSmb [write] => *
datasync:CreateTask [write] => *
datasync:DeleteAgent [write] => agent*
datasync:DeleteLocation [write] => location*
datasync:DeleteTask [write] => task*
datasync:DescribeAgent [read] => agent*
datasync:DescribeLocationEfs [read] => location*
datasync:DescribeLocationFsxLustre [read] => location*
datasync:DescribeLocationFsxOntap [read] => location*
datasync:DescribeLocationFsxOpenZfs [read] => location*
datasync:DescribeLocationFsxWindows [read] => location*
datasync:DescribeLocationHdfs [read] => location*
datasync:DescribeLocationNfs [read] => location*
datasync:DescribeLocationObjectStorage [read] => location*
datasync:DescribeLocationS3 [read] => location*
datasync:DescribeLocationSmb [read] => location*
datasync:DescribeTask [read] => task*
datasync:DescribeTaskExecution [read] => taskexecution*
datasync:ListAgents [list] => *
datasync:ListLocations [list] => *
datasync:ListTagsForResource [read] => agent,location,task
datasync:ListTaskExecutions [list] => *
datasync:ListTasks [list] => *
datasync:StartTaskExecution [write] => task*
datasync:TagResource [tagging] => *,agent,location,task
datasync:UntagResource [tagging] => *,agent,location,task
datasync:UpdateAgent [write] => agent*
datasync:UpdateLocationHdfs [write] => location*
datasync:UpdateLocationNfs [write] => location*
datasync:UpdateLocationObjectStorage [write] => location*
datasync:UpdateLocationSmb [write] => location*
datasync:UpdateTask [write] => task*
datasync:UpdateTaskExecution [write] => taskexecution*
dax:BatchGetItem [read] => application*
dax:BatchWriteItem [write] => application*
dax:ConditionCheckItem [read] => application*
dax:CreateCluster [write] => application*
dax:CreateParameterGroup [write] => *
dax:CreateSubnetGroup [write] => *
dax:DecreaseReplicationFactor [write] => application*
dax:DeleteCluster [write] => application*
dax:DeleteItem [write] => *,application*
dax:DeleteParameterGroup [write] => *
dax:DeleteSubnetGroup [write] => *
dax:DescribeClusters [list] => application
dax:DescribeDefaultParameters [list] => *
dax:DescribeEvents [list] => *
dax:DescribeParameterGroups [list] => *
dax:DescribeParameters [read] => *
dax:DescribeSubnetGroups [list] => *
dax:GetItem [read] => *,application*
dax:IncreaseReplicationFactor [write] => application*
dax:ListTags [read] => application*
dax:PutItem [write] => *,application*
dax:Query [read] => application*
dax:RebootNode [write] => application*
dax:Scan [read] => application*
dax:TagResource [tagging] => application*
dax:UntagResource [tagging] => application*
dax:UpdateCluster [write] => application*
dax:UpdateItem [write] => *,application*
dax:UpdateParameterGroup [write] => *
dax:UpdateSubnetGroup [write] => *
dbqms:CreateFavoriteQuery [write] => *
dbqms:CreateQueryHistory [write] => *
dbqms:CreateTab [write] => *
dbqms:DeleteFavoriteQueries [write] => *
dbqms:DeleteQueryHistory [write] => *
dbqms:DeleteTab [write] => *
dbqms:DescribeFavoriteQueries [list] => *
dbqms:DescribeQueryHistory [list] => *
dbqms:DescribeTabs [list] => *
dbqms:GetQueryString [read] => *
dbqms:UpdateFavoriteQuery [write] => *
dbqms:UpdateQueryHistory [write] => *
dbqms:UpdateTab [write] => *
deepcomposer:AssociateCoupon [write] => *
deepcomposer:CreateAudio [write] => audio*
deepcomposer:CreateComposition [write] => *,composition*
deepcomposer:CreateModel [write] => *,model*
deepcomposer:DeleteComposition [write] => composition*
deepcomposer:DeleteModel [write] => model*
deepcomposer:GetComposition [read] => *,composition*
deepcomposer:GetModel [read] => *,model*
deepcomposer:GetSampleModel [read] => model*
deepcomposer:ListCompositions [list] => composition*
deepcomposer:ListModels [list] => model*
deepcomposer:ListSampleModels [list] => model*
deepcomposer:ListTagsForResource [list] => *,composition,model
deepcomposer:ListTrainingTopics [list] => model*
deepcomposer:TagResource [tagging] => *,composition,model
deepcomposer:UntagResource [tagging] => *,composition,model
deepcomposer:UpdateComposition [write] => composition*
deepcomposer:UpdateModel [write] => model*
deeplens:AssociateServiceRoleToAccount [permissions-management] => *
deeplens:BatchGetDevice [read] => device*
deeplens:BatchGetModel [read] => model*
deeplens:BatchGetProject [read] => project*
deeplens:CreateDeviceCertificates [write] => *
deeplens:CreateModel [write] => *
deeplens:CreateProject [write] => *
deeplens:DeleteModel [write] => model*
deeplens:DeleteProject [write] => project*
deeplens:DeployProject [write] => device*,project*
deeplens:DeregisterDevice [write] => device*
deeplens:GetAssociatedResources [read] => *
deeplens:GetDeploymentStatus [read] => *
deeplens:GetDevice [read] => device*
deeplens:GetModel [read] => model*
deeplens:GetProject [read] => project*
deeplens:ImportProjectFromTemplate [write] => *
deeplens:ListDeployments [list] => *
deeplens:ListDevices [list] => *
deeplens:ListModels [list] => *
deeplens:ListProjects [list] => *
deeplens:RegisterDevice [write] => *
deeplens:RemoveProject [write] => device*
deeplens:UpdateProject [write] => project*
deepracer:AddLeaderboardAccessPermission [write] => *,leaderboard*
deepracer:AdminGetAccountConfig [read] => *
deepracer:AdminListAssociatedResources [read] => *
deepracer:AdminListAssociatedUsers [read] => *
deepracer:AdminManageUser [write] => *
deepracer:AdminSetAccountConfig [write] => *
deepracer:CloneReinforcementLearningModel [write] => *,reinforcement_learning_model*,track*
deepracer:CreateCar [write] => *
deepracer:CreateLeaderboard [write] => *
deepracer:CreateLeaderboardAccessToken [write] => *,leaderboard*
deepracer:CreateLeaderboardSubmission [write] => *,leaderboard*,reinforcement_learning_model*
deepracer:CreateReinforcementLearningModel [write] => *,track*
deepracer:DeleteLeaderboard [write] => *,leaderboard*
deepracer:DeleteModel [write] => *,reinforcement_learning_model*
deepracer:EditLeaderboard [write] => *,leaderboard*
deepracer:GetAccountConfig [read] => *
deepracer:GetAlias [read] => *
deepracer:GetAssetUrl [read] => *,reinforcement_learning_model*
deepracer:GetCar [read] => *,car*
deepracer:GetCars [read] => *
deepracer:GetEvaluation [read] => *,evaluation_job*
deepracer:GetLatestUserSubmission [read] => *,leaderboard*
deepracer:GetLeaderboard [read] => *,leaderboard*
deepracer:GetModel [read] => *,reinforcement_learning_model*
deepracer:GetPrivateLeaderboard [read] => *,leaderboard*
deepracer:GetRankedUserSubmission [read] => *,leaderboard*
deepracer:GetTrack [read] => track*
deepracer:GetTrainingJob [read] => *,training_job*
deepracer:ImportModel [write] => *
deepracer:ListEvaluations [read] => *,reinforcement_learning_model*
deepracer:ListLeaderboardSubmissions [read] => *,leaderboard*
deepracer:ListLeaderboards [read] => *
deepracer:ListModels [read] => *
deepracer:ListPrivateLeaderboardParticipants [read] => *,leaderboard*
deepracer:ListPrivateLeaderboards [read] => *
deepracer:ListSubscribedPrivateLeaderboards [read] => *
deepracer:ListTagsForResource [read] => *,car,evaluation_job,leaderboard,leaderboard_evaluation_job,reinforcement_learning_model,training_job
deepracer:ListTracks [read] => *
deepracer:ListTrainingJobs [read] => *,reinforcement_learning_model*
deepracer:MigrateModels [write] => *
deepracer:PerformLeaderboardOperation [write] => *,leaderboard
deepracer:RemoveLeaderboardAccessPermission [write] => *,leaderboard*
deepracer:SetAlias [write] => *
deepracer:StartEvaluation [write] => *,reinforcement_learning_model*,track*
deepracer:StopEvaluation [write] => *,evaluation_job*
deepracer:StopTrainingReinforcementLearningModel [write] => *,reinforcement_learning_model*
deepracer:TagResource [tagging] => *,car,evaluation_job,leaderboard,leaderboard_evaluation_job,reinforcement_learning_model,training_job
deepracer:TestRewardFunction [write] => *
deepracer:UntagResource [tagging] => *,car,evaluation_job,leaderboard,leaderboard_evaluation_job,reinforcement_learning_model,training_job
deepracer:UpdateCar [write] => *,car*
detective:AcceptInvitation [write] => *
detective:BatchGetGraphMemberDatasources [read] => Graph*
detective:BatchGetMembershipDatasources [read] => *
detective:CreateGraph [write] => *
detective:CreateMembers [write] => Graph*
detective:DeleteGraph [write] => Graph*
detective:DeleteMembers [write] => Graph*
detective:DescribeOrganizationConfiguration [read] => Graph*
detective:DisableOrganizationAdminAccount [write] => Graph*
detective:DisassociateMembership [write] => *
detective:EnableOrganizationAdminAccount [write] => *
detective:GetFreeTrialEligibility [read] => Graph*
detective:GetGraphIngestState [read] => Graph*
detective:GetMembers [read] => Graph*
detective:GetPricingInformation [read] => *
detective:GetUsageInformation [read] => Graph*
detective:ListDatasourcePackages [read] => Graph*
detective:ListGraphs [list] => *
detective:ListInvitations [list] => *
detective:ListMembers [list] => Graph*
detective:ListOrganizationAdminAccounts [list] => Graph*
detective:ListTagsForResource [read] => *,Graph*
detective:RejectInvitation [write] => *
detective:SearchGraph [read] => Graph*
detective:StartMonitoringMember [write] => Graph*
detective:TagResource [tagging] => *,Graph*
detective:UntagResource [tagging] => *,Graph*
detective:UpdateDatasourcePackages [write] => Graph*
detective:UpdateOrganizationConfiguration [write] => Graph*
devicefarm:CreateDevicePool [write] => project*
devicefarm:CreateInstanceProfile [write] => *
devicefarm:CreateNetworkProfile [write] => project*
devicefarm:CreateProject [write] => *
devicefarm:CreateRemoteAccessSession [write] => device*,deviceinstance,project*,upload
devicefarm:CreateTestGridProject [write] => *
devicefarm:CreateTestGridUrl [write] => testgrid-project*
devicefarm:CreateUpload [write] => project*
devicefarm:CreateVPCEConfiguration [write] => *
devicefarm:DeleteDevicePool [write] => devicepool*
devicefarm:DeleteInstanceProfile [write] => instanceprofile*
devicefarm:DeleteNetworkProfile [write] => networkprofile*
devicefarm:DeleteProject [write] => project*
devicefarm:DeleteRemoteAccessSession [write] => session*
devicefarm:DeleteRun [write] => run*
devicefarm:DeleteTestGridProject [write] => testgrid-project*
devicefarm:DeleteUpload [write] => upload*
devicefarm:DeleteVPCEConfiguration [write] => vpceconfiguration*
devicefarm:GetAccountSettings [read] => *
devicefarm:GetDevice [read] => device*
devicefarm:GetDeviceInstance [read] => deviceinstance*
devicefarm:GetDevicePool [read] => devicepool*
devicefarm:GetDevicePoolCompatibility [read] => devicepool*,upload
devicefarm:GetInstanceProfile [read] => instanceprofile*
devicefarm:GetJob [read] => job*
devicefarm:GetNetworkProfile [read] => networkprofile*
devicefarm:GetOfferingStatus [read] => *
devicefarm:GetProject [read] => project*
devicefarm:GetRemoteAccessSession [read] => session*
devicefarm:GetRun [read] => run*
devicefarm:GetSuite [read] => suite*
devicefarm:GetTest [read] => test*
devicefarm:GetTestGridProject [read] => testgrid-project*
devicefarm:GetTestGridSession [read] => testgrid-project,testgrid-session
devicefarm:GetUpload [read] => upload*
devicefarm:GetVPCEConfiguration [read] => vpceconfiguration*
devicefarm:InstallToRemoteAccessSession [write] => session*,upload*
devicefarm:ListArtifacts [list] => job,run,suite,test
devicefarm:ListDeviceInstances [list] => *
devicefarm:ListDevicePools [list] => project*
devicefarm:ListDevices [list] => *
devicefarm:ListInstanceProfiles [list] => *
devicefarm:ListJobs [list] => run*
devicefarm:ListNetworkProfiles [list] => project*
devicefarm:ListOfferingPromotions [list] => *
devicefarm:ListOfferingTransactions [list] => *
devicefarm:ListOfferings [list] => *
devicefarm:ListProjects [list] => *
devicefarm:ListRemoteAccessSessions [list] => project*
devicefarm:ListRuns [list] => project*
devicefarm:ListSamples [list] => job*
devicefarm:ListSuites [list] => job*
devicefarm:ListTagsForResource [list] => device,deviceinstance,devicepool,instanceprofile,networkprofile,project,run,session,testgrid-project,testgrid-session,vpceconfiguration
devicefarm:ListTestGridProjects [list] => *
devicefarm:ListTestGridSessionActions [list] => testgrid-session*
devicefarm:ListTestGridSessionArtifacts [list] => testgrid-session*
devicefarm:ListTestGridSessions [list] => testgrid-project*
devicefarm:ListTests [list] => suite*
devicefarm:ListUniqueProblems [list] => run*
devicefarm:ListUploads [list] => project*
devicefarm:ListVPCEConfigurations [list] => *
devicefarm:PurchaseOffering [write] => *
devicefarm:RenewOffering [write] => *
devicefarm:ScheduleRun [write] => devicepool,project*,upload
devicefarm:StopJob [write] => job*
devicefarm:StopRemoteAccessSession [write] => session*
devicefarm:StopRun [write] => run*
devicefarm:TagResource [tagging] => *,device,deviceinstance,devicepool,instanceprofile,networkprofile,project,run,session,testgrid-project,testgrid-session,vpceconfiguration
devicefarm:UntagResource [tagging] => *,device,deviceinstance,devicepool,instanceprofile,networkprofile,project,run,session,testgrid-project,testgrid-session,vpceconfiguration
devicefarm:UpdateDeviceInstance [write] => deviceinstance*,instanceprofile
devicefarm:UpdateDevicePool [write] => devicepool*
devicefarm:UpdateInstanceProfile [write] => instanceprofile*
devicefarm:UpdateNetworkProfile [write] => networkprofile*
devicefarm:UpdateProject [write] => project*
devicefarm:UpdateTestGridProject [write] => testgrid-project*
devicefarm:UpdateUpload [write] => upload*
devicefarm:UpdateVPCEConfiguration [write] => vpceconfiguration*
devops-guru:AddNotificationChannel [write] => topic*
devops-guru:DeleteInsight [write] => *
devops-guru:DescribeAccountHealth [read] => *
devops-guru:DescribeAccountOverview [read] => *
devops-guru:DescribeAnomaly [read] => *
devops-guru:DescribeEventSourcesConfig [read] => *
devops-guru:DescribeFeedback [read] => *
devops-guru:DescribeInsight [read] => *
devops-guru:DescribeOrganizationHealth [read] => *
devops-guru:DescribeOrganizationOverview [read] => *
devops-guru:DescribeOrganizationResourceCollectionHealth [read] => *
devops-guru:DescribeResourceCollectionHealth [read] => *
devops-guru:DescribeServiceIntegration [read] => *
devops-guru:GetCostEstimation [read] => *
devops-guru:GetResourceCollection [read] => *
devops-guru:ListAnomaliesForInsight [list] => *
devops-guru:ListAnomalousLogGroups [list] => *
devops-guru:ListEvents [list] => *
devops-guru:ListInsights [list] => *
devops-guru:ListMonitoredResources [list] => *
devops-guru:ListNotificationChannels [list] => *
devops-guru:ListOrganizationInsights [list] => *
devops-guru:ListRecommendations [list] => *
devops-guru:PutFeedback [write] => *
devops-guru:RemoveNotificationChannel [write] => topic*
devops-guru:SearchInsights [list] => *
devops-guru:SearchOrganizationInsights [list] => *
devops-guru:StartCostEstimation [read] => *
devops-guru:UpdateEventSourcesConfig [write] => *
devops-guru:UpdateResourceCollection [write] => *
devops-guru:UpdateServiceIntegration [write] => *
directconnect:AcceptDirectConnectGatewayAssociationProposal [write] => dx-gateway*
directconnect:AllocateConnectionOnInterconnect [write] => dxcon*
directconnect:AllocateHostedConnection [write] => *,dxcon,dxlag
directconnect:AllocatePrivateVirtualInterface [write] => *,dxcon,dxlag
directconnect:AllocatePublicVirtualInterface [write] => *,dxcon,dxlag
directconnect:AllocateTransitVirtualInterface [write] => *,dxcon,dxlag
directconnect:AssociateConnectionWithLag [write] => dxcon*,dxlag*
directconnect:AssociateHostedConnection [write] => dxcon,dxcon*,dxlag
directconnect:AssociateMacSecKey [write] => dxcon,dxlag
directconnect:AssociateVirtualInterface [write] => dxcon,dxlag,dxvif*
directconnect:ConfirmConnection [write] => dxcon*
directconnect:ConfirmCustomerAgreement [write] => *
directconnect:ConfirmPrivateVirtualInterface [write] => dxvif*
directconnect:ConfirmPublicVirtualInterface [write] => dxvif*
directconnect:ConfirmTransitVirtualInterface [write] => dxvif*
directconnect:CreateBGPPeer [write] => dxvif*
directconnect:CreateConnection [write] => *,dxlag
directconnect:CreateDirectConnectGateway [write] => *
directconnect:CreateDirectConnectGatewayAssociation [write] => dx-gateway*
directconnect:CreateDirectConnectGatewayAssociationProposal [write] => dx-gateway*
directconnect:CreateInterconnect [write] => *,dxlag
directconnect:CreateLag [write] => *,dxcon
directconnect:CreatePrivateVirtualInterface [write] => *,dxcon,dxlag
directconnect:CreatePublicVirtualInterface [write] => *,dxcon,dxlag
directconnect:CreateTransitVirtualInterface [write] => *,dxcon,dxlag
directconnect:DeleteBGPPeer [write] => dxvif*
directconnect:DeleteConnection [write] => dxcon*
directconnect:DeleteDirectConnectGateway [write] => dx-gateway*
directconnect:DeleteDirectConnectGatewayAssociation [write] => dx-gateway*
directconnect:DeleteDirectConnectGatewayAssociationProposal [write] => *
directconnect:DeleteInterconnect [write] => dxcon*
directconnect:DeleteLag [write] => dxlag*
directconnect:DeleteVirtualInterface [write] => dxvif*
directconnect:DescribeConnectionLoa [read] => dxcon*
directconnect:DescribeConnections [read] => dxcon
directconnect:DescribeConnectionsOnInterconnect [read] => dxcon*
directconnect:DescribeCustomerMetadata [read] => *
directconnect:DescribeDirectConnectGatewayAssociationProposals [read] => dx-gateway
directconnect:DescribeDirectConnectGatewayAssociations [read] => dx-gateway
directconnect:DescribeDirectConnectGatewayAttachments [read] => dx-gateway
directconnect:DescribeDirectConnectGateways [read] => dx-gateway
directconnect:DescribeHostedConnections [read] => dxcon,dxlag
directconnect:DescribeInterconnectLoa [read] => dxcon*
directconnect:DescribeInterconnects [read] => dxcon
directconnect:DescribeLags [read] => dxlag
directconnect:DescribeLoa [read] => dxcon,dxlag
directconnect:DescribeLocations [read] => *
directconnect:DescribeRouterConfiguration [read] => dxvif*
directconnect:DescribeTags [read] => dxcon,dxlag,dxvif
directconnect:DescribeVirtualGateways [read] => *
directconnect:DescribeVirtualInterfaces [read] => dxcon,dxlag,dxvif
directconnect:DisassociateConnectionFromLag [write] => dxcon*,dxlag*
directconnect:DisassociateMacSecKey [write] => dxcon,dxlag
directconnect:ListVirtualInterfaceTestHistory [list] => dxvif*
directconnect:StartBgpFailoverTest [write] => dxvif*
directconnect:StopBgpFailoverTest [write] => dxvif*
directconnect:TagResource [tagging] => *,dxcon,dxlag,dxvif
directconnect:UntagResource [tagging] => *,dxcon,dxlag,dxvif
directconnect:UpdateConnection [write] => dxcon*
directconnect:UpdateDirectConnectGateway [write] => dx-gateway*
directconnect:UpdateDirectConnectGatewayAssociation [write] => *
directconnect:UpdateLag [write] => dxlag*
directconnect:UpdateVirtualInterfaceAttributes [write] => dxvif*
discovery:AssociateConfigurationItemsToApplication [write] => *
discovery:BatchDeleteImportData [write] => *
discovery:CreateApplication [write] => *
discovery:CreateTags [tagging] => *
discovery:DeleteApplications [write] => *
discovery:DeleteTags [tagging] => *
discovery:DescribeAgents [read] => *
discovery:DescribeConfigurations [read] => *
discovery:DescribeContinuousExports [read] => *
discovery:DescribeExportConfigurations [read] => *
discovery:DescribeExportTasks [read] => *
discovery:DescribeImportTasks [list] => *
discovery:DescribeTags [read] => *
discovery:DisassociateConfigurationItemsFromApplication [write] => *
discovery:ExportConfigurations [write] => *
discovery:GetDiscoverySummary [read] => *
discovery:GetNetworkConnectionGraph [read] => *
discovery:ListConfigurations [list] => *
discovery:ListServerNeighbors [list] => *
discovery:StartContinuousExport [write] => *
discovery:StartDataCollectionByAgentIds [write] => *
discovery:StartExportTask [write] => *
discovery:StartImportTask [write] => *
discovery:StopContinuousExport [write] => *
discovery:StopDataCollectionByAgentIds [write] => *
discovery:UpdateApplication [write] => *
dlm:CreateLifecyclePolicy [write] => *
dlm:DeleteLifecyclePolicy [write] => policy*
dlm:GetLifecyclePolicies [list] => *
dlm:GetLifecyclePolicy [read] => policy*
dlm:ListTagsForResource [read] => policy*
dlm:TagResource [tagging] => *,policy*
dlm:UntagResource [tagging] => *,policy*
dlm:UpdateLifecyclePolicy [write] => policy*
dms:AddTagsToResource [tagging] => *,Certificate,Endpoint,EventSubscription,ReplicationInstance,ReplicationSubnetGroup,ReplicationTask
dms:ApplyPendingMaintenanceAction [write] => ReplicationInstance*
dms:CancelReplicationTaskAssessmentRun [write] => ReplicationTaskAssessmentRun*
dms:CreateEndpoint [write] => *
dms:CreateEventSubscription [write] => *
dms:CreateReplicationInstance [write] => *
dms:CreateReplicationSubnetGroup [write] => *
dms:CreateReplicationTask [write] => *,Endpoint*,ReplicationInstance*
dms:DeleteCertificate [write] => Certificate*
dms:DeleteConnection [write] => Endpoint*,ReplicationInstance*
dms:DeleteEndpoint [write] => Endpoint*
dms:DeleteEventSubscription [write] => EventSubscription*
dms:DeleteReplicationInstance [write] => ReplicationInstance*
dms:DeleteReplicationSubnetGroup [write] => ReplicationSubnetGroup*
dms:DeleteReplicationTask [write] => ReplicationTask*
dms:DeleteReplicationTaskAssessmentRun [write] => ReplicationTaskAssessmentRun*
dms:DescribeAccountAttributes [read] => *
dms:DescribeApplicableIndividualAssessments [read] => ReplicationInstance,ReplicationTask
dms:DescribeCertificates [read] => *
dms:DescribeConnections [read] => *
dms:DescribeEndpointSettings [read] => *
dms:DescribeEndpointTypes [read] => *
dms:DescribeEndpoints [read] => *
dms:DescribeEventCategories [read] => *
dms:DescribeEventSubscriptions [read] => *
dms:DescribeEvents [read] => *
dms:DescribeOrderableReplicationInstances [read] => *
dms:DescribePendingMaintenanceActions [read] => *
dms:DescribeRefreshSchemasStatus [read] => Endpoint*
dms:DescribeReplicationInstanceTaskLogs [read] => *,ReplicationInstance*
dms:DescribeReplicationInstances [read] => *
dms:DescribeReplicationSubnetGroups [read] => *
dms:DescribeReplicationTaskAssessmentResults [read] => ReplicationTask
dms:DescribeReplicationTaskAssessmentRuns [read] => ReplicationInstance,ReplicationTask,ReplicationTaskAssessmentRun
dms:DescribeReplicationTaskIndividualAssessments [read] => ReplicationTask,ReplicationTaskAssessmentRun
dms:DescribeReplicationTasks [read] => *
dms:DescribeSchemas [read] => Endpoint*
dms:DescribeTableStatistics [read] => ReplicationTask*
dms:ImportCertificate [write] => *
dms:ListTagsForResource [read] => Certificate,Endpoint,EventSubscription,ReplicationInstance,ReplicationSubnetGroup,ReplicationTask
dms:ModifyEndpoint [write] => Certificate,Endpoint*
dms:ModifyEventSubscription [write] => *
dms:ModifyReplicationInstance [write] => ReplicationInstance*
dms:ModifyReplicationSubnetGroup [write] => *
dms:ModifyReplicationTask [write] => ReplicationTask*
dms:MoveReplicationTask [write] => ReplicationInstance*,ReplicationTask*
dms:RebootReplicationInstance [write] => ReplicationInstance*
dms:RefreshSchemas [write] => Endpoint*,ReplicationInstance*
dms:ReloadTables [write] => ReplicationTask*
dms:RemoveTagsFromResource [tagging] => *,Certificate,Endpoint,EventSubscription,ReplicationInstance,ReplicationSubnetGroup,ReplicationTask
dms:StartReplicationTask [write] => ReplicationTask*
dms:StartReplicationTaskAssessment [write] => ReplicationTask*
dms:StartReplicationTaskAssessmentRun [write] => ReplicationTask*
dms:StopReplicationTask [write] => ReplicationTask*
dms:TestConnection [read] => Endpoint*,ReplicationInstance*
drs:AssociateFailbackClientToRecoveryInstanceForDrs [write] => RecoveryInstanceResource*
drs:BatchCreateVolumeSnapshotGroupForDrs [write] => RecoveryInstanceResource*,SourceServerResource*
drs:BatchDeleteSnapshotRequestForDrs [write] => *
drs:CreateConvertedSnapshotForDrs [write] => *,SourceServerResource*
drs:CreateExtendedSourceServer [write] => *
drs:CreateRecoveryInstanceForDrs [write] => *,SourceServerResource*
drs:CreateReplicationConfigurationTemplate [write] => *
drs:CreateSessionForDrs [write] => *
drs:CreateSourceServerForDrs [write] => *
drs:DeleteJob [write] => JobResource*
drs:DeleteRecoveryInstance [write] => RecoveryInstanceResource*
drs:DeleteReplicationConfigurationTemplate [write] => ReplicationConfigurationTemplateResource*
drs:DeleteSourceServer [write] => SourceServerResource*
drs:DescribeJobLogItems [read] => JobResource*
drs:DescribeJobs [read] => *
drs:DescribeRecoveryInstances [read] => *
drs:DescribeRecoverySnapshots [read] => SourceServerResource*
drs:DescribeReplicationConfigurationTemplates [read] => *
drs:DescribeReplicationServerAssociationsForDrs [read] => *
drs:DescribeSnapshotRequestsForDrs [read] => *
drs:DescribeSourceServers [read] => *
drs:DisconnectRecoveryInstance [write] => RecoveryInstanceResource*
drs:DisconnectSourceServer [write] => SourceServerResource*
drs:GetAgentCommandForDrs [read] => RecoveryInstanceResource*,SourceServerResource*
drs:GetAgentConfirmedResumeInfoForDrs [read] => RecoveryInstanceResource*,SourceServerResource*
drs:GetAgentInstallationAssetsForDrs [read] => *
drs:GetAgentReplicationInfoForDrs [read] => RecoveryInstanceResource*,SourceServerResource*
drs:GetAgentRuntimeConfigurationForDrs [read] => RecoveryInstanceResource*,SourceServerResource*
drs:GetAgentSnapshotCreditsForDrs [read] => RecoveryInstanceResource*,SourceServerResource*
drs:GetChannelCommandsForDrs [read] => *
drs:GetFailbackCommandForDrs [read] => RecoveryInstanceResource*
drs:GetFailbackLaunchRequestedForDrs [read] => RecoveryInstanceResource*
drs:GetFailbackReplicationConfiguration [read] => RecoveryInstanceResource*
drs:GetLaunchConfiguration [read] => SourceServerResource*
drs:GetReplicationConfiguration [read] => SourceServerResource*
drs:GetSuggestedFailbackClientDeviceMappingForDrs [read] => RecoveryInstanceResource*
drs:InitializeService [write] => *
drs:IssueAgentCertificateForDrs [write] => RecoveryInstanceResource*,SourceServerResource*
drs:ListExtensibleSourceServers [read] => *
drs:ListStagingAccounts [read] => *
drs:ListTagsForResource [read] => *
drs:NotifyAgentAuthenticationForDrs [write] => RecoveryInstanceResource*,SourceServerResource*
drs:NotifyAgentConnectedForDrs [write] => RecoveryInstanceResource*,SourceServerResource*
drs:NotifyAgentDisconnectedForDrs [write] => RecoveryInstanceResource*,SourceServerResource*
drs:NotifyAgentReplicationProgressForDrs [write] => RecoveryInstanceResource*,SourceServerResource*
drs:NotifyConsistencyAttainedForDrs [write] => RecoveryInstanceResource*
drs:NotifyReplicationServerAuthenticationForDrs [write] => RecoveryInstanceResource*
drs:NotifyVolumeEventForDrs [write] => SourceServerResource*
drs:RetryDataReplication [write] => SourceServerResource*
drs:SendAgentLogsForDrs [write] => RecoveryInstanceResource*,SourceServerResource*
drs:SendAgentMetricsForDrs [write] => RecoveryInstanceResource*,SourceServerResource*
drs:SendChannelCommandResultForDrs [write] => *
drs:SendClientLogsForDrs [write] => *
drs:SendClientMetricsForDrs [write] => *
drs:SendVolumeStatsForDrs [write] => SourceServerResource*
drs:StartFailbackLaunch [write] => *,RecoveryInstanceResource*
drs:StartRecovery [write] => *,SourceServerResource*
drs:StopFailback [write] => RecoveryInstanceResource*
drs:TagResource [tagging] => *,JobResource,RecoveryInstanceResource,ReplicationConfigurationTemplateResource,SourceServerResource
drs:TerminateRecoveryInstances [write] => *,RecoveryInstanceResource*
drs:UntagResource [tagging] => *,JobResource,RecoveryInstanceResource,ReplicationConfigurationTemplateResource,SourceServerResource
drs:UpdateAgentBacklogForDrs [write] => RecoveryInstanceResource*,SourceServerResource*
drs:UpdateAgentConversionInfoForDrs [write] => RecoveryInstanceResource*,SourceServerResource*
drs:UpdateAgentReplicationInfoForDrs [write] => RecoveryInstanceResource*,SourceServerResource*
drs:UpdateAgentReplicationProcessStateForDrs [write] => RecoveryInstanceResource*,SourceServerResource*
drs:UpdateAgentSourcePropertiesForDrs [write] => RecoveryInstanceResource*,SourceServerResource*
drs:UpdateFailbackClientDeviceMappingForDrs [write] => RecoveryInstanceResource*
drs:UpdateFailbackClientLastSeenForDrs [write] => RecoveryInstanceResource*
drs:UpdateFailbackReplicationConfiguration [write] => RecoveryInstanceResource*
drs:UpdateLaunchConfiguration [write] => SourceServerResource*
drs:UpdateReplicationCertificateForDrs [write] => RecoveryInstanceResource*
drs:UpdateReplicationConfiguration [write] => SourceServerResource*
drs:UpdateReplicationConfigurationTemplate [write] => ReplicationConfigurationTemplateResource*
ds:AcceptSharedDirectory [write] => directory*
ds:AddIpRoutes [write] => directory*
ds:AddRegion [write] => directory*
ds:AddTagsToResource [tagging] => *,directory*
ds:AuthorizeApplication [write] => directory*
ds:CancelSchemaExtension [write] => directory*
ds:CheckAlias [read] => *
ds:ConnectDirectory [write] => *
ds:CreateAlias [write] => directory*
ds:CreateComputer [write] => directory*
ds:CreateConditionalForwarder [write] => directory*
ds:CreateDirectory [write] => *
ds:CreateIdentityPoolDirectory [write] => *
ds:CreateLogSubscription [write] => directory*
ds:CreateMicrosoftAD [write] => *
ds:CreateSnapshot [write] => directory*
ds:CreateTrust [write] => directory*
ds:DeleteConditionalForwarder [write] => directory*
ds:DeleteDirectory [write] => directory*
ds:DeleteLogSubscription [write] => directory*
ds:DeleteSnapshot [write] => directory*
ds:DeleteTrust [write] => directory*
ds:DeregisterCertificate [write] => directory*
ds:DeregisterEventTopic [write] => directory*
ds:DescribeCertificate [read] => directory*
ds:DescribeClientAuthenticationSettings [read] => directory*
ds:DescribeConditionalForwarders [read] => directory*
ds:DescribeDirectories [list] => *
ds:DescribeDomainControllers [read] => directory*
ds:DescribeEventTopics [read] => directory*
ds:DescribeLDAPSSettings [read] => directory*
ds:DescribeRegions [read] => directory*
ds:DescribeSettings [read] => directory*
ds:DescribeSharedDirectories [read] => directory*
ds:DescribeSnapshots [read] => *
ds:DescribeTrusts [read] => *
ds:DisableClientAuthentication [write] => directory*
ds:DisableLDAPS [write] => directory*
ds:DisableRadius [write] => directory*
ds:DisableSso [write] => directory*
ds:EnableClientAuthentication [write] => directory*
ds:EnableLDAPS [write] => directory*
ds:EnableRadius [write] => directory*
ds:EnableSso [write] => directory*
ds:GetAuthorizedApplicationDetails [read] => directory*
ds:GetDirectoryLimits [read] => *
ds:GetSnapshotLimits [read] => directory*
ds:ListAuthorizedApplications [read] => directory*
ds:ListCertificates [list] => directory*
ds:ListIpRoutes [read] => directory*
ds:ListLogSubscriptions [read] => *
ds:ListSchemaExtensions [list] => directory*
ds:ListTagsForResource [read] => directory*
ds:RegisterCertificate [write] => directory*
ds:RegisterEventTopic [write] => directory*
ds:RejectSharedDirectory [write] => directory*
ds:RemoveIpRoutes [write] => directory*
ds:RemoveRegion [write] => directory*
ds:RemoveTagsFromResource [tagging] => *,directory*
ds:ResetUserPassword [write] => directory*
ds:RestoreFromSnapshot [write] => directory*
ds:ShareDirectory [write] => directory*
ds:StartSchemaExtension [write] => directory*
ds:UnauthorizeApplication [write] => directory*
ds:UnshareDirectory [write] => directory*
ds:UpdateConditionalForwarder [write] => directory*
ds:UpdateNumberOfDomainControllers [write] => directory*
ds:UpdateRadius [write] => directory*
ds:UpdateSettings [write] => directory*
ds:UpdateTrust [write] => directory*
ds:VerifyTrust [read] => directory*
dynamodb:BatchGetItem [read] => *,table*
dynamodb:BatchWriteItem [write] => *,table*
dynamodb:ConditionCheckItem [read] => *,table*
dynamodb:CreateBackup [write] => table*
dynamodb:CreateGlobalTable [write] => global-table*,table*
dynamodb:CreateTable [write] => table*
dynamodb:CreateTableReplica [write] => table*
dynamodb:DeleteBackup [write] => backup*
dynamodb:DeleteItem [write] => *,table*
dynamodb:DeleteTable [write] => table*
dynamodb:DeleteTableReplica [write] => table*
dynamodb:DescribeBackup [read] => backup*
dynamodb:DescribeContinuousBackups [read] => table*
dynamodb:DescribeContributorInsights [read] => index,table*
dynamodb:DescribeExport [read] => export*
dynamodb:DescribeGlobalTable [read] => global-table*
dynamodb:DescribeGlobalTableSettings [read] => global-table*
dynamodb:DescribeImport [read] => import*
dynamodb:DescribeKinesisStreamingDestination [read] => table*
dynamodb:DescribeLimits [read] => *
dynamodb:DescribeReservedCapacity [read] => *
dynamodb:DescribeReservedCapacityOfferings [read] => *
dynamodb:DescribeStream [read] => stream*
dynamodb:DescribeTable [read] => table*
dynamodb:DescribeTableReplicaAutoScaling [read] => table*
dynamodb:DescribeTimeToLive [read] => table*
dynamodb:DisableKinesisStreamingDestination [write] => table*
dynamodb:EnableKinesisStreamingDestination [write] => table*
dynamodb:ExportTableToPointInTime [write] => table*
dynamodb:GetItem [read] => *,table*
dynamodb:GetRecords [read] => stream*
dynamodb:GetShardIterator [read] => stream*
dynamodb:ImportTable [write] => table*
dynamodb:ListBackups [list] => *
dynamodb:ListContributorInsights [list] => *
dynamodb:ListExports [list] => *
dynamodb:ListGlobalTables [list] => *
dynamodb:ListImports [list] => *
dynamodb:ListStreams [read] => *
dynamodb:ListTables [list] => *
dynamodb:ListTagsOfResource [read] => table*
dynamodb:PartiQLDelete [write] => *,table*
dynamodb:PartiQLInsert [write] => *,table*
dynamodb:PartiQLSelect [read] => *,index,table*
dynamodb:PartiQLUpdate [write] => *,table*
dynamodb:PurchaseReservedCapacityOfferings [write] => *
dynamodb:PutItem [write] => *,table*
dynamodb:Query [read] => *,index,table*
dynamodb:RestoreTableFromAwsBackup [write] => table*
dynamodb:RestoreTableFromBackup [write] => backup*,table*
dynamodb:RestoreTableToPointInTime [write] => table*
dynamodb:Scan [read] => *,index,table*
dynamodb:StartAwsBackupJob [write] => table*
dynamodb:TagResource [tagging] => table*
dynamodb:UntagResource [tagging] => table*
dynamodb:UpdateContinuousBackups [write] => table*
dynamodb:UpdateContributorInsights [write] => index,table*
dynamodb:UpdateGlobalTable [write] => global-table*,table*
dynamodb:UpdateGlobalTableSettings [write] => global-table*,table*
dynamodb:UpdateItem [write] => *,table*
dynamodb:UpdateTable [write] => table*
dynamodb:UpdateTableReplicaAutoScaling [write] => table*
dynamodb:UpdateTimeToLive [write] => table*
ebs:CompleteSnapshot [write] => *,snapshot*
ebs:GetSnapshotBlock [read] => *,snapshot*
ebs:ListChangedBlocks [read] => *,snapshot*
ebs:ListSnapshotBlocks [read] => *,snapshot*
ebs:PutSnapshotBlock [write] => *,snapshot*
ebs:StartSnapshot [write] => *,snapshot
ec2:AcceptReservedInstancesExchangeQuote [write] => *
ec2:AcceptTransitGatewayMulticastDomainAssociations [write] => *,transit-gateway-attachment,transit-gateway-multicast-domain
ec2:AcceptTransitGatewayPeeringAttachment [write] => *,transit-gateway-attachment*
ec2:AcceptTransitGatewayVpcAttachment [write] => *,transit-gateway-attachment*
ec2:AcceptVpcEndpointConnections [write] => *,vpc-endpoint-service*
ec2:AcceptVpcPeeringConnection [write] => *,vpc*,vpc-peering-connection*
ec2:AdvertiseByoipCidr [write] => *
ec2:AllocateAddress [write] => *,elastic-ip*,ipv4pool-ec2
ec2:AllocateHosts [write] => *,dedicated-host*
ec2:AllocateIpamPoolCidr [write] => *,ipam-pool*
ec2:ApplySecurityGroupsToClientVpnTargetNetwork [write] => *,client-vpn-endpoint*,security-group*,vpc*
ec2:AssignIpv6Addresses [write] => *,network-interface*
ec2:AssignPrivateIpAddresses [write] => *,network-interface*
ec2:AssociateAddress [write] => *,elastic-ip,instance,network-interface
ec2:AssociateClientVpnTargetNetwork [write] => *,client-vpn-endpoint*,subnet*
ec2:AssociateDhcpOptions [write] => *,dhcp-options*,vpc*
ec2:AssociateEnclaveCertificateIamRole [write] => *,certificate*,role*
ec2:AssociateIamInstanceProfile [write] => *,instance*
ec2:AssociateInstanceEventWindow [write] => *,instance-event-window*
ec2:AssociateRouteTable [write] => *,internet-gateway,route-table*,subnet,vpn-gateway
ec2:AssociateSubnetCidrBlock [write] => *,subnet*
ec2:AssociateTransitGatewayMulticastDomain [write] => *,subnet*,transit-gateway-attachment*,transit-gateway-multicast-domain*
ec2:AssociateTransitGatewayPolicyTable [write] => *,transit-gateway-attachment*,transit-gateway-policy-table*
ec2:AssociateTransitGatewayRouteTable [write] => *,transit-gateway-attachment*,transit-gateway-route-table*
ec2:AssociateTrunkInterface [write] => *
ec2:AssociateVpcCidrBlock [write] => *,ipam-pool,ipv6pool-ec2,vpc*
ec2:AttachClassicLinkVpc [write] => *,instance*,security-group*,vpc*
ec2:AttachInternetGateway [write] => *,internet-gateway*,vpc*
ec2:AttachNetworkInterface [write] => *,instance*,network-interface*
ec2:AttachVolume [write] => *,instance*,volume*
ec2:AttachVpnGateway [write] => *,vpc*,vpn-gateway*
ec2:AuthorizeClientVpnIngress [write] => *,client-vpn-endpoint*
ec2:AuthorizeSecurityGroupEgress [write] => *,security-group*,security-group-rule*
ec2:AuthorizeSecurityGroupIngress [write] => *,security-group*,security-group-rule*
ec2:BundleInstance [write] => *
ec2:CancelBundleTask [write] => *
ec2:CancelCapacityReservation [write] => *,capacity-reservation*
ec2:CancelCapacityReservationFleets [write] => *,capacity-reservation-fleet*
ec2:CancelConversionTask [write] => *
ec2:CancelExportTask [write] => *,export-image-task,export-instance-task
ec2:CancelImportTask [write] => *,import-image-task,import-snapshot-task
ec2:CancelReservedInstancesListing [write] => *
ec2:CancelSpotFleetRequests [write] => *,spot-fleet-request*
ec2:CancelSpotInstanceRequests [write] => *,spot-instances-request*
ec2:ConfirmProductInstance [write] => *
ec2:CopyFpgaImage [write] => *,fpga-image*
ec2:CopyImage [write] => *,image*
ec2:CopySnapshot [write] => *,snapshot*
ec2:CreateCapacityReservation [write] => *,capacity-reservation*
ec2:CreateCapacityReservationFleet [write] => *,capacity-reservation-fleet*
ec2:CreateCarrierGateway [write] => *,carrier-gateway*,vpc*
ec2:CreateClientVpnEndpoint [write] => *,client-vpn-endpoint*,security-group,vpc
ec2:CreateClientVpnRoute [write] => *,client-vpn-endpoint*,subnet*
ec2:CreateCoipPoolPermission [write] => *
ec2:CreateCustomerGateway [write] => *,customer-gateway*
ec2:CreateDefaultSubnet [write] => *
ec2:CreateDefaultVpc [write] => *
ec2:CreateDhcpOptions [write] => *,dhcp-options*
ec2:CreateEgressOnlyInternetGateway [write] => *,egress-only-internet-gateway*,vpc*
ec2:CreateFleet [write] => *,fleet*,image,instance*,key-pair,launch-template,network-interface,placement-group,security-group,snapshot,subnet,volume
ec2:CreateFlowLogs [write] => *,network-interface,subnet,vpc,vpc-flow-log*
ec2:CreateFpgaImage [write] => *,fpga-image*
ec2:CreateImage [write] => *,image*,instance*,snapshot*
ec2:CreateInstanceEventWindow [write] => *,instance-event-window*
ec2:CreateInstanceExportTask [write] => *,export-instance-task*,instance*
ec2:CreateInternetGateway [write] => *,internet-gateway*
ec2:CreateIpam [write] => *,ipam*
ec2:CreateIpamPool [write] => *,ipam-pool*,ipam-scope*
ec2:CreateIpamScope [write] => *,ipam*,ipam-scope*
ec2:CreateKeyPair [write] => *,key-pair*
ec2:CreateLaunchTemplate [write] => *,launch-template*
ec2:CreateLaunchTemplateVersion [write] => *,launch-template*
ec2:CreateLocalGatewayRoute [write] => *,local-gateway-route-table*,local-gateway-virtual-interface-group*
ec2:CreateLocalGatewayRouteTablePermission [write] => *,local-gateway-route-table*
ec2:CreateLocalGatewayRouteTableVpcAssociation [write] => *,local-gateway-route-table*,local-gateway-route-table-vpc-association*,vpc*
ec2:CreateManagedPrefixList [write] => *,prefix-list*
ec2:CreateNatGateway [write] => *,elastic-ip,natgateway*,subnet*
ec2:CreateNetworkAcl [write] => *,network-acl*,vpc*
ec2:CreateNetworkAclEntry [write] => *,network-acl*
ec2:CreateNetworkInsightsAccessScope [write] => *,network-insights-access-scope*
ec2:CreateNetworkInsightsPath [write] => *,instance,internet-gateway,network-insights-path*,network-interface,transit-gateway,vpc-endpoint,vpc-peering-connection,vpn-gateway
ec2:CreateNetworkInterface [write] => *,network-interface*,security-group,subnet*
ec2:CreateNetworkInterfacePermission [permissions-management] => *,network-interface*
ec2:CreatePlacementGroup [write] => *,placement-group*
ec2:CreatePublicIpv4Pool [write] => *,network-insights-access-scope*
ec2:CreateReplaceRootVolumeTask [write] => *,instance*,replace-root-volume-task*,snapshot,volume*
ec2:CreateReservedInstancesListing [write] => *
ec2:CreateRestoreImageTask [write] => *,image*
ec2:CreateRoute [write] => *,route-table*
ec2:CreateRouteTable [write] => *,route-table*,vpc*
ec2:CreateSecurityGroup [write] => *,security-group*,vpc
ec2:CreateSnapshot [write] => *,snapshot*,volume*
ec2:CreateSnapshots [write] => *,instance*,snapshot*,volume*
ec2:CreateSpotDatafeedSubscription [write] => *
ec2:CreateStoreImageTask [write] => *,image*
ec2:CreateSubnet [write] => *,subnet*,vpc*
ec2:CreateSubnetCidrReservation [write] => *
ec2:CreateTags [tagging] => *,capacity-reservation,capacity-reservation-fleet,carrier-gateway,client-vpn-endpoint,customer-gateway,dedicated-host,dhcp-options,egress-only-internet-gateway,elastic-gpu,elastic-ip,export-image-task,export-instance-task,fleet,fpga-image,host-reservation,image,import-image-task,import-snapshot-task,instance,instance-event-window,internet-gateway,ipam,ipam-pool,ipam-scope,ipv4pool-ec2,ipv6pool-ec2,key-pair,launch-template,local-gateway,local-gateway-route-table,local-gateway-route-table-virtual-interface-group-association,local-gateway-route-table-vpc-association,local-gateway-virtual-interface,local-gateway-virtual-interface-group,natgateway,network-acl,network-insights-access-scope,network-insights-access-scope-analysis,network-insights-analysis,network-insights-path,network-interface,placement-group,prefix-list,replace-root-volume-task,reserved-instances,route-table,security-group,security-group-rule,snapshot,spot-fleet-request,spot-instances-request,subnet,subnet-cidr-reservation,traffic-mirror-filter,traffic-mirror-session,traffic-mirror-target,transit-gateway,transit-gateway-attachment,transit-gateway-connect-peer,transit-gateway-multicast-domain,transit-gateway-policy-table,transit-gateway-route-table,transit-gateway-route-table-announcement,volume,vpc,vpc-endpoint,vpc-endpoint-service,vpc-flow-log,vpc-peering-connection,vpn-connection,vpn-gateway
ec2:CreateTrafficMirrorFilter [write] => *,traffic-mirror-filter*
ec2:CreateTrafficMirrorFilterRule [write] => *,traffic-mirror-filter*
ec2:CreateTrafficMirrorSession [write] => *,network-interface*,traffic-mirror-filter*,traffic-mirror-session*,traffic-mirror-target*
ec2:CreateTrafficMirrorTarget [write] => *,network-interface,traffic-mirror-target*,vpc-endpoint
ec2:CreateTransitGateway [write] => *,transit-gateway*
ec2:CreateTransitGatewayConnect [write] => *,transit-gateway-attachment*
ec2:CreateTransitGatewayConnectPeer [write] => *,transit-gateway-attachment*,transit-gateway-connect-peer*
ec2:CreateTransitGatewayMulticastDomain [write] => *,transit-gateway*,transit-gateway-multicast-domain*
ec2:CreateTransitGatewayPeeringAttachment [write] => *,transit-gateway*,transit-gateway-attachment*
ec2:CreateTransitGatewayPolicyTable [write] => *,transit-gateway*,transit-gateway-policy-table*
ec2:CreateTransitGatewayPrefixListReference [write] => *,prefix-list*,transit-gateway-attachment,transit-gateway-route-table*
ec2:CreateTransitGatewayRoute [write] => *,transit-gateway-attachment,transit-gateway-route-table*
ec2:CreateTransitGatewayRouteTable [write] => *,transit-gateway*,transit-gateway-route-table*
ec2:CreateTransitGatewayRouteTableAnnouncement [write] => *,transit-gateway-attachment*,transit-gateway-route-table*,transit-gateway-route-table-announcement*
ec2:CreateTransitGatewayVpcAttachment [write] => *,subnet,transit-gateway*,transit-gateway-attachment*,vpc*
ec2:CreateVolume [write] => *,volume*
ec2:CreateVpc [write] => *,ipam-pool,ipv6pool-ec2,vpc*
ec2:CreateVpcEndpoint [write] => *,route-table,security-group,subnet,vpc*,vpc-endpoint*
ec2:CreateVpcEndpointConnectionNotification [write] => *,vpc-endpoint
ec2:CreateVpcEndpointServiceConfiguration [write] => *,vpc-endpoint-service*
ec2:CreateVpcPeeringConnection [write] => *,vpc*,vpc-peering-connection*
ec2:CreateVpnConnection [write] => *,customer-gateway*,transit-gateway,transit-gateway-attachment,vpn-connection*,vpn-gateway
ec2:CreateVpnConnectionRoute [write] => *,vpn-connection*
ec2:CreateVpnGateway [write] => *,vpn-gateway*
ec2:DeleteCarrierGateway [write] => *,carrier-gateway*
ec2:DeleteClientVpnEndpoint [write] => *,client-vpn-endpoint*
ec2:DeleteClientVpnRoute [write] => *,client-vpn-endpoint*,subnet
ec2:DeleteCoipPoolPermission [write] => *
ec2:DeleteCustomerGateway [write] => *,customer-gateway*
ec2:DeleteDhcpOptions [write] => *,dhcp-options*
ec2:DeleteEgressOnlyInternetGateway [write] => *,egress-only-internet-gateway*
ec2:DeleteFleets [write] => *,fleet*
ec2:DeleteFlowLogs [write] => *,vpc-flow-log*
ec2:DeleteFpgaImage [write] => *,fpga-image*
ec2:DeleteInstanceEventWindow [write] => *,instance-event-window*
ec2:DeleteInternetGateway [write] => *,internet-gateway*
ec2:DeleteIpam [write] => *,ipam*
ec2:DeleteIpamPool [write] => *,ipam-pool*
ec2:DeleteIpamScope [write] => *,ipam-scope*
ec2:DeleteKeyPair [write] => *,key-pair
ec2:DeleteLaunchTemplate [write] => *,launch-template*
ec2:DeleteLaunchTemplateVersions [write] => *,launch-template*
ec2:DeleteLocalGatewayRoute [write] => *,local-gateway-route-table*
ec2:DeleteLocalGatewayRouteTablePermission [write] => *,local-gateway-route-table*
ec2:DeleteLocalGatewayRouteTableVpcAssociation [write] => *,local-gateway-route-table-vpc-association*
ec2:DeleteManagedPrefixList [write] => *,prefix-list*
ec2:DeleteNatGateway [write] => *,natgateway*
ec2:DeleteNetworkAcl [write] => *,network-acl*
ec2:DeleteNetworkAclEntry [write] => *,network-acl*
ec2:DeleteNetworkInsightsAccessScope [write] => *,network-insights-access-scope*
ec2:DeleteNetworkInsightsAccessScopeAnalysis [write] => *,network-insights-access-scope-analysis*
ec2:DeleteNetworkInsightsAnalysis [write] => *,network-insights-analysis*
ec2:DeleteNetworkInsightsPath [write] => *,network-insights-path*
ec2:DeleteNetworkInterface [write] => *,network-interface*
ec2:DeleteNetworkInterfacePermission [permissions-management] => *,network-interface
ec2:DeletePlacementGroup [write] => *,placement-group
ec2:DeletePublicIpv4Pool [write] => *,ipv4pool-ec2*
ec2:DeleteQueuedReservedInstances [write] => *
ec2:DeleteResourcePolicy [write] => *,ipam-pool
ec2:DeleteRoute [write] => *,route-table*
ec2:DeleteRouteTable [write] => *,route-table*
ec2:DeleteSecurityGroup [write] => *,security-group*
ec2:DeleteSnapshot [write] => *,snapshot*
ec2:DeleteSpotDatafeedSubscription [write] => *
ec2:DeleteSubnet [write] => *,subnet*
ec2:DeleteSubnetCidrReservation [write] => *
ec2:DeleteTags [tagging] => *,capacity-reservation,capacity-reservation-fleet,carrier-gateway,client-vpn-endpoint,customer-gateway,dedicated-host,dhcp-options,egress-only-internet-gateway,elastic-gpu,elastic-ip,export-image-task,export-instance-task,fleet,fpga-image,host-reservation,image,import-image-task,import-snapshot-task,instance,instance-event-window,internet-gateway,ipam,ipam-pool,ipam-scope,ipv4pool-ec2,ipv6pool-ec2,key-pair,launch-template,local-gateway,local-gateway-route-table,local-gateway-route-table-virtual-interface-group-association,local-gateway-route-table-vpc-association,local-gateway-virtual-interface,local-gateway-virtual-interface-group,natgateway,network-acl,network-insights-access-scope,network-insights-access-scope-analysis,network-insights-analysis,network-insights-path,network-interface,placement-group,prefix-list,replace-root-volume-task,reserved-instances,route-table,security-group,security-group-rule,snapshot,spot-fleet-request,spot-instances-request,subnet,subnet-cidr-reservation,traffic-mirror-filter,traffic-mirror-session,traffic-mirror-target,transit-gateway,transit-gateway-attachment,transit-gateway-connect-peer,transit-gateway-multicast-domain,transit-gateway-policy-table,transit-gateway-route-table,transit-gateway-route-table-announcement,volume,vpc,vpc-endpoint,vpc-endpoint-service,vpc-flow-log,vpc-peering-connection,vpn-connection,vpn-gateway
ec2:DeleteTrafficMirrorFilter [write] => *,traffic-mirror-filter*
ec2:DeleteTrafficMirrorFilterRule [write] => *,traffic-mirror-filter*,traffic-mirror-filter-rule*
ec2:DeleteTrafficMirrorSession [write] => *,traffic-mirror-session*
ec2:DeleteTrafficMirrorTarget [write] => *,traffic-mirror-target*
ec2:DeleteTransitGateway [write] => *,transit-gateway*
ec2:DeleteTransitGatewayConnect [write] => *,transit-gateway-attachment*
ec2:DeleteTransitGatewayConnectPeer [write] => *,transit-gateway-connect-peer*
ec2:DeleteTransitGatewayMulticastDomain [write] => *,transit-gateway-multicast-domain*
ec2:DeleteTransitGatewayPeeringAttachment [write] => *,transit-gateway-attachment*
ec2:DeleteTransitGatewayPolicyTable [write] => *,transit-gateway-policy-table*
ec2:DeleteTransitGatewayPrefixListReference [write] => *,prefix-list*,transit-gateway-route-table*
ec2:DeleteTransitGatewayRoute [write] => *,transit-gateway-route-table*
ec2:DeleteTransitGatewayRouteTable [write] => *,transit-gateway-route-table*
ec2:DeleteTransitGatewayRouteTableAnnouncement [write] => *,transit-gateway-route-table-announcement*
ec2:DeleteTransitGatewayVpcAttachment [write] => *,transit-gateway-attachment*
ec2:DeleteVolume [write] => *,volume*
ec2:DeleteVpc [write] => *,vpc*
ec2:DeleteVpcEndpointConnectionNotifications [write] => *,vpc-endpoint,vpc-endpoint-service
ec2:DeleteVpcEndpointServiceConfigurations [write] => *,vpc-endpoint-service*
ec2:DeleteVpcEndpoints [write] => *,vpc-endpoint*
ec2:DeleteVpcPeeringConnection [write] => *,vpc-peering-connection*
ec2:DeleteVpnConnection [write] => *,vpn-connection*
ec2:DeleteVpnConnectionRoute [write] => *,vpn-connection*
ec2:DeleteVpnGateway [write] => *,vpn-gateway*
ec2:DeprovisionByoipCidr [write] => *
ec2:DeprovisionIpamPoolCidr [write] => *,ipam-pool*
ec2:DeprovisionPublicIpv4PoolCidr [write] => *,ipv4pool-ec2*
ec2:DeregisterImage [write] => *,image*
ec2:DeregisterInstanceEventNotificationAttributes [write] => *
ec2:DeregisterTransitGatewayMulticastGroupMembers [write] => *,network-interface,transit-gateway-multicast-domain
ec2:DeregisterTransitGatewayMulticastGroupSources [write] => *,network-interface,transit-gateway-multicast-domain
ec2:DescribeAccountAttributes [list] => *
ec2:DescribeAddresses [list] => *
ec2:DescribeAddressesAttribute [list] => *,elastic-ip
ec2:DescribeAggregateIdFormat [list] => *
ec2:DescribeAvailabilityZones [list] => *
ec2:DescribeBundleTasks [list] => *
ec2:DescribeByoipCidrs [list] => *
ec2:DescribeCapacityReservationFleets [list] => *
ec2:DescribeCapacityReservations [list] => *
ec2:DescribeCarrierGateways [list] => *
ec2:DescribeClassicLinkInstances [list] => *
ec2:DescribeClientVpnAuthorizationRules [list] => *,client-vpn-endpoint
ec2:DescribeClientVpnConnections [list] => *,client-vpn-endpoint
ec2:DescribeClientVpnEndpoints [list] => *,client-vpn-endpoint
ec2:DescribeClientVpnRoutes [list] => *,client-vpn-endpoint
ec2:DescribeClientVpnTargetNetworks [list] => *,client-vpn-endpoint
ec2:DescribeCoipPools [list] => *
ec2:DescribeConversionTasks [list] => *
ec2:DescribeCustomerGateways [list] => *
ec2:DescribeDhcpOptions [list] => *
ec2:DescribeEgressOnlyInternetGateways [list] => *
ec2:DescribeElasticGpus [list] => *
ec2:DescribeExportImageTasks [list] => *
ec2:DescribeExportTasks [list] => *
ec2:DescribeFastLaunchImages [list] => *,image
ec2:DescribeFastSnapshotRestores [list] => *
ec2:DescribeFleetHistory [list] => *,fleet
ec2:DescribeFleetInstances [list] => *,fleet
ec2:DescribeFleets [list] => *
ec2:DescribeFlowLogs [list] => *
ec2:DescribeFpgaImageAttribute [list] => *,fpga-image*
ec2:DescribeFpgaImages [list] => *
ec2:DescribeHostReservationOfferings [list] => *
ec2:DescribeHostReservations [list] => *
ec2:DescribeHosts [list] => *
ec2:DescribeIamInstanceProfileAssociations [list] => *
ec2:DescribeIdFormat [list] => *
ec2:DescribeIdentityIdFormat [list] => *
ec2:DescribeImageAttribute [list] => *,image
ec2:DescribeImages [list] => *
ec2:DescribeImportImageTasks [list] => *
ec2:DescribeImportSnapshotTasks [list] => *
ec2:DescribeInstanceAttribute [list] => *,instance
ec2:DescribeInstanceCreditSpecifications [list] => *
ec2:DescribeInstanceEventNotificationAttributes [list] => *
ec2:DescribeInstanceEventWindows [list] => *
ec2:DescribeInstanceStatus [list] => *
ec2:DescribeInstanceTypeOfferings [list] => *
ec2:DescribeInstanceTypes [list] => *
ec2:DescribeInstances [list] => *
ec2:DescribeInternetGateways [list] => *
ec2:DescribeIpamPools [list] => *
ec2:DescribeIpamScopes [list] => *
ec2:DescribeIpams [list] => *
ec2:DescribeIpv6Pools [list] => *
ec2:DescribeKeyPairs [list] => *
ec2:DescribeLaunchTemplateVersions [list] => *
ec2:DescribeLaunchTemplates [list] => *
ec2:DescribeLocalGatewayRouteTablePermissions [list] => *
ec2:DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociations [list] => *
ec2:DescribeLocalGatewayRouteTableVpcAssociations [list] => *
ec2:DescribeLocalGatewayRouteTables [list] => *
ec2:DescribeLocalGatewayVirtualInterfaceGroups [list] => *
ec2:DescribeLocalGatewayVirtualInterfaces [list] => *
ec2:DescribeLocalGateways [list] => *
ec2:DescribeManagedPrefixLists [list] => *
ec2:DescribeMovingAddresses [list] => *
ec2:DescribeNatGateways [list] => *
ec2:DescribeNetworkAcls [list] => *
ec2:DescribeNetworkInsightsAccessScopeAnalyses [list] => *
ec2:DescribeNetworkInsightsAccessScopes [list] => *
ec2:DescribeNetworkInsightsAnalyses [list] => *
ec2:DescribeNetworkInsightsPaths [list] => *
ec2:DescribeNetworkInterfaceAttribute [list] => *
ec2:DescribeNetworkInterfacePermissions [list] => *
ec2:DescribeNetworkInterfaces [list] => *
ec2:DescribePlacementGroups [list] => *
ec2:DescribePrefixLists [list] => *
ec2:DescribePrincipalIdFormat [list] => *
ec2:DescribePublicIpv4Pools [list] => *
ec2:DescribeRegions [list] => *
ec2:DescribeReplaceRootVolumeTasks [list] => *
ec2:DescribeReservedInstances [list] => *
ec2:DescribeReservedInstancesListings [list] => *
ec2:DescribeReservedInstancesModifications [list] => *
ec2:DescribeReservedInstancesOfferings [list] => *
ec2:DescribeRouteTables [list] => *
ec2:DescribeScheduledInstanceAvailability [list] => *
ec2:DescribeScheduledInstances [list] => *
ec2:DescribeSecurityGroupReferences [list] => *
ec2:DescribeSecurityGroupRules [list] => *
ec2:DescribeSecurityGroups [list] => *
ec2:DescribeSnapshotAttribute [list] => *,snapshot
ec2:DescribeSnapshotTierStatus [list] => *
ec2:DescribeSnapshots [list] => *
ec2:DescribeSpotDatafeedSubscription [list] => *
ec2:DescribeSpotFleetInstances [list] => *,spot-fleet-request
ec2:DescribeSpotFleetRequestHistory [list] => *,spot-fleet-request
ec2:DescribeSpotFleetRequests [list] => *
ec2:DescribeSpotInstanceRequests [list] => *
ec2:DescribeSpotPriceHistory [list] => *
ec2:DescribeStaleSecurityGroups [list] => *
ec2:DescribeStoreImageTasks [list] => *,image
ec2:DescribeSubnets [list] => *
ec2:DescribeTags [list] => *
ec2:DescribeTrafficMirrorFilters [list] => *
ec2:DescribeTrafficMirrorSessions [list] => *
ec2:DescribeTrafficMirrorTargets [list] => *
ec2:DescribeTransitGatewayAttachments [list] => *
ec2:DescribeTransitGatewayConnectPeers [list] => *
ec2:DescribeTransitGatewayConnects [list] => *
ec2:DescribeTransitGatewayMulticastDomains [list] => *
ec2:DescribeTransitGatewayPeeringAttachments [list] => *
ec2:DescribeTransitGatewayPolicyTables [list] => *
ec2:DescribeTransitGatewayRouteTableAnnouncements [list] => *
ec2:DescribeTransitGatewayRouteTables [list] => *
ec2:DescribeTransitGatewayVpcAttachments [list] => *
ec2:DescribeTransitGateways [list] => *
ec2:DescribeTrunkInterfaceAssociations [list] => *
ec2:DescribeVolumeAttribute [list] => *,volume
ec2:DescribeVolumeStatus [list] => *
ec2:DescribeVolumes [list] => *
ec2:DescribeVolumesModifications [list] => *
ec2:DescribeVpcAttribute [list] => *,vpc*
ec2:DescribeVpcClassicLink [list] => *
ec2:DescribeVpcClassicLinkDnsSupport [list] => *
ec2:DescribeVpcEndpointConnectionNotifications [list] => *
ec2:DescribeVpcEndpointConnections [list] => *
ec2:DescribeVpcEndpointServiceConfigurations [list] => *
ec2:DescribeVpcEndpointServicePermissions [list] => *
ec2:DescribeVpcEndpointServices [list] => *
ec2:DescribeVpcEndpoints [list] => *
ec2:DescribeVpcPeeringConnections [list] => *
ec2:DescribeVpcs [list] => *
ec2:DescribeVpnConnections [list] => *
ec2:DescribeVpnGateways [list] => *
ec2:DetachClassicLinkVpc [write] => *,instance*,vpc*
ec2:DetachInternetGateway [write] => *,internet-gateway*,vpc*
ec2:DetachNetworkInterface [write] => *,instance*,network-interface*
ec2:DetachVolume [write] => *,instance,volume*
ec2:DetachVpnGateway [write] => *,vpc*,vpn-gateway*
ec2:DisableEbsEncryptionByDefault [write] => *
ec2:DisableFastLaunch [write] => *,image
ec2:DisableFastSnapshotRestores [write] => *,snapshot*
ec2:DisableImageDeprecation [write] => *,image*
ec2:DisableIpamOrganizationAdminAccount [write] => *
ec2:DisableSerialConsoleAccess [write] => *
ec2:DisableTransitGatewayRouteTablePropagation [write] => *,transit-gateway-attachment*,transit-gateway-route-table*,transit-gateway-route-table-announcement
ec2:DisableVgwRoutePropagation [write] => *,route-table*,vpn-gateway*
ec2:DisableVpcClassicLink [write] => *,vpc*
ec2:DisableVpcClassicLinkDnsSupport [write] => *,vpc
ec2:DisassociateAddress [write] => *,elastic-ip,network-interface
ec2:DisassociateClientVpnTargetNetwork [write] => *,client-vpn-endpoint*
ec2:DisassociateEnclaveCertificateIamRole [write] => *,certificate*,role*
ec2:DisassociateIamInstanceProfile [write] => *,instance*
ec2:DisassociateInstanceEventWindow [write] => *,instance-event-window*
ec2:DisassociateRouteTable [write] => *,route-table,subnet
ec2:DisassociateSubnetCidrBlock [write] => *,subnet*
ec2:DisassociateTransitGatewayMulticastDomain [write] => *,subnet*,transit-gateway-attachment*,transit-gateway-multicast-domain*
ec2:DisassociateTransitGatewayPolicyTable [write] => *,transit-gateway-attachment*,transit-gateway-policy-table*
ec2:DisassociateTransitGatewayRouteTable [write] => *,transit-gateway-attachment*,transit-gateway-route-table*
ec2:DisassociateTrunkInterface [write] => *
ec2:DisassociateVpcCidrBlock [write] => *,vpc
ec2:EnableEbsEncryptionByDefault [write] => *
ec2:EnableFastLaunch [write] => *,image,launch-template
ec2:EnableFastSnapshotRestores [write] => *,snapshot*
ec2:EnableImageDeprecation [write] => *,image*
ec2:EnableIpamOrganizationAdminAccount [write] => *
ec2:EnableSerialConsoleAccess [write] => *
ec2:EnableTransitGatewayRouteTablePropagation [write] => *,transit-gateway-attachment,transit-gateway-route-table*,transit-gateway-route-table-announcement
ec2:EnableVgwRoutePropagation [write] => *,route-table*,vpn-gateway*
ec2:EnableVolumeIO [write] => *,volume*
ec2:EnableVpcClassicLink [write] => *,vpc*
ec2:EnableVpcClassicLinkDnsSupport [write] => *,vpc
ec2:ExportClientVpnClientCertificateRevocationList [read] => *,client-vpn-endpoint*
ec2:ExportClientVpnClientConfiguration [read] => *,client-vpn-endpoint*
ec2:ExportImage [write] => *,export-image-task*,image*
ec2:ExportTransitGatewayRoutes [write] => *
ec2:GetAssociatedEnclaveCertificateIamRoles [read] => *,certificate*
ec2:GetAssociatedIpv6PoolCidrs [read] => *
ec2:GetCapacityReservationUsage [read] => *,capacity-reservation*
ec2:GetCoipPoolUsage [read] => *
ec2:GetConsoleOutput [read] => *,instance*
ec2:GetConsoleScreenshot [read] => *,instance
ec2:GetDefaultCreditSpecification [read] => *
ec2:GetEbsDefaultKmsKeyId [read] => *
ec2:GetEbsEncryptionByDefault [read] => *
ec2:GetFlowLogsIntegrationTemplate [read] => *,vpc-flow-log*
ec2:GetGroupsForCapacityReservation [list] => *,capacity-reservation*
ec2:GetHostReservationPurchasePreview [read] => *
ec2:GetInstanceTypesFromInstanceRequirements [list] => *
ec2:GetInstanceUefiData [read] => *,instance*
ec2:GetIpamAddressHistory [read] => *,ipam-scope*
ec2:GetIpamPoolAllocations [list] => *,ipam-pool*
ec2:GetIpamPoolCidrs [read] => *,ipam-pool*
ec2:GetIpamResourceCidrs [read] => *,ipam-pool*,ipam-scope*
ec2:GetLaunchTemplateData [read] => *,instance*
ec2:GetManagedPrefixListAssociations [read] => *,prefix-list*
ec2:GetManagedPrefixListEntries [read] => *,prefix-list*
ec2:GetNetworkInsightsAccessScopeAnalysisFindings [read] => *
ec2:GetNetworkInsightsAccessScopeContent [read] => *
ec2:GetPasswordData [read] => *,instance*
ec2:GetReservedInstancesExchangeQuote [read] => *
ec2:GetResourcePolicy [read] => *,ipam-pool
ec2:GetSerialConsoleAccessStatus [read] => *
ec2:GetSpotPlacementScores [read] => *
ec2:GetSubnetCidrReservations [read] => *
ec2:GetTransitGatewayAttachmentPropagations [list] => *
ec2:GetTransitGatewayMulticastDomainAssociations [list] => *
ec2:GetTransitGatewayPolicyTableAssociations [list] => *,transit-gateway-policy-table*
ec2:GetTransitGatewayPolicyTableEntries [list] => *,transit-gateway-policy-table*
ec2:GetTransitGatewayPrefixListReferences [list] => *
ec2:GetTransitGatewayRouteTableAssociations [list] => *
ec2:GetTransitGatewayRouteTablePropagations [list] => *
ec2:GetVpnConnectionDeviceSampleConfiguration [list] => *,vpn-connection*,vpn-connection-device-type
ec2:GetVpnConnectionDeviceTypes [list] => *
ec2:ImportClientVpnClientCertificateRevocationList [write] => *,client-vpn-endpoint*
ec2:ImportImage [write] => *,image*,import-image-task*,snapshot
ec2:ImportInstance [write] => *,instance*,security-group,subnet,volume*
ec2:ImportKeyPair [write] => *,key-pair*
ec2:ImportSnapshot [write] => *,import-snapshot-task*,snapshot*
ec2:ImportVolume [write] => *,volume*
ec2:ListImagesInRecycleBin [list] => *,image
ec2:ListSnapshotsInRecycleBin [list] => *,snapshot
ec2:ModifyAddressAttribute [write] => *,elastic-ip*
ec2:ModifyAvailabilityZoneGroup [write] => *
ec2:ModifyCapacityReservation [write] => *,capacity-reservation*
ec2:ModifyCapacityReservationFleet [write] => *,capacity-reservation-fleet*
ec2:ModifyClientVpnEndpoint [write] => *,client-vpn-endpoint*,security-group,vpc
ec2:ModifyDefaultCreditSpecification [write] => *
ec2:ModifyEbsDefaultKmsKeyId [write] => *
ec2:ModifyFleet [write] => *,fleet*,image,key-pair,launch-template,network-interface,security-group,snapshot,subnet
ec2:ModifyFpgaImageAttribute [write] => *,fpga-image*
ec2:ModifyHosts [write] => *,dedicated-host*
ec2:ModifyIdFormat [write] => *
ec2:ModifyIdentityIdFormat [write] => *
ec2:ModifyImageAttribute [write] => *,image*
ec2:ModifyInstanceAttribute [write] => *,instance*,security-group,volume
ec2:ModifyInstanceCapacityReservationAttributes [write] => *,capacity-reservation,instance*
ec2:ModifyInstanceCreditSpecification [write] => *,instance*
ec2:ModifyInstanceEventStartTime [write] => *,instance*
ec2:ModifyInstanceEventWindow [write] => *,instance-event-window*
ec2:ModifyInstanceMaintenanceOptions [write] => *,instance*
ec2:ModifyInstanceMetadataOptions [write] => *,instance*
ec2:ModifyInstancePlacement [write] => *,dedicated-host,instance*,placement-group
ec2:ModifyIpam [write] => *,ipam*
ec2:ModifyIpamPool [write] => *,ipam-pool*
ec2:ModifyIpamResourceCidr [write] => *,ipam-scope*
ec2:ModifyIpamScope [write] => *,ipam-scope*
ec2:ModifyLaunchTemplate [write] => *,launch-template*
ec2:ModifyLocalGatewayRoute [write] => *,local-gateway-route-table*,network-interface
ec2:ModifyManagedPrefixList [write] => *,prefix-list*
ec2:ModifyNetworkInterfaceAttribute [write] => *,instance,network-interface*,security-group
ec2:ModifyPrivateDnsNameOptions [write] => *,instance*
ec2:ModifyReservedInstances [write] => *,reserved-instances*
ec2:ModifySecurityGroupRules [write] => *,prefix-list,security-group*,security-group-rule
ec2:ModifySnapshotAttribute [permissions-management] => *,snapshot*
ec2:ModifySnapshotTier [write] => *,snapshot*
ec2:ModifySpotFleetRequest [write] => *,launch-template,spot-fleet-request*,subnet
ec2:ModifySubnetAttribute [write] => *,subnet*
ec2:ModifyTrafficMirrorFilterNetworkServices [write] => *,traffic-mirror-filter*
ec2:ModifyTrafficMirrorFilterRule [write] => *,traffic-mirror-filter*,traffic-mirror-filter-rule*
ec2:ModifyTrafficMirrorSession [write] => *,traffic-mirror-filter,traffic-mirror-session*,traffic-mirror-target
ec2:ModifyTransitGateway [write] => *,transit-gateway*,transit-gateway-route-table
ec2:ModifyTransitGatewayPrefixListReference [write] => *,prefix-list*,transit-gateway-attachment,transit-gateway-route-table*
ec2:ModifyTransitGatewayVpcAttachment [write] => *,subnet,transit-gateway-attachment*
ec2:ModifyVolume [write] => *,volume*
ec2:ModifyVolumeAttribute [write] => *,volume*
ec2:ModifyVpcAttribute [write] => *,vpc*
ec2:ModifyVpcEndpoint [write] => *,route-table,security-group,subnet,vpc-endpoint*
ec2:ModifyVpcEndpointConnectionNotification [write] => *,vpc-endpoint*,vpc-endpoint-service*
ec2:ModifyVpcEndpointServiceConfiguration [write] => *,vpc-endpoint-service*
ec2:ModifyVpcEndpointServicePayerResponsibility [write] => *,vpc-endpoint-service*
ec2:ModifyVpcEndpointServicePermissions [permissions-management] => *,vpc-endpoint-service*
ec2:ModifyVpcPeeringConnectionOptions [write] => *,vpc-peering-connection*
ec2:ModifyVpcTenancy [write] => *,vpc*
ec2:ModifyVpnConnection [write] => *,vpn-connection*
ec2:ModifyVpnConnectionOptions [write] => *,vpn-connection*
ec2:ModifyVpnTunnelCertificate [write] => *,vpn-connection*
ec2:ModifyVpnTunnelOptions [write] => *,vpn-connection*
ec2:MonitorInstances [write] => *,instance*
ec2:MoveAddressToVpc [write] => *
ec2:MoveByoipCidrToIpam [write] => *,ipam-pool
ec2:ProvisionByoipCidr [write] => *
ec2:ProvisionIpamPoolCidr [write] => *,ipam-pool*
ec2:ProvisionPublicIpv4PoolCidr [write] => *,ipam-pool*,ipv4pool-ec2
ec2:PurchaseHostReservation [write] => *,dedicated-host*
ec2:PurchaseReservedInstancesOffering [write] => *
ec2:PurchaseScheduledInstances [write] => *
ec2:PutResourcePolicy [write] => *,ipam-pool
ec2:RebootInstances [write] => *,instance*
ec2:RegisterImage [write] => *,image*,snapshot
ec2:RegisterInstanceEventNotificationAttributes [write] => *
ec2:RegisterTransitGatewayMulticastGroupMembers [write] => *,network-interface*,transit-gateway-multicast-domain*
ec2:RegisterTransitGatewayMulticastGroupSources [write] => *,network-interface*,transit-gateway-multicast-domain*
ec2:RejectTransitGatewayMulticastDomainAssociations [write] => *,transit-gateway-attachment,transit-gateway-multicast-domain
ec2:RejectTransitGatewayPeeringAttachment [write] => *,transit-gateway-attachment*
ec2:RejectTransitGatewayVpcAttachment [write] => *,transit-gateway-attachment*
ec2:RejectVpcEndpointConnections [write] => *,vpc-endpoint-service*
ec2:RejectVpcPeeringConnection [write] => *,vpc-peering-connection*
ec2:ReleaseAddress [write] => *,elastic-ip
ec2:ReleaseHosts [write] => *,dedicated-host*
ec2:ReleaseIpamPoolAllocation [write] => *,ipam-pool*
ec2:ReplaceIamInstanceProfileAssociation [write] => *,instance*
ec2:ReplaceNetworkAclAssociation [write] => *,network-acl*,subnet*
ec2:ReplaceNetworkAclEntry [write] => *,network-acl*
ec2:ReplaceRoute [write] => *,route-table*
ec2:ReplaceRouteTableAssociation [write] => *,route-table*,subnet
ec2:ReplaceTransitGatewayRoute [write] => *,transit-gateway-attachment,transit-gateway-route-table*
ec2:ReportInstanceStatus [write] => *
ec2:RequestSpotFleet [write] => *,image,key-pair,launch-template,placement-group,security-group,snapshot,spot-fleet-request*,subnet
ec2:RequestSpotInstances [write] => *,image,key-pair,network-interface,placement-group,security-group,snapshot,spot-instances-request*,subnet
ec2:ResetAddressAttribute [write] => *,elastic-ip*
ec2:ResetEbsDefaultKmsKeyId [write] => *
ec2:ResetFpgaImageAttribute [write] => *,fpga-image*
ec2:ResetImageAttribute [write] => *,image*
ec2:ResetInstanceAttribute [write] => *,instance*
ec2:ResetNetworkInterfaceAttribute [write] => *,network-interface*
ec2:ResetSnapshotAttribute [permissions-management] => *,snapshot*
ec2:RestoreAddressToClassic [write] => *
ec2:RestoreImageFromRecycleBin [write] => *,image*
ec2:RestoreManagedPrefixListVersion [write] => *,prefix-list*
ec2:RestoreSnapshotFromRecycleBin [write] => *,snapshot*
ec2:RestoreSnapshotTier [write] => *,snapshot*
ec2:RevokeClientVpnIngress [write] => *,client-vpn-endpoint*
ec2:RevokeSecurityGroupEgress [write] => *,security-group*
ec2:RevokeSecurityGroupIngress [write] => *,security-group*
ec2:RunInstances [write] => *,capacity-reservation,elastic-gpu,elastic-inference,group,image*,instance*,key-pair,launch-template,license-configuration,network-interface*,placement-group,security-group*,snapshot,subnet*,volume*
ec2:RunScheduledInstances [write] => *,image*,key-pair,network-interface,placement-group,security-group,snapshot,subnet
ec2:SearchLocalGatewayRoutes [list] => *,local-gateway-route-table
ec2:SearchTransitGatewayMulticastGroups [list] => *
ec2:SearchTransitGatewayRoutes [list] => *,transit-gateway-route-table*
ec2:SendDiagnosticInterrupt [write] => *,instance*
ec2:SendSpotInstanceInterruptions [write] => *,instance*
ec2:StartInstances [write] => *,instance*,license-configuration
ec2:StartNetworkInsightsAccessScopeAnalysis [write] => *,network-insights-access-scope,network-insights-access-scope-analysis*
ec2:StartNetworkInsightsAnalysis [write] => *,network-insights-analysis*,network-insights-path*
ec2:StartVpcEndpointServicePrivateDnsVerification [write] => *,vpc-endpoint-service*
ec2:StopInstances [write] => *,instance*
ec2:TerminateClientVpnConnections [write] => *,client-vpn-endpoint*
ec2:TerminateInstances [write] => *,instance*
ec2:UnassignIpv6Addresses [write] => *,network-interface*
ec2:UnassignPrivateIpAddresses [write] => *,network-interface*
ec2:UnmonitorInstances [write] => *,instance*
ec2:UpdateSecurityGroupRuleDescriptionsEgress [write] => *,security-group*
ec2:UpdateSecurityGroupRuleDescriptionsIngress [write] => *,security-group*
ec2:WithdrawByoipCidr [write] => *
ec2-instance-connect:SendSSHPublicKey [write] => *,instance*
ec2-instance-connect:SendSerialConsoleSSHPublicKey [write] => instance*
ec2messages:AcknowledgeMessage [write] => *
ec2messages:DeleteMessage [write] => *
ec2messages:FailMessage [write] => *
ec2messages:GetEndpoint [read] => *
ec2messages:GetMessages [read] => *
ec2messages:SendReply [write] => *
ecr:BatchCheckLayerAvailability [read] => repository*
ecr:BatchDeleteImage [write] => repository*
ecr:BatchGetImage [read] => repository*
ecr:BatchGetRepositoryScanningConfiguration [read] => repository*
ecr:BatchImportUpstreamImage [write] => *
ecr:CompleteLayerUpload [write] => repository*
ecr:CreatePullThroughCacheRule [write] => *
ecr:CreateRepository [write] => *
ecr:DeleteLifecyclePolicy [write] => repository*
ecr:DeletePullThroughCacheRule [write] => *
ecr:DeleteRegistryPolicy [permissions-management] => *
ecr:DeleteRepository [write] => repository*
ecr:DeleteRepositoryPolicy [permissions-management] => repository*
ecr:DescribeImageReplicationStatus [read] => repository*
ecr:DescribeImageScanFindings [read] => repository*
ecr:DescribeImages [list] => repository*
ecr:DescribePullThroughCacheRules [list] => *
ecr:DescribeRegistry [read] => *
ecr:DescribeRepositories [read] => repository
ecr:GetAuthorizationToken [read] => *
ecr:GetDownloadUrlForLayer [read] => repository*
ecr:GetLifecyclePolicy [read] => repository*
ecr:GetLifecyclePolicyPreview [read] => repository*
ecr:GetRegistryPolicy [read] => *
ecr:GetRegistryScanningConfiguration [read] => *
ecr:GetRepositoryPolicy [read] => repository*
ecr:InitiateLayerUpload [write] => repository*
ecr:ListImages [list] => repository*
ecr:ListTagsForResource [read] => *,repository*
ecr:PutImage [write] => repository*
ecr:PutImageScanningConfiguration [write] => repository*
ecr:PutImageTagMutability [write] => repository*
ecr:PutLifecyclePolicy [write] => repository*
ecr:PutRegistryPolicy [permissions-management] => *
ecr:PutRegistryScanningConfiguration [write] => *
ecr:PutReplicationConfiguration [write] => *
ecr:ReplicateImage [write] => repository*
ecr:SetRepositoryPolicy [permissions-management] => repository*
ecr:StartImageScan [write] => repository*
ecr:StartLifecyclePolicyPreview [write] => repository*
ecr:TagResource [tagging] => *,repository*
ecr:UntagResource [tagging] => *,repository*
ecr:UploadLayerPart [write] => repository*
ecr-public:BatchCheckLayerAvailability [read] => repository*
ecr-public:BatchDeleteImage [write] => repository*
ecr-public:CompleteLayerUpload [write] => repository*
ecr-public:CreateRepository [write] => *,repository*
ecr-public:DeleteRepository [write] => repository*
ecr-public:DeleteRepositoryPolicy [write] => repository*
ecr-public:DescribeImageTags [list] => repository*
ecr-public:DescribeImages [read] => repository*
ecr-public:DescribeRegistries [list] => registry*
ecr-public:DescribeRepositories [list] => repository
ecr-public:GetAuthorizationToken [read] => *
ecr-public:GetRegistryCatalogData [read] => registry*
ecr-public:GetRepositoryCatalogData [read] => repository*
ecr-public:GetRepositoryPolicy [read] => repository*
ecr-public:InitiateLayerUpload [write] => repository*
ecr-public:ListTagsForResource [read] => repository*
ecr-public:PutImage [write] => repository*
ecr-public:PutRegistryCatalogData [write] => registry*
ecr-public:PutRepositoryCatalogData [write] => repository*
ecr-public:SetRepositoryPolicy [permissions-management] => repository*
ecr-public:TagResource [tagging] => *,repository*
ecr-public:UntagResource [tagging] => *,repository*
ecr-public:UploadLayerPart [write] => repository*
ecs:CreateCapacityProvider [write] => *
ecs:CreateCluster [write] => *
ecs:CreateService [write] => *,service*
ecs:CreateTaskSet [write] => *
ecs:DeleteAccountSetting [write] => *
ecs:DeleteAttributes [write] => *,container-instance*
ecs:DeleteCapacityProvider [write] => capacity-provider*
ecs:DeleteCluster [write] => cluster*
ecs:DeleteService [write] => *,service*
ecs:DeleteTaskSet [write] => *,task-set*
ecs:DeregisterContainerInstance [write] => cluster*
ecs:DeregisterTaskDefinition [write] => *
ecs:DescribeCapacityProviders [read] => capacity-provider*
ecs:DescribeClusters [read] => cluster*
ecs:DescribeContainerInstances [read] => *,container-instance*
ecs:DescribeServices [read] => *,service*
ecs:DescribeTaskDefinition [read] => *
ecs:DescribeTaskSets [read] => *,task-set*
ecs:DescribeTasks [read] => *,task*
ecs:DiscoverPollEndpoint [write] => *
ecs:ExecuteCommand [write] => *,cluster,task
ecs:ListAccountSettings [read] => *
ecs:ListAttributes [list] => cluster*
ecs:ListClusters [list] => *
ecs:ListContainerInstances [list] => cluster*
ecs:ListServices [list] => *
ecs:ListTagsForResource [read] => cluster,container-instance,task,task-definition
ecs:ListTaskDefinitionFamilies [list] => *
ecs:ListTaskDefinitions [list] => *
ecs:ListTasks [list] => *,container-instance*
ecs:Poll [write] => *,container-instance*
ecs:PutAccountSetting [write] => *
ecs:PutAccountSettingDefault [write] => *
ecs:PutAttributes [write] => *,container-instance*
ecs:PutClusterCapacityProviders [write] => *,capacity-provider*
ecs:RegisterContainerInstance [write] => *,cluster*
ecs:RegisterTaskDefinition [write] => *
ecs:RunTask [write] => *,task-definition*
ecs:StartTask [write] => *,task-definition*
ecs:StartTelemetrySession [write] => *,container-instance*
ecs:StopTask [write] => *,task*
ecs:SubmitAttachmentStateChanges [write] => cluster*
ecs:SubmitContainerStateChange [write] => cluster*
ecs:SubmitTaskStateChange [write] => cluster*
ecs:TagResource [tagging] => *,cluster,container-instance,service,task,task-definition
ecs:UntagResource [tagging] => *,cluster,container-instance,service,task,task-definition
ecs:UpdateCapacityProvider [write] => capacity-provider*
ecs:UpdateCluster [write] => cluster*
ecs:UpdateClusterSettings [write] => cluster*
ecs:UpdateContainerAgent [write] => *,container-instance*
ecs:UpdateContainerInstancesState [write] => *,container-instance*
ecs:UpdateService [write] => *,service*
ecs:UpdateServicePrimaryTaskSet [write] => *,service*
ecs:UpdateTaskSet [write] => *,task-set*
eks:AccessKubernetesApi [read] => cluster*
eks:AssociateEncryptionConfig [write] => cluster*
eks:AssociateIdentityProviderConfig [write] => *,cluster*
eks:CreateAddon [write] => *,cluster*
eks:CreateCluster [write] => *
eks:CreateFargateProfile [write] => *,cluster*
eks:CreateNodegroup [write] => *,cluster*
eks:DeleteAddon [write] => addon*
eks:DeleteCluster [write] => cluster*
eks:DeleteFargateProfile [write] => fargateprofile*
eks:DeleteNodegroup [write] => nodegroup*
eks:DeregisterCluster [write] => cluster*
eks:DescribeAddon [read] => addon*
eks:DescribeAddonVersions [read] => *
eks:DescribeCluster [read] => cluster*
eks:DescribeFargateProfile [read] => fargateprofile*
eks:DescribeIdentityProviderConfig [read] => identityproviderconfig*
eks:DescribeNodegroup [read] => nodegroup*
eks:DescribeUpdate [read] => addon,cluster*,nodegroup
eks:DisassociateIdentityProviderConfig [write] => identityproviderconfig*
eks:ListAddons [list] => cluster*
eks:ListClusters [list] => *
eks:ListFargateProfiles [list] => cluster*
eks:ListIdentityProviderConfigs [list] => cluster*
eks:ListNodegroups [list] => cluster*
eks:ListTagsForResource [read] => addon,cluster,fargateprofile,identityproviderconfig,nodegroup
eks:ListUpdates [list] => addon,cluster*,nodegroup
eks:RegisterCluster [write] => *
eks:TagResource [tagging] => *,addon,cluster,fargateprofile,identityproviderconfig,nodegroup
eks:UntagResource [tagging] => *,addon,cluster,fargateprofile,identityproviderconfig,nodegroup
eks:UpdateAddon [write] => addon*
eks:UpdateClusterConfig [write] => cluster*
eks:UpdateClusterVersion [write] => cluster*
eks:UpdateNodegroupConfig [write] => nodegroup*
eks:UpdateNodegroupVersion [write] => nodegroup*
elastic-inference:Connect [write] => accelerator*
elastic-inference:DescribeAcceleratorOfferings [list] => *
elastic-inference:DescribeAcceleratorTypes [list] => *
elastic-inference:DescribeAccelerators [list] => *
elastic-inference:ListTagsForResource [read] => *
elastic-inference:TagResource [tagging] => *
elastic-inference:UntagResource [tagging] => *
elasticache:AddTagsToResource [tagging] => *,cluster,parametergroup,replicationgroup,reserved-instance,securitygroup,snapshot,subnetgroup,user,usergroup
elasticache:AuthorizeCacheSecurityGroupIngress [write] => *,securitygroup*
elasticache:BatchApplyUpdateAction [write] => *,cluster,replicationgroup
elasticache:BatchStopUpdateAction [write] => *,cluster,replicationgroup
elasticache:CompleteMigration [write] => *,cluster,replicationgroup
elasticache:CopySnapshot [write] => *,snapshot*
elasticache:CreateCacheCluster [write] => *,cluster,parametergroup*,replicationgroup,securitygroup,snapshot,subnetgroup
elasticache:CreateCacheParameterGroup [write] => *,parametergroup*
elasticache:CreateCacheSecurityGroup [write] => *,securitygroup*
elasticache:CreateCacheSubnetGroup [write] => *,subnetgroup*
elasticache:CreateGlobalReplicationGroup [write] => *,globalreplicationgroup*,replicationgroup*
elasticache:CreateReplicationGroup [write] => *,cluster,globalreplicationgroup,parametergroup*,replicationgroup,securitygroup,snapshot,subnetgroup,usergroup
elasticache:CreateSnapshot [write] => *,cluster,replicationgroup,snapshot*
elasticache:CreateUser [write] => *,user*
elasticache:CreateUserGroup [write] => *,user*,usergroup*
elasticache:DecreaseNodeGroupsInGlobalReplicationGroup [write] => *,globalreplicationgroup*
elasticache:DecreaseReplicaCount [write] => *,replicationgroup*
elasticache:DeleteCacheCluster [write] => cluster*,snapshot
elasticache:DeleteCacheParameterGroup [write] => *,parametergroup*
elasticache:DeleteCacheSecurityGroup [write] => *,securitygroup*
elasticache:DeleteCacheSubnetGroup [write] => *,subnetgroup*
elasticache:DeleteGlobalReplicationGroup [write] => globalreplicationgroup*
elasticache:DeleteReplicationGroup [write] => replicationgroup*,snapshot
elasticache:DeleteSnapshot [write] => *,snapshot*
elasticache:DeleteUser [write] => *,user*
elasticache:DeleteUserGroup [write] => *,usergroup*
elasticache:DescribeCacheClusters [list] => *,cluster*
elasticache:DescribeCacheEngineVersions [list] => *
elasticache:DescribeCacheParameterGroups [list] => *,parametergroup*
elasticache:DescribeCacheParameters [list] => *,parametergroup*
elasticache:DescribeCacheSecurityGroups [list] => *,securitygroup*
elasticache:DescribeCacheSubnetGroups [list] => *,subnetgroup*
elasticache:DescribeEngineDefaultParameters [list] => *
elasticache:DescribeEvents [list] => *
elasticache:DescribeGlobalReplicationGroups [list] => globalreplicationgroup*
elasticache:DescribeReplicationGroups [list] => *,replicationgroup*
elasticache:DescribeReservedCacheNodes [list] => *,reserved-instance*
elasticache:DescribeReservedCacheNodesOfferings [list] => *
elasticache:DescribeServiceUpdates [list] => *
elasticache:DescribeSnapshots [list] => *,snapshot*
elasticache:DescribeUpdateActions [list] => *,cluster,replicationgroup
elasticache:DescribeUserGroups [list] => *,usergroup*
elasticache:DescribeUsers [list] => *,user*
elasticache:DisassociateGlobalReplicationGroup [write] => globalreplicationgroup*
elasticache:FailoverGlobalReplicationGroup [write] => globalreplicationgroup*
elasticache:IncreaseNodeGroupsInGlobalReplicationGroup [write] => *,globalreplicationgroup*
elasticache:IncreaseReplicaCount [write] => *,replicationgroup*
elasticache:ListAllowedNodeTypeModifications [list] => *,cluster,replicationgroup
elasticache:ListTagsForResource [read] => *,cluster,parametergroup,replicationgroup,reserved-instance,securitygroup,snapshot,subnetgroup,user,usergroup
elasticache:ModifyCacheCluster [write] => *,cluster*,parametergroup,securitygroup
elasticache:ModifyCacheParameterGroup [write] => *,parametergroup*
elasticache:ModifyCacheSubnetGroup [write] => *,subnetgroup*
elasticache:ModifyGlobalReplicationGroup [write] => *,globalreplicationgroup*
elasticache:ModifyReplicationGroup [write] => *,parametergroup,replicationgroup*,securitygroup,usergroup
elasticache:ModifyReplicationGroupShardConfiguration [write] => *,replicationgroup*
elasticache:ModifyUser [write] => *,user*
elasticache:ModifyUserGroup [write] => *,user*,usergroup*
elasticache:PurchaseReservedCacheNodesOffering [write] => *,reserved-instance*
elasticache:RebalanceSlotsInGlobalReplicationGroup [write] => globalreplicationgroup*
elasticache:RebootCacheCluster [write] => *,cluster*
elasticache:RemoveTagsFromResource [tagging] => *,cluster,parametergroup,replicationgroup,reserved-instance,securitygroup,snapshot,subnetgroup,user,usergroup
elasticache:ResetCacheParameterGroup [write] => *,parametergroup*
elasticache:RevokeCacheSecurityGroupIngress [write] => *,securitygroup*
elasticache:StartMigration [write] => *,replicationgroup*
elasticache:TestFailover [write] => *,replicationgroup*
elasticbeanstalk:AbortEnvironmentUpdate [write] => environment*
elasticbeanstalk:AddTags [tagging] => *,application,applicationversion,configurationtemplate,environment,platform
elasticbeanstalk:ApplyEnvironmentManagedAction [write] => environment*
elasticbeanstalk:AssociateEnvironmentOperationsRole [write] => environment*
elasticbeanstalk:CheckDNSAvailability [read] => *
elasticbeanstalk:ComposeEnvironments [write] => application*,applicationversion*
elasticbeanstalk:CreateApplication [write] => *,application*
elasticbeanstalk:CreateApplicationVersion [write] => *,application*,applicationversion*
elasticbeanstalk:CreateConfigurationTemplate [write] => *,configurationtemplate*
elasticbeanstalk:CreateEnvironment [write] => *,environment*
elasticbeanstalk:CreatePlatformVersion [write] => *,platform*
elasticbeanstalk:CreateStorageLocation [write] => *
elasticbeanstalk:DeleteApplication [write] => application*
elasticbeanstalk:DeleteApplicationVersion [write] => applicationversion*
elasticbeanstalk:DeleteConfigurationTemplate [write] => configurationtemplate*
elasticbeanstalk:DeleteEnvironmentConfiguration [write] => environment*
elasticbeanstalk:DeletePlatformVersion [write] => platform*
elasticbeanstalk:DescribeAccountAttributes [read] => *
elasticbeanstalk:DescribeApplicationVersions [list] => applicationversion
elasticbeanstalk:DescribeApplications [list] => application
elasticbeanstalk:DescribeConfigurationOptions [read] => configurationtemplate,environment,solutionstack
elasticbeanstalk:DescribeConfigurationSettings [read] => configurationtemplate,environment
elasticbeanstalk:DescribeEnvironmentHealth [read] => environment
elasticbeanstalk:DescribeEnvironmentManagedActionHistory [read] => environment
elasticbeanstalk:DescribeEnvironmentManagedActions [read] => environment
elasticbeanstalk:DescribeEnvironmentResources [read] => environment
elasticbeanstalk:DescribeEnvironments [list] => environment
elasticbeanstalk:DescribeEvents [read] => application,applicationversion,configurationtemplate,environment
elasticbeanstalk:DescribeInstancesHealth [read] => environment
elasticbeanstalk:DescribePlatformVersion [read] => platform
elasticbeanstalk:DisassociateEnvironmentOperationsRole [write] => environment*
elasticbeanstalk:ListAvailableSolutionStacks [list] => solutionstack
elasticbeanstalk:ListPlatformBranches [list] => *
elasticbeanstalk:ListPlatformVersions [list] => platform
elasticbeanstalk:ListTagsForResource [read] => application,applicationversion,configurationtemplate,environment,platform
elasticbeanstalk:PutInstanceStatistics [write] => application*,environment*
elasticbeanstalk:RebuildEnvironment [write] => environment*
elasticbeanstalk:RemoveTags [tagging] => *,application,applicationversion,configurationtemplate,environment,platform
elasticbeanstalk:RequestEnvironmentInfo [read] => environment*
elasticbeanstalk:RestartAppServer [write] => environment*
elasticbeanstalk:RetrieveEnvironmentInfo [read] => environment*
elasticbeanstalk:SwapEnvironmentCNAMEs [write] => *,environment*
elasticbeanstalk:TerminateEnvironment [write] => environment*
elasticbeanstalk:UpdateApplication [write] => application*
elasticbeanstalk:UpdateApplicationResourceLifecycle [write] => application*
elasticbeanstalk:UpdateApplicationVersion [write] => applicationversion*
elasticbeanstalk:UpdateConfigurationTemplate [write] => *,configurationtemplate*
elasticbeanstalk:UpdateEnvironment [write] => *,environment*
elasticbeanstalk:UpdateTagsForResource [tagging] => *,application,applicationversion,configurationtemplate,environment,platform
elasticbeanstalk:ValidateConfigurationSettings [read] => configurationtemplate,environment
elasticfilesystem:Backup [write] => file-system*
elasticfilesystem:ClientMount [read] => *,file-system*
elasticfilesystem:ClientRootAccess [write] => *,file-system*
elasticfilesystem:ClientWrite [write] => *,file-system*
elasticfilesystem:CreateAccessPoint [write] => *,file-system*
elasticfilesystem:CreateFileSystem [write] => *
elasticfilesystem:CreateMountTarget [write] => file-system*
elasticfilesystem:CreateReplicationConfiguration [write] => file-system*
elasticfilesystem:CreateTags [tagging] => *,file-system*
elasticfilesystem:DeleteAccessPoint [write] => access-point*
elasticfilesystem:DeleteFileSystem [write] => file-system*
elasticfilesystem:DeleteFileSystemPolicy [permissions-management] => file-system*
elasticfilesystem:DeleteMountTarget [write] => file-system*
elasticfilesystem:DeleteReplicationConfiguration [write] => file-system*
elasticfilesystem:DeleteTags [tagging] => *,file-system*
elasticfilesystem:DescribeAccessPoints [list] => access-point,file-system
elasticfilesystem:DescribeAccountPreferences [list] => *
elasticfilesystem:DescribeBackupPolicy [read] => file-system*
elasticfilesystem:DescribeFileSystemPolicy [read] => file-system
elasticfilesystem:DescribeFileSystems [list] => file-system
elasticfilesystem:DescribeLifecycleConfiguration [read] => file-system*
elasticfilesystem:DescribeMountTargetSecurityGroups [read] => *
elasticfilesystem:DescribeMountTargets [read] => access-point,file-system*
elasticfilesystem:DescribeReplicationConfigurations [list] => file-system
elasticfilesystem:DescribeTags [read] => file-system*
elasticfilesystem:ListTagsForResource [read] => access-point,file-system
elasticfilesystem:ModifyMountTargetSecurityGroups [write] => *
elasticfilesystem:PutAccountPreferences [write] => *
elasticfilesystem:PutBackupPolicy [write] => file-system*
elasticfilesystem:PutFileSystemPolicy [permissions-management] => file-system*
elasticfilesystem:PutLifecycleConfiguration [write] => file-system*
elasticfilesystem:Restore [write] => file-system*
elasticfilesystem:TagResource [tagging] => *,access-point,file-system
elasticfilesystem:UntagResource [tagging] => *,access-point,file-system
elasticfilesystem:UpdateFileSystem [write] => file-system*
elasticloadbalancing:AddTags [tagging] => *,loadbalancer*
elasticloadbalancing:ApplySecurityGroupsToLoadBalancer [write] => loadbalancer*
elasticloadbalancing:AttachLoadBalancerToSubnets [write] => loadbalancer*
elasticloadbalancing:ConfigureHealthCheck [write] => loadbalancer*
elasticloadbalancing:CreateAppCookieStickinessPolicy [write] => loadbalancer*
elasticloadbalancing:CreateLBCookieStickinessPolicy [write] => loadbalancer*
elasticloadbalancing:CreateLoadBalancer [write] => *,loadbalancer
elasticloadbalancing:CreateLoadBalancerListeners [write] => loadbalancer*
elasticloadbalancing:CreateLoadBalancerPolicy [write] => loadbalancer*
elasticloadbalancing:DeleteLoadBalancer [write] => loadbalancer*
elasticloadbalancing:DeleteLoadBalancerListeners [write] => loadbalancer*
elasticloadbalancing:DeleteLoadBalancerPolicy [write] => loadbalancer*
elasticloadbalancing:DeregisterInstancesFromLoadBalancer [write] => loadbalancer*
elasticloadbalancing:DescribeInstanceHealth [read] => *
elasticloadbalancing:DescribeLoadBalancerAttributes [read] => *
elasticloadbalancing:DescribeLoadBalancerPolicies [read] => *
elasticloadbalancing:DescribeLoadBalancerPolicyTypes [read] => *
elasticloadbalancing:DescribeLoadBalancers [list] => *
elasticloadbalancing:DescribeTags [read] => *
elasticloadbalancing:DetachLoadBalancerFromSubnets [write] => loadbalancer*
elasticloadbalancing:DisableAvailabilityZonesForLoadBalancer [write] => loadbalancer*
elasticloadbalancing:EnableAvailabilityZonesForLoadBalancer [write] => loadbalancer*
elasticloadbalancing:ModifyLoadBalancerAttributes [write] => loadbalancer*
elasticloadbalancing:RegisterInstancesWithLoadBalancer [write] => loadbalancer*
elasticloadbalancing:RemoveTags [tagging] => *,loadbalancer*
elasticloadbalancing:SetLoadBalancerListenerSSLCertificate [write] => loadbalancer*
elasticloadbalancing:SetLoadBalancerPoliciesForBackendServer [write] => loadbalancer*
elasticloadbalancing:SetLoadBalancerPoliciesOfListener [write] => loadbalancer*
elasticloadbalancing:AddListenerCertificates [write] => listener/app*,listener/net*
elasticloadbalancing:AddTags [tagging] => *,listener-rule/app,listener-rule/net,listener/app,listener/net,loadbalancer/app/,loadbalancer/net/,targetgroup
elasticloadbalancing:CreateListener [write] => *,loadbalancer/app/,loadbalancer/net/
elasticloadbalancing:CreateLoadBalancer [write] => *,loadbalancer/app/,loadbalancer/net/
elasticloadbalancing:CreateRule [write] => *,listener/app*,listener/net*
elasticloadbalancing:CreateTargetGroup [write] => *,targetgroup*
elasticloadbalancing:DeleteListener [write] => listener/app*,listener/net*
elasticloadbalancing:DeleteLoadBalancer [write] => loadbalancer/app/,loadbalancer/net/
elasticloadbalancing:DeleteRule [write] => listener-rule/app*,listener-rule/net*
elasticloadbalancing:DeleteTargetGroup [write] => targetgroup*
elasticloadbalancing:DeregisterTargets [write] => targetgroup*
elasticloadbalancing:DescribeAccountLimits [read] => *
elasticloadbalancing:DescribeListenerCertificates [read] => *
elasticloadbalancing:DescribeListeners [read] => *
elasticloadbalancing:DescribeLoadBalancerAttributes [read] => *
elasticloadbalancing:DescribeLoadBalancers [read] => *
elasticloadbalancing:DescribeRules [read] => *
elasticloadbalancing:DescribeSSLPolicies [read] => *
elasticloadbalancing:DescribeTags [read] => *
elasticloadbalancing:DescribeTargetGroupAttributes [read] => *
elasticloadbalancing:DescribeTargetGroups [read] => *
elasticloadbalancing:DescribeTargetHealth [read] => *
elasticloadbalancing:ModifyListener [write] => listener/app*,listener/net*
elasticloadbalancing:ModifyLoadBalancerAttributes [write] => loadbalancer/app/,loadbalancer/net/
elasticloadbalancing:ModifyRule [write] => listener-rule/app*,listener-rule/net*
elasticloadbalancing:ModifyTargetGroup [write] => targetgroup*
elasticloadbalancing:ModifyTargetGroupAttributes [write] => targetgroup*
elasticloadbalancing:RegisterTargets [write] => targetgroup*
elasticloadbalancing:RemoveListenerCertificates [write] => listener/app*,listener/net*
elasticloadbalancing:RemoveTags [tagging] => *,listener-rule/app,listener-rule/net,listener/app,listener/net,loadbalancer/app/,loadbalancer/net/,targetgroup
elasticloadbalancing:SetIpAddressType [write] => loadbalancer/app/,loadbalancer/net/
elasticloadbalancing:SetRulePriorities [write] => listener-rule/app*,listener-rule/net*
elasticloadbalancing:SetSecurityGroups [write] => loadbalancer/app/,loadbalancer/net/
elasticloadbalancing:SetSubnets [write] => loadbalancer/app/,loadbalancer/net/
elasticloadbalancing:SetWebAcl [write] => *
elasticmapreduce:AddInstanceFleet [write] => cluster*
elasticmapreduce:AddInstanceGroups [write] => cluster*
elasticmapreduce:AddJobFlowSteps [write] => *,cluster*
elasticmapreduce:AddTags [tagging] => *,cluster,editor,notebook-execution,studio
elasticmapreduce:AttachEditor [write] => editor*
elasticmapreduce:CancelSteps [write] => cluster*
elasticmapreduce:CreateEditor [write] => *,cluster*
elasticmapreduce:CreatePersistentAppUI [write] => cluster*
elasticmapreduce:CreateRepository [write] => *
elasticmapreduce:CreateSecurityConfiguration [write] => *
elasticmapreduce:CreateStudio [write] => *
elasticmapreduce:CreateStudioPresignedUrl [write] => studio*
elasticmapreduce:CreateStudioSessionMapping [write] => studio*
elasticmapreduce:DeleteEditor [write] => editor*
elasticmapreduce:DeleteRepository [write] => *
elasticmapreduce:DeleteSecurityConfiguration [write] => *
elasticmapreduce:DeleteStudio [write] => studio*
elasticmapreduce:DeleteStudioSessionMapping [write] => studio*
elasticmapreduce:DeleteWorkspaceAccess [permissions-management] => editor*
elasticmapreduce:DescribeCluster [read] => cluster*
elasticmapreduce:DescribeEditor [read] => editor*
elasticmapreduce:DescribeJobFlows [read] => cluster*
elasticmapreduce:DescribeNotebookExecution [read] => notebook-execution*
elasticmapreduce:DescribePersistentAppUI [read] => cluster*
elasticmapreduce:DescribeReleaseLabel [read] => *
elasticmapreduce:DescribeRepository [read] => *
elasticmapreduce:DescribeSecurityConfiguration [read] => *
elasticmapreduce:DescribeStep [read] => cluster*
elasticmapreduce:DescribeStudio [read] => studio*
elasticmapreduce:DetachEditor [write] => editor*
elasticmapreduce:GetAutoTerminationPolicy [read] => cluster*
elasticmapreduce:GetBlockPublicAccessConfiguration [read] => *
elasticmapreduce:GetManagedScalingPolicy [read] => cluster*
elasticmapreduce:GetOnClusterAppUIPresignedURL [write] => cluster*
elasticmapreduce:GetPersistentAppUIPresignedURL [write] => cluster*
elasticmapreduce:GetStudioSessionMapping [read] => studio*
elasticmapreduce:LinkRepository [write] => *
elasticmapreduce:ListBootstrapActions [read] => cluster*
elasticmapreduce:ListClusters [list] => *
elasticmapreduce:ListEditors [list] => *
elasticmapreduce:ListInstanceFleets [read] => cluster*
elasticmapreduce:ListInstanceGroups [read] => cluster*
elasticmapreduce:ListInstances [read] => cluster*
elasticmapreduce:ListNotebookExecutions [list] => *
elasticmapreduce:ListReleaseLabels [list] => *
elasticmapreduce:ListRepositories [list] => *
elasticmapreduce:ListSecurityConfigurations [list] => *
elasticmapreduce:ListSteps [read] => cluster*
elasticmapreduce:ListStudioSessionMappings [list] => *
elasticmapreduce:ListStudios [list] => *
elasticmapreduce:ListWorkspaceAccessIdentities [list] => editor*
elasticmapreduce:ModifyCluster [write] => cluster*
elasticmapreduce:ModifyInstanceFleet [write] => cluster*
elasticmapreduce:ModifyInstanceGroups [write] => cluster
elasticmapreduce:OpenEditorInConsole [write] => cluster*,editor*
elasticmapreduce:PutAutoScalingPolicy [write] => cluster*
elasticmapreduce:PutAutoTerminationPolicy [write] => cluster*
elasticmapreduce:PutBlockPublicAccessConfiguration [permissions-management] => *
elasticmapreduce:PutManagedScalingPolicy [write] => cluster*
elasticmapreduce:PutWorkspaceAccess [permissions-management] => editor*
elasticmapreduce:RemoveAutoScalingPolicy [write] => cluster*
elasticmapreduce:RemoveAutoTerminationPolicy [write] => cluster*
elasticmapreduce:RemoveManagedScalingPolicy [write] => cluster*
elasticmapreduce:RemoveTags [tagging] => *,cluster,editor,notebook-execution,studio
elasticmapreduce:RunJobFlow [write] => *
elasticmapreduce:SetTerminationProtection [write] => cluster*
elasticmapreduce:StartEditor [write] => cluster*,editor*
elasticmapreduce:StartNotebookExecution [write] => *,cluster*,editor*
elasticmapreduce:StopEditor [write] => editor*
elasticmapreduce:StopNotebookExecution [write] => notebook-execution*
elasticmapreduce:TerminateJobFlows [write] => cluster*
elasticmapreduce:UnlinkRepository [write] => *
elasticmapreduce:UpdateEditor [write] => editor*
elasticmapreduce:UpdateRepository [write] => *
elasticmapreduce:UpdateStudio [write] => studio*
elasticmapreduce:UpdateStudioSessionMapping [write] => studio*
elasticmapreduce:ViewEventsFromAllClustersInConsole [list] => *
elastictranscoder:CancelJob [write] => job*
elastictranscoder:CreateJob [write] => pipeline*,preset*
elastictranscoder:CreatePipeline [write] => *
elastictranscoder:CreatePreset [write] => *
elastictranscoder:DeletePipeline [write] => pipeline*
elastictranscoder:DeletePreset [write] => preset*
elastictranscoder:ListJobsByPipeline [list] => pipeline*
elastictranscoder:ListJobsByStatus [list] => *
elastictranscoder:ListPipelines [list] => *
elastictranscoder:ListPresets [list] => *
elastictranscoder:ReadJob [read] => job*
elastictranscoder:ReadPipeline [read] => pipeline*
elastictranscoder:ReadPreset [read] => preset*
elastictranscoder:TestRole [write] => *
elastictranscoder:UpdatePipeline [write] => pipeline*
elastictranscoder:UpdatePipelineNotifications [write] => pipeline*
elastictranscoder:UpdatePipelineStatus [write] => pipeline*
elemental-activations:CompleteAccountRegistration [read] => *
elemental-activations:CompleteFileUpload [read] => *
elemental-activations:DownloadSoftware [read] => *
elemental-activations:GenerateLicenses [read] => *
elemental-activations:GetActivation [read] => activation*
elemental-activations:ListTagsForResource [read] => activation
elemental-activations:StartAccountRegistration [read] => *
elemental-activations:StartFileUpload [read] => *
elemental-activations:TagResource [tagging] => *,activation
elemental-activations:UntagResource [tagging] => *,activation
elemental-appliances-software:CreateQuote [tagging] => *,quote*
elemental-appliances-software:GetQuote [read] => quote*
elemental-appliances-software:ListQuotes [list] => *
elemental-appliances-software:ListTagsForResource [read] => quote
elemental-appliances-software:TagResource [tagging] => *,quote
elemental-appliances-software:UntagResource [tagging] => *,quote
elemental-appliances-software:UpdateQuote [write] => quote*
elemental-support-cases:CheckCasePermission [write] => *
elemental-support-cases:CreateCase [write] => *
elemental-support-cases:GetCase [read] => *
elemental-support-cases:GetCases [read] => *
elemental-support-cases:UpdateCase [write] => *
elemental-support-content:Query [read] => *
emr-containers:CancelJobRun [write] => jobRun*
emr-containers:CreateManagedEndpoint [write] => *,virtualCluster*
emr-containers:CreateVirtualCluster [write] => *
emr-containers:DeleteManagedEndpoint [write] => managedEndpoint*
emr-containers:DeleteVirtualCluster [write] => virtualCluster*
emr-containers:DescribeJobRun [read] => jobRun*
emr-containers:DescribeManagedEndpoint [read] => managedEndpoint*
emr-containers:DescribeVirtualCluster [read] => virtualCluster*
emr-containers:ListJobRuns [list] => virtualCluster*
emr-containers:ListManagedEndpoints [list] => virtualCluster*
emr-containers:ListTagsForResource [list] => jobRun,managedEndpoint,virtualCluster
emr-containers:ListVirtualClusters [list] => *
emr-containers:StartJobRun [write] => *,virtualCluster*
emr-containers:TagResource [tagging] => *,jobRun,managedEndpoint,virtualCluster
emr-containers:UntagResource [tagging] => *,jobRun,managedEndpoint,virtualCluster
emr-serverless:CancelJobRun [write] => jobRun*
emr-serverless:CreateApplication [write] => *
emr-serverless:DeleteApplication [write] => application*
emr-serverless:GetApplication [read] => application*
emr-serverless:GetJobRun [read] => jobRun*
emr-serverless:ListApplications [list] => *
emr-serverless:ListJobRuns [list] => application*
emr-serverless:ListTagsForResource [read] => application,jobRun
emr-serverless:StartApplication [write] => application*
emr-serverless:StartJobRun [write] => *,application*
emr-serverless:StopApplication [write] => application*
emr-serverless:TagResource [tagging] => *,application,jobRun
emr-serverless:UntagResource [tagging] => *,application,jobRun
emr-serverless:UpdateApplication [write] => application*
es:AcceptInboundConnection [write] => *
es:AcceptInboundCrossClusterSearchConnection [write] => *
es:AddTags [tagging] => *,domain*
es:AssociatePackage [write] => domain*
es:CancelElasticsearchServiceSoftwareUpdate [write] => domain*
es:CancelServiceSoftwareUpdate [write] => domain*
es:CreateDomain [write] => *,domain
es:CreateElasticsearchDomain [write] => *,domain
es:CreateElasticsearchServiceRole [write] => *
es:CreateOutboundConnection [write] => domain*
es:CreateOutboundCrossClusterSearchConnection [write] => domain*
es:CreatePackage [write] => *
es:CreateServiceRole [write] => *
es:DeleteDomain [write] => domain*
es:DeleteElasticsearchDomain [write] => domain*
es:DeleteElasticsearchServiceRole [write] => *
es:DeleteInboundConnection [write] => *
es:DeleteInboundCrossClusterSearchConnection [write] => *
es:DeleteOutboundConnection [write] => *
es:DeleteOutboundCrossClusterSearchConnection [write] => *
es:DeletePackage [write] => *
es:DescribeDomain [read] => domain*
es:DescribeDomainAutoTunes [read] => domain*
es:DescribeDomainChangeProgress [read] => domain*
es:DescribeDomainConfig [read] => domain*
es:DescribeDomains [list] => domain*
es:DescribeElasticsearchDomain [read] => domain*
es:DescribeElasticsearchDomainConfig [read] => domain*
es:DescribeElasticsearchDomains [list] => domain*
es:DescribeElasticsearchInstanceTypeLimits [list] => *
es:DescribeInboundConnections [list] => *
es:DescribeInboundCrossClusterSearchConnections [list] => *
es:DescribeInstanceTypeLimits [list] => *
es:DescribeOutboundConnections [list] => *
es:DescribeOutboundCrossClusterSearchConnections [list] => *
es:DescribePackages [read] => *
es:DescribeReservedElasticsearchInstanceOfferings [list] => *
es:DescribeReservedElasticsearchInstances [list] => *
es:DescribeReservedInstanceOfferings [list] => *
es:DescribeReservedInstances [list] => *
es:DissociatePackage [write] => domain*
es:ESCrossClusterGet [read] => domain
es:ESHttpDelete [write] => domain
es:ESHttpGet [read] => domain
es:ESHttpHead [read] => domain
es:ESHttpPatch [write] => domain
es:ESHttpPost [write] => domain
es:ESHttpPut [write] => domain
es:GetCompatibleElasticsearchVersions [list] => domain*
es:GetCompatibleVersions [list] => domain*
es:GetPackageVersionHistory [read] => *
es:GetUpgradeHistory [read] => domain*
es:GetUpgradeStatus [read] => domain*
es:ListDomainNames [list] => *
es:ListDomainsForPackage [list] => *
es:ListElasticsearchInstanceTypeDetails [list] => *
es:ListElasticsearchInstanceTypes [list] => *
es:ListElasticsearchVersions [list] => *
es:ListInstanceTypeDetails [list] => *
es:ListPackagesForDomain [list] => domain*
es:ListTags [read] => domain*
es:ListVersions [list] => *
es:PurchaseReservedElasticsearchInstanceOffering [write] => *
es:PurchaseReservedInstanceOffering [write] => *
es:RejectInboundConnection [write] => *
es:RejectInboundCrossClusterSearchConnection [write] => *
es:RemoveTags [tagging] => *,domain*
es:StartElasticsearchServiceSoftwareUpdate [write] => domain*
es:StartServiceSoftwareUpdate [write] => domain*
es:UpdateDomainConfig [write] => domain*
es:UpdateElasticsearchDomainConfig [write] => domain*
es:UpdatePackage [write] => *
es:UpgradeDomain [write] => domain*
es:UpgradeElasticsearchDomain [write] => domain*
events:ActivateEventSource [write] => event-source*
events:CancelReplay [write] => replay*
events:CreateApiDestination [write] => api-destination*,connection*
events:CreateArchive [write] => archive*,event-bus*
events:CreateConnection [write] => connection*
events:CreateEndpoint [write] => *,endpoint*
events:CreateEventBus [write] => *,event-bus*
events:CreatePartnerEventSource [write] => event-source*
events:DeactivateEventSource [write] => event-source*
events:DeauthorizeConnection [write] => connection*
events:DeleteApiDestination [write] => api-destination*
events:DeleteArchive [write] => archive*
events:DeleteConnection [write] => connection*
events:DeleteEndpoint [write] => endpoint*
events:DeleteEventBus [write] => event-bus*
events:DeletePartnerEventSource [write] => event-source*
events:DeleteRule [write] => *,rule-on-custom-event-bus,rule-on-default-event-bus
events:DescribeApiDestination [read] => api-destination*,connection*
events:DescribeArchive [read] => archive*
events:DescribeConnection [read] => connection*
events:DescribeEndpoint [read] => endpoint*
events:DescribeEventBus [read] => event-bus
events:DescribeEventSource [read] => event-source*
events:DescribePartnerEventSource [read] => event-source*
events:DescribeReplay [read] => replay*
events:DescribeRule [read] => *,rule-on-custom-event-bus,rule-on-default-event-bus
events:DisableRule [write] => *,rule-on-custom-event-bus,rule-on-default-event-bus
events:EnableRule [write] => *,rule-on-custom-event-bus,rule-on-default-event-bus
events:InvokeApiDestination [write] => api-destination*
events:ListApiDestinations [list] => *
events:ListArchives [list] => *
events:ListConnections [list] => *
events:ListEndpoints [list] => *
events:ListEventBuses [list] => *
events:ListEventSources [list] => *
events:ListPartnerEventSourceAccounts [list] => event-source*
events:ListPartnerEventSources [list] => *
events:ListReplays [list] => *
events:ListRuleNamesByTarget [list] => *
events:ListRules [list] => *
events:ListTagsForResource [list] => *,event-bus,rule-on-custom-event-bus,rule-on-default-event-bus
events:ListTargetsByRule [list] => *,rule-on-custom-event-bus,rule-on-default-event-bus
events:PutEvents [write] => *,event-bus*
events:PutPartnerEvents [write] => *
events:PutPermission [permissions-management] => *
events:PutRule [write] => *,rule-on-custom-event-bus,rule-on-default-event-bus
events:PutTargets [write] => *,rule-on-custom-event-bus,rule-on-default-event-bus
events:RemovePermission [permissions-management] => *
events:RemoveTargets [write] => *,rule-on-custom-event-bus,rule-on-default-event-bus
events:StartReplay [write] => archive*
events:TagResource [tagging] => *,event-bus,rule-on-custom-event-bus,rule-on-default-event-bus
events:TestEventPattern [read] => *
events:UntagResource [tagging] => *,event-bus,rule-on-custom-event-bus,rule-on-default-event-bus
events:UpdateApiDestination [write] => api-destination*
events:UpdateArchive [write] => archive*
events:UpdateConnection [write] => connection*
events:UpdateEndpoint [write] => *,endpoint*
evidently:BatchEvaluateFeature [write] => Feature*
evidently:CreateExperiment [write] => *
evidently:CreateFeature [write] => *
evidently:CreateLaunch [write] => *
evidently:CreateProject [write] => *
evidently:CreateSegment [write] => *
evidently:DeleteExperiment [write] => Experiment*
evidently:DeleteFeature [write] => Feature*
evidently:DeleteLaunch [write] => Launch*
evidently:DeleteProject [write] => Project*
evidently:DeleteSegment [write] => Segment*
evidently:EvaluateFeature [write] => Feature*
evidently:GetExperiment [read] => Experiment*
evidently:GetExperimentResults [read] => Experiment*
evidently:GetFeature [read] => Feature*
evidently:GetLaunch [read] => Launch*
evidently:GetProject [read] => Project*
evidently:GetSegment [read] => Segment*
evidently:ListExperiments [read] => *
evidently:ListFeatures [read] => *
evidently:ListLaunches [read] => *
evidently:ListProjects [read] => *
evidently:ListSegmentReferences [read] => *
evidently:ListSegments [read] => *
evidently:ListTagsForResource [read] => *
evidently:PutProjectEvents [write] => Project*
evidently:StartExperiment [write] => Experiment*
evidently:StartLaunch [write] => Launch*
evidently:StopExperiment [write] => Experiment*
evidently:StopLaunch [write] => Launch*
evidently:TagResource [tagging] => *,Experiment,Feature,Launch,Project,Segment
evidently:TestSegmentPattern [read] => *
evidently:UntagResource [tagging] => *,Experiment,Feature,Launch,Project,Segment
evidently:UpdateExperiment [write] => Experiment*
evidently:UpdateFeature [write] => Feature*
evidently:UpdateLaunch [write] => Launch*
evidently:UpdateProject [write] => Project*
evidently:UpdateProjectDataDelivery [write] => Project*
execute-api:InvalidateCache [write] => execute-api-general*
execute-api:Invoke [write] => execute-api-general*
execute-api:ManageConnections [write] => execute-api-general*
finspace:CreateEnvironment [write] => *,environment*
finspace:CreateUser [write] => *,environment*,user*
finspace:DeleteEnvironment [write] => environment*
finspace:GetEnvironment [read] => environment*
finspace:GetLoadSampleDataSetGroupIntoEnvironmentStatus [read] => environment*
finspace:GetUser [read] => environment*,user*
finspace:ListEnvironments [list] => environment*
finspace:ListTagsForResource [read] => environment*
finspace:ListUsers [list] => environment*,user*
finspace:LoadSampleDataSetGroupIntoEnvironment [write] => environment*
finspace:ResetUserPassword [write] => environment*,user*
finspace:TagResource [tagging] => environment*
finspace:UntagResource [tagging] => environment*
finspace:UpdateEnvironment [write] => environment*
finspace:UpdateUser [write] => environment*,user*
firehose:CreateDeliveryStream [write] => *,deliverystream*
firehose:DeleteDeliveryStream [write] => deliverystream*
firehose:DescribeDeliveryStream [read] => deliverystream*
firehose:ListDeliveryStreams [list] => *
firehose:ListTagsForDeliveryStream [list] => deliverystream*
firehose:PutRecord [write] => deliverystream*
firehose:PutRecordBatch [write] => deliverystream*
firehose:StartDeliveryStreamEncryption [write] => deliverystream*
firehose:StopDeliveryStreamEncryption [write] => deliverystream*
firehose:TagDeliveryStream [tagging] => *,deliverystream*
firehose:UntagDeliveryStream [tagging] => *,deliverystream*
firehose:UpdateDestination [write] => deliverystream*
fis:CreateExperimentTemplate [write] => *,action*,experiment-template*
fis:DeleteExperimentTemplate [write] => experiment-template*
fis:GetAction [read] => *,action*
fis:GetExperiment [read] => *,experiment*
fis:GetExperimentTemplate [read] => *,experiment-template*
fis:GetTargetResourceType [read] => *
fis:InjectApiInternalError [write] => *,experiment*
fis:InjectApiThrottleError [write] => *,experiment*
fis:InjectApiUnavailableError [write] => *,experiment*
fis:ListActions [list] => *
fis:ListExperimentTemplates [list] => *
fis:ListExperiments [list] => *
fis:ListTagsForResource [read] => action,experiment,experiment-template
fis:ListTargetResourceTypes [list] => *
fis:StartExperiment [write] => *,experiment*,experiment-template*
fis:StopExperiment [write] => experiment*
fis:TagResource [tagging] => *,action,experiment,experiment-template
fis:UntagResource [tagging] => *,action,experiment,experiment-template
fis:UpdateExperimentTemplate [write] => *,action,experiment-template*
fms:AssociateAdminAccount [write] => *
fms:AssociateThirdPartyFirewall [write] => *
fms:DeleteAppsList [write] => applications-list*
fms:DeleteNotificationChannel [write] => *
fms:DeletePolicy [write] => *,policy*
fms:DeleteProtocolsList [write] => protocols-list*
fms:DisassociateAdminAccount [write] => *
fms:DisassociateThirdPartyFirewall [write] => *
fms:GetAdminAccount [read] => *
fms:GetAppsList [read] => applications-list*
fms:GetComplianceDetail [read] => policy*
fms:GetNotificationChannel [read] => *
fms:GetPolicy [read] => policy*
fms:GetProtectionStatus [read] => policy*
fms:GetProtocolsList [read] => protocols-list*
fms:GetThirdPartyFirewallAssociationStatus [read] => *
fms:GetViolationDetails [read] => policy*
fms:ListAppsLists [list] => *
fms:ListComplianceStatus [list] => policy*
fms:ListMemberAccounts [list] => *
fms:ListPolicies [list] => *
fms:ListProtocolsLists [list] => *
fms:ListTagsForResource [read] => policy*
fms:ListThirdPartyFirewallFirewallPolicies [list] => *
fms:PutAppsList [write] => *,applications-list*
fms:PutNotificationChannel [write] => *
fms:PutPolicy [write] => *,policy*
fms:PutProtocolsList [write] => *,protocols-list*
fms:TagResource [tagging] => *,policy*
fms:UntagResource [tagging] => *,policy*
forecast:CreateAutoPredictor [write] => *
forecast:CreateDataset [write] => *,dataset*
forecast:CreateDatasetGroup [write] => *,datasetGroup*
forecast:CreateDatasetImportJob [write] => *,datasetImportJob*
forecast:CreateExplainability [write] => *,forecast*
forecast:CreateExplainabilityExport [write] => *,explainability*
forecast:CreateForecast [write] => *,predictor*
forecast:CreateForecastEndpoint [write] => *,predictor*
forecast:CreateForecastExportJob [write] => *,forecast*
forecast:CreateMonitor [write] => *,predictor*
forecast:CreatePredictor [write] => *,datasetGroup*
forecast:CreatePredictorBacktestExportJob [write] => *,predictor*
forecast:CreateWhatIfAnalysis [write] => *,forecast*
forecast:CreateWhatIfForecast [write] => *,whatIfAnalysis*
forecast:CreateWhatIfForecastExport [write] => *,whatIfForecast*
forecast:DeleteDataset [write] => dataset*
forecast:DeleteDatasetGroup [write] => datasetGroup*
forecast:DeleteDatasetImportJob [write] => datasetImportJob*
forecast:DeleteExplainability [write] => explainability*
forecast:DeleteExplainabilityExport [write] => explainabilityExport*
forecast:DeleteForecast [write] => forecast*
forecast:DeleteForecastEndpoint [write] => endpoint*
forecast:DeleteForecastExportJob [write] => forecastExport*
forecast:DeleteMonitor [write] => monitor*
forecast:DeletePredictor [write] => predictor*
forecast:DeletePredictorBacktestExportJob [write] => predictorBacktestExportJob*
forecast:DeleteResourceTree [write] => dataset*,datasetGroup*,datasetImportJob*,endpoint*,explainability*,explainabilityExport*,forecast*,forecastExport*,monitor*,predictor*,predictorBacktestExportJob*,whatIfAnalysis*,whatIfForecast*,whatIfForecastExport*
forecast:DeleteWhatIfAnalysis [write] => whatIfAnalysis*
forecast:DeleteWhatIfForecast [write] => whatIfForecast*
forecast:DeleteWhatIfForecastExport [write] => whatIfForecastExport*
forecast:DescribeAutoPredictor [read] => predictor*
forecast:DescribeDataset [read] => dataset*
forecast:DescribeDatasetGroup [read] => datasetGroup*
forecast:DescribeDatasetImportJob [read] => datasetImportJob*
forecast:DescribeExplainability [read] => explainability*
forecast:DescribeExplainabilityExport [read] => explainabilityExport*
forecast:DescribeForecast [read] => forecast*
forecast:DescribeForecastEndpoint [read] => endpoint*
forecast:DescribeForecastExportJob [read] => forecastExport*
forecast:DescribeMonitor [read] => monitor*
forecast:DescribePredictor [read] => predictor*
forecast:DescribePredictorBacktestExportJob [read] => predictorBacktestExportJob*
forecast:DescribeWhatIfAnalysis [read] => whatIfAnalysis*
forecast:DescribeWhatIfForecast [read] => whatIfForecast*
forecast:DescribeWhatIfForecastExport [read] => whatIfForecastExport*
forecast:GetAccuracyMetrics [read] => predictor*
forecast:GetRecentForecastContext [read] => endpoint*
forecast:InvokeForecastEndpoint [read] => endpoint*
forecast:ListDatasetGroups [read] => *
forecast:ListDatasetImportJobs [read] => *
forecast:ListDatasets [read] => *
forecast:ListExplainabilities [read] => *
forecast:ListExplainabilityExports [read] => *
forecast:ListForecastExportJobs [read] => *
forecast:ListForecasts [read] => *
forecast:ListMonitorEvaluations [read] => monitor*
forecast:ListMonitors [read] => *
forecast:ListPredictorBacktestExportJobs [read] => *
forecast:ListPredictors [read] => *
forecast:ListTagsForResource [read] => dataset,datasetGroup,datasetImportJob,endpoint,explainability,explainabilityExport,forecast,forecastExport,monitor,predictor,predictorBacktestExportJob,whatIfAnalysis,whatIfForecast,whatIfForecastExport
forecast:ListWhatIfAnalyses [read] => *
forecast:ListWhatIfForecastExports [read] => *
forecast:ListWhatIfForecasts [read] => *
forecast:QueryForecast [read] => forecast*
forecast:QueryWhatIfForecast [read] => whatIfForecast*
forecast:ResumeResource [write] => *,monitor*
forecast:StopResource [write] => *,datasetImportJob*,endpoint*,explainability*,explainabilityExport*,forecast*,forecastExport*,monitor*,predictor*,predictorBacktestExportJob*,whatIfAnalysis*,whatIfForecast*,whatIfForecastExport*
forecast:TagResource [tagging] => *,dataset,datasetGroup,datasetImportJob,endpoint,explainability,explainabilityExport,forecast,forecastExport,monitor,predictor,predictorBacktestExportJob,whatIfAnalysis,whatIfForecast,whatIfForecastExport
forecast:UntagResource [tagging] => *,dataset,datasetGroup,datasetImportJob,endpoint,explainability,explainabilityExport,forecast,forecastExport,monitor,predictor,predictorBacktestExportJob,whatIfAnalysis,whatIfForecast,whatIfForecastExport
forecast:UpdateDatasetGroup [write] => dataset*,datasetGroup*
frauddetector:BatchCreateVariable [write] => *
frauddetector:BatchGetVariable [list] => variable*
frauddetector:CancelBatchImportJob [write] => batch-import*
frauddetector:CancelBatchPredictionJob [write] => batch-prediction*
frauddetector:CreateBatchImportJob [write] => *,batch-import*,event-type*
frauddetector:CreateBatchPredictionJob [write] => *,batch-prediction*,detector*,detector-version*,event-type*
frauddetector:CreateDetectorVersion [write] => *,detector*,external-model,model-version
frauddetector:CreateModel [write] => *,event-type*,model*
frauddetector:CreateModelVersion [write] => *,model*
frauddetector:CreateRule [write] => *,detector*
frauddetector:CreateVariable [write] => *
frauddetector:DeleteBatchImportJob [write] => batch-import*
frauddetector:DeleteBatchPredictionJob [write] => batch-prediction*
frauddetector:DeleteDetector [write] => detector*
frauddetector:DeleteDetectorVersion [write] => detector-version*
frauddetector:DeleteEntityType [write] => entity-type*
frauddetector:DeleteEvent [write] => event-type*
frauddetector:DeleteEventType [write] => event-type*
frauddetector:DeleteEventsByEventType [write] => event-type*
frauddetector:DeleteExternalModel [write] => external-model*
frauddetector:DeleteLabel [write] => label*
frauddetector:DeleteModel [write] => model*
frauddetector:DeleteModelVersion [write] => model-version*
frauddetector:DeleteOutcome [write] => outcome*
frauddetector:DeleteRule [write] => rule*
frauddetector:DeleteVariable [write] => variable*
frauddetector:DescribeDetector [read] => detector*
frauddetector:DescribeModelVersions [read] => model-version
frauddetector:GetBatchImportJobs [list] => batch-import
frauddetector:GetBatchPredictionJobs [list] => batch-prediction
frauddetector:GetDeleteEventsByEventTypeStatus [read] => event-type*
frauddetector:GetDetectorVersion [read] => detector-version*
frauddetector:GetDetectors [list] => detector
frauddetector:GetEntityTypes [list] => entity-type
frauddetector:GetEvent [read] => event-type*
frauddetector:GetEventPrediction [read] => detector*,detector-version*,event-type*
frauddetector:GetEventPredictionMetadata [read] => detector*,detector-version*,event-type*
frauddetector:GetEventTypes [list] => event-type
frauddetector:GetExternalModels [list] => external-model
frauddetector:GetKMSEncryptionKey [read] => *
frauddetector:GetLabels [list] => label
frauddetector:GetModelVersion [read] => model-version*
frauddetector:GetModels [list] => model
frauddetector:GetOutcomes [list] => outcome
frauddetector:GetRules [list] => rule
frauddetector:GetVariables [list] => variable
frauddetector:ListEventPredictions [list] => detector,detector-version,event-type
frauddetector:ListTagsForResource [read] => batch-import,batch-prediction,detector,detector-version,entity-type,event-type,external-model,label,model,model-version,outcome,rule,variable
frauddetector:PutDetector [write] => *,detector*,event-type*
frauddetector:PutEntityType [write] => *,entity-type*
frauddetector:PutEventType [write] => *,event-type*
frauddetector:PutExternalModel [write] => *,event-type*,external-model*
frauddetector:PutKMSEncryptionKey [write] => *
frauddetector:PutLabel [write] => *,label*
frauddetector:PutOutcome [write] => *,outcome*
frauddetector:SendEvent [write] => *,event-type*
frauddetector:TagResource [tagging] => *,batch-import,batch-prediction,detector,detector-version,entity-type,event-type,external-model,label,model,model-version,outcome,rule,variable
frauddetector:UntagResource [tagging] => *,batch-import,batch-prediction,detector,detector-version,entity-type,event-type,external-model,label,model,model-version,outcome,rule,variable
frauddetector:UpdateDetectorVersion [write] => detector*,external-model,model-version
frauddetector:UpdateDetectorVersionMetadata [write] => detector-version*
frauddetector:UpdateDetectorVersionStatus [write] => detector-version*
frauddetector:UpdateEventLabel [write] => *,event-type*
frauddetector:UpdateModel [write] => model*
frauddetector:UpdateModelVersion [write] => *,model*
frauddetector:UpdateModelVersionStatus [write] => model-version*
frauddetector:UpdateRuleMetadata [write] => rule*
frauddetector:UpdateRuleVersion [write] => *,rule*
frauddetector:UpdateVariable [write] => variable*
freertos:CreateSoftwareConfiguration [write] => *,configuration*
freertos:DeleteSoftwareConfiguration [write] => configuration*
freertos:DescribeHardwarePlatform [read] => *
freertos:DescribeSoftwareConfiguration [read] => configuration*
freertos:GetSoftwareURL [read] => *
freertos:GetSoftwareURLForConfiguration [read] => *
freertos:ListFreeRTOSVersions [list] => *
freertos:ListHardwarePlatforms [list] => *
freertos:ListHardwareVendors [list] => *
freertos:ListSoftwareConfigurations [list] => *
freertos:UpdateSoftwareConfiguration [write] => configuration*
fsx:AssociateFileGateway [write] => file-system*
fsx:AssociateFileSystemAliases [write] => file-system*
fsx:CancelDataRepositoryTask [write] => task*
fsx:CopyBackup [write] => *,backup*
fsx:CreateBackup [write] => *,backup*,file-system,volume
fsx:CreateDataRepositoryAssociation [write] => *,association*,file-system*
fsx:CreateDataRepositoryTask [write] => *,file-system*,task*
fsx:CreateFileSystem [write] => *,file-system*
fsx:CreateFileSystemFromBackup [write] => *,backup*,file-system*
fsx:CreateSnapshot [write] => *,snapshot*,volume*
fsx:CreateStorageVirtualMachine [write] => *,file-system*,storage-virtual-machine*
fsx:CreateVolume [write] => *,snapshot,volume*
fsx:CreateVolumeFromBackup [write] => *,backup*,storage-virtual-machine*,volume*
fsx:DeleteBackup [write] => backup*
fsx:DeleteDataRepositoryAssociation [write] => association*
fsx:DeleteFileSystem [write] => *,backup,file-system*
fsx:DeleteSnapshot [write] => snapshot*
fsx:DeleteStorageVirtualMachine [write] => storage-virtual-machine*
fsx:DeleteVolume [write] => *,backup,volume*
fsx:DescribeAssociatedFileGateways [read] => file-system*
fsx:DescribeBackups [read] => *
fsx:DescribeDataRepositoryAssociations [read] => *
fsx:DescribeDataRepositoryTasks [read] => *
fsx:DescribeFileSystemAliases [read] => file-system*
fsx:DescribeFileSystems [read] => *
fsx:DescribeSnapshots [read] => *
fsx:DescribeStorageVirtualMachines [read] => *
fsx:DescribeVolumes [read] => *
fsx:DisassociateFileGateway [write] => file-system*
fsx:DisassociateFileSystemAliases [write] => file-system*
fsx:ListTagsForResource [read] => association,backup,file-system,snapshot,storage-virtual-machine,task,volume
fsx:ManageBackupPrincipalAssociations [permissions-management] => backup*
fsx:ReleaseFileSystemNfsV3Locks [write] => file-system*
fsx:RestoreVolumeFromSnapshot [write] => snapshot*,volume*
fsx:TagResource [tagging] => *,association,backup,file-system,snapshot,storage-virtual-machine,task,volume
fsx:UntagResource [tagging] => *,association,backup,file-system,snapshot,storage-virtual-machine,task,volume
fsx:UpdateDataRepositoryAssociation [write] => association*
fsx:UpdateFileSystem [write] => file-system*
fsx:UpdateSnapshot [write] => snapshot*
fsx:UpdateStorageVirtualMachine [write] => storage-virtual-machine*
fsx:UpdateVolume [write] => *,volume*
gamelift:AcceptMatch [write] => *
gamelift:ClaimGameServer [write] => gameServerGroup*
gamelift:CreateAlias [write] => *
gamelift:CreateBuild [write] => *
gamelift:CreateFleet [write] => *
gamelift:CreateFleetLocations [write] => fleet*
gamelift:CreateGameServerGroup [write] => *
gamelift:CreateGameSession [write] => *
gamelift:CreateGameSessionQueue [write] => *
gamelift:CreateMatchmakingConfiguration [write] => *
gamelift:CreateMatchmakingRuleSet [write] => *
gamelift:CreatePlayerSession [write] => *
gamelift:CreatePlayerSessions [write] => *
gamelift:CreateScript [write] => *
gamelift:CreateVpcPeeringAuthorization [write] => *
gamelift:CreateVpcPeeringConnection [write] => *
gamelift:DeleteAlias [write] => alias*
gamelift:DeleteBuild [write] => build*
gamelift:DeleteFleet [write] => fleet*
gamelift:DeleteFleetLocations [write] => fleet*
gamelift:DeleteGameServerGroup [write] => gameServerGroup*
gamelift:DeleteGameSessionQueue [write] => gameSessionQueue*
gamelift:DeleteMatchmakingConfiguration [write] => matchmakingConfiguration*
gamelift:DeleteMatchmakingRuleSet [write] => matchmakingRuleSet*
gamelift:DeleteScalingPolicy [write] => fleet*
gamelift:DeleteScript [write] => script*
gamelift:DeleteVpcPeeringAuthorization [write] => *
gamelift:DeleteVpcPeeringConnection [write] => *
gamelift:DeregisterGameServer [write] => gameServerGroup*
gamelift:DescribeAlias [read] => alias*
gamelift:DescribeBuild [read] => build*
gamelift:DescribeEC2InstanceLimits [read] => *
gamelift:DescribeFleetAttributes [read] => *
gamelift:DescribeFleetCapacity [read] => *
gamelift:DescribeFleetEvents [read] => fleet*
gamelift:DescribeFleetLocationAttributes [read] => fleet*
gamelift:DescribeFleetLocationCapacity [read] => fleet*
gamelift:DescribeFleetLocationUtilization [read] => fleet*
gamelift:DescribeFleetPortSettings [read] => fleet*
gamelift:DescribeFleetUtilization [read] => *
gamelift:DescribeGameServer [read] => gameServerGroup*
gamelift:DescribeGameServerGroup [read] => gameServerGroup*
gamelift:DescribeGameServerInstances [read] => gameServerGroup*
gamelift:DescribeGameSessionDetails [read] => *
gamelift:DescribeGameSessionPlacement [read] => *
gamelift:DescribeGameSessionQueues [read] => *
gamelift:DescribeGameSessions [read] => *
gamelift:DescribeInstances [read] => fleet*
gamelift:DescribeMatchmaking [read] => *
gamelift:DescribeMatchmakingConfigurations [read] => *
gamelift:DescribeMatchmakingRuleSets [read] => *
gamelift:DescribePlayerSessions [read] => *
gamelift:DescribeRuntimeConfiguration [read] => fleet*
gamelift:DescribeScalingPolicies [read] => fleet*
gamelift:DescribeScript [read] => script*
gamelift:DescribeVpcPeeringAuthorizations [read] => *
gamelift:DescribeVpcPeeringConnections [read] => *
gamelift:GetGameSessionLogUrl [read] => *
gamelift:GetInstanceAccess [read] => fleet*
gamelift:ListAliases [list] => *
gamelift:ListBuilds [list] => *
gamelift:ListFleets [list] => *
gamelift:ListGameServerGroups [list] => *
gamelift:ListGameServers [list] => gameServerGroup*
gamelift:ListScripts [list] => *
gamelift:ListTagsForResource [read] => alias,build,fleet,gameServerGroup,gameSessionQueue,matchmakingConfiguration,matchmakingRuleSet,script
gamelift:PutScalingPolicy [write] => fleet*
gamelift:RegisterGameServer [write] => gameServerGroup*
gamelift:RequestUploadCredentials [read] => build*
gamelift:ResolveAlias [read] => alias*
gamelift:ResumeGameServerGroup [write] => gameServerGroup*
gamelift:SearchGameSessions [read] => *
gamelift:StartFleetActions [write] => fleet*
gamelift:StartGameSessionPlacement [write] => gameSessionQueue*
gamelift:StartMatchBackfill [write] => *
gamelift:StartMatchmaking [write] => *
gamelift:StopFleetActions [write] => fleet*
gamelift:StopGameSessionPlacement [write] => *
gamelift:StopMatchmaking [write] => *
gamelift:SuspendGameServerGroup [write] => gameServerGroup*
gamelift:TagResource [tagging] => *,alias,build,fleet,gameServerGroup,gameSessionQueue,matchmakingConfiguration,matchmakingRuleSet,script
gamelift:UntagResource [tagging] => *,alias,build,fleet,gameServerGroup,gameSessionQueue,matchmakingConfiguration,matchmakingRuleSet,script
gamelift:UpdateAlias [write] => alias*
gamelift:UpdateBuild [write] => build*
gamelift:UpdateFleetAttributes [write] => fleet*
gamelift:UpdateFleetCapacity [write] => fleet*
gamelift:UpdateFleetPortSettings [write] => fleet*
gamelift:UpdateGameServer [write] => gameServerGroup*
gamelift:UpdateGameServerGroup [write] => gameServerGroup*
gamelift:UpdateGameSession [write] => *
gamelift:UpdateGameSessionQueue [write] => gameSessionQueue*
gamelift:UpdateMatchmakingConfiguration [write] => matchmakingConfiguration*
gamelift:UpdateRuntimeConfiguration [write] => fleet*
gamelift:UpdateScript [write] => script*
gamelift:ValidateMatchmakingRuleSet [read] => *
gamesparks:CreateGame [write] => *
gamesparks:CreateSnapshot [write] => *,game*
gamesparks:CreateStage [write] => *,game*
gamesparks:DeleteGame [write] => *,game*
gamesparks:DeleteStage [write] => *,game*,stage*
gamesparks:DisconnectPlayer [write] => *,game*,stage*
gamesparks:ExportSnapshot [write] => *,game*
gamesparks:GetExtension [read] => *
gamesparks:GetExtensionVersion [read] => *
gamesparks:GetGame [read] => *,game*
gamesparks:GetGameConfiguration [read] => *,game*
gamesparks:GetGeneratedCodeJob [read] => *,game*
gamesparks:GetPlayerConnectionStatus [read] => *,game*,stage*
gamesparks:GetSnapshot [read] => *,game*
gamesparks:GetStage [read] => *,game*,stage*
gamesparks:GetStageDeployment [read] => *,game*,stage*
gamesparks:ImportGameConfiguration [write] => *,game*
gamesparks:InvokeBackend [write] => *,game*,stage*
gamesparks:ListExtensionVersions [list] => *
gamesparks:ListExtensions [list] => *
gamesparks:ListGames [list] => *
gamesparks:ListGeneratedCodeJobs [list] => *,game*
gamesparks:ListSnapshots [list] => *,game*
gamesparks:ListStageDeployments [list] => *,game*,stage*
gamesparks:ListStages [list] => *,game*
gamesparks:ListTagsForResource [read] => game,stage
gamesparks:StartGeneratedCodeJob [write] => *,game*
gamesparks:StartStageDeployment [write] => *,game*,stage*
gamesparks:TagResource [tagging] => *,game,stage
gamesparks:UntagResource [tagging] => game,stage
gamesparks:UpdateGame [write] => *,game*
gamesparks:UpdateGameConfiguration [write] => *,game*
gamesparks:UpdateSnapshot [write] => *,game*
gamesparks:UpdateStage [write] => *,game*,stage*
geo:AssociateTrackerConsumer [write] => tracker*
geo:BatchDeleteDevicePositionHistory [write] => tracker*
geo:BatchDeleteGeofence [write] => geofence-collection*
geo:BatchEvaluateGeofences [write] => geofence-collection*
geo:BatchGetDevicePosition [read] => tracker*
geo:BatchPutGeofence [write] => geofence-collection*
geo:BatchUpdateDevicePosition [write] => tracker*
geo:CalculateRoute [read] => route-calculator*
geo:CalculateRouteMatrix [read] => route-calculator*
geo:CreateGeofenceCollection [write] => *
geo:CreateMap [write] => *
geo:CreatePlaceIndex [write] => *
geo:CreateRouteCalculator [write] => *
geo:CreateTracker [write] => *
geo:DeleteGeofenceCollection [write] => geofence-collection*
geo:DeleteMap [write] => map*
geo:DeletePlaceIndex [write] => place-index*
geo:DeleteRouteCalculator [write] => route-calculator*
geo:DeleteTracker [write] => tracker*
geo:DescribeGeofenceCollection [read] => geofence-collection*
geo:DescribeMap [read] => map*
geo:DescribePlaceIndex [read] => place-index*
geo:DescribeRouteCalculator [read] => route-calculator*
geo:DescribeTracker [read] => tracker*
geo:DisassociateTrackerConsumer [write] => tracker*
geo:GetDevicePosition [read] => tracker*
geo:GetDevicePositionHistory [read] => tracker*
geo:GetGeofence [read] => geofence-collection*
geo:GetMapGlyphs [read] => map*
geo:GetMapSprites [read] => map*
geo:GetMapStyleDescriptor [read] => map*
geo:GetMapTile [read] => map*
geo:ListDevicePositions [read] => tracker*
geo:ListGeofenceCollections [list] => *
geo:ListGeofences [read] => geofence-collection*
geo:ListMaps [list] => *
geo:ListPlaceIndexes [list] => *
geo:ListRouteCalculators [list] => *
geo:ListTagsForResource [read] => geofence-collection,map,place-index,route-calculator,tracker
geo:ListTrackerConsumers [read] => tracker*
geo:ListTrackers [list] => *
geo:PutGeofence [write] => geofence-collection*
geo:SearchPlaceIndexForPosition [read] => place-index*
geo:SearchPlaceIndexForSuggestions [read] => place-index*
geo:SearchPlaceIndexForText [read] => place-index*
geo:TagResource [tagging] => *,geofence-collection,map,place-index,route-calculator,tracker
geo:UntagResource [tagging] => *,geofence-collection,map,place-index,route-calculator,tracker
geo:UpdateGeofenceCollection [write] => geofence-collection*
geo:UpdateMap [write] => map*
geo:UpdatePlaceIndex [write] => place-index*
geo:UpdateRouteCalculator [write] => route-calculator*
geo:UpdateTracker [write] => tracker*
glacier:AbortMultipartUpload [write] => vault*
glacier:AbortVaultLock [permissions-management] => vault*
glacier:AddTagsToVault [tagging] => *,vault*
glacier:CompleteMultipartUpload [write] => vault*
glacier:CompleteVaultLock [permissions-management] => vault*
glacier:CreateVault [write] => vault*
glacier:DeleteArchive [write] => *,vault*
glacier:DeleteVault [write] => vault*
glacier:DeleteVaultAccessPolicy [permissions-management] => vault*
glacier:DeleteVaultNotifications [write] => vault*
glacier:DescribeJob [read] => vault*
glacier:DescribeVault [read] => vault*
glacier:GetDataRetrievalPolicy [read] => *
glacier:GetJobOutput [read] => vault*
glacier:GetVaultAccessPolicy [read] => vault*
glacier:GetVaultLock [read] => vault*
glacier:GetVaultNotifications [read] => vault*
glacier:InitiateJob [write] => *,vault*
glacier:InitiateMultipartUpload [write] => vault*
glacier:InitiateVaultLock [permissions-management] => vault*
glacier:ListJobs [list] => vault*
glacier:ListMultipartUploads [list] => vault*
glacier:ListParts [list] => vault*
glacier:ListProvisionedCapacity [list] => *
glacier:ListTagsForVault [list] => vault*
glacier:ListVaults [list] => *
glacier:PurchaseProvisionedCapacity [write] => *
glacier:RemoveTagsFromVault [tagging] => vault*
glacier:SetDataRetrievalPolicy [permissions-management] => *
glacier:SetVaultAccessPolicy [permissions-management] => vault*
glacier:SetVaultNotifications [write] => vault*
glacier:UploadArchive [write] => vault*
glacier:UploadMultipartPart [write] => vault*
globalaccelerator:AddCustomRoutingEndpoints [write] => endpointgroup*
globalaccelerator:AdvertiseByoipCidr [write] => *
globalaccelerator:AllowCustomRoutingTraffic [write] => endpointgroup*
globalaccelerator:CreateAccelerator [write] => *
globalaccelerator:CreateCustomRoutingAccelerator [write] => *
globalaccelerator:CreateCustomRoutingEndpointGroup [write] => listener*
globalaccelerator:CreateCustomRoutingListener [write] => accelerator*
globalaccelerator:CreateEndpointGroup [write] => listener*
globalaccelerator:CreateListener [write] => accelerator*
globalaccelerator:DeleteAccelerator [write] => accelerator*
globalaccelerator:DeleteCustomRoutingAccelerator [write] => accelerator*
globalaccelerator:DeleteCustomRoutingEndpointGroup [write] => endpointgroup*
globalaccelerator:DeleteCustomRoutingListener [write] => listener*
globalaccelerator:DeleteEndpointGroup [write] => endpointgroup*
globalaccelerator:DeleteListener [write] => listener*
globalaccelerator:DenyCustomRoutingTraffic [write] => endpointgroup*
globalaccelerator:DeprovisionByoipCidr [write] => *
globalaccelerator:DescribeAccelerator [read] => accelerator*
globalaccelerator:DescribeAcceleratorAttributes [read] => accelerator*
globalaccelerator:DescribeCustomRoutingAccelerator [read] => accelerator*
globalaccelerator:DescribeCustomRoutingAcceleratorAttributes [read] => accelerator*
globalaccelerator:DescribeCustomRoutingEndpointGroup [read] => endpointgroup*
globalaccelerator:DescribeCustomRoutingListener [read] => listener*
globalaccelerator:DescribeEndpointGroup [read] => endpointgroup*
globalaccelerator:DescribeListener [read] => listener*
globalaccelerator:ListAccelerators [list] => *
globalaccelerator:ListByoipCidrs [list] => *
globalaccelerator:ListCustomRoutingAccelerators [list] => *
globalaccelerator:ListCustomRoutingEndpointGroups [list] => listener*
globalaccelerator:ListCustomRoutingListeners [list] => accelerator*
globalaccelerator:ListCustomRoutingPortMappings [list] => accelerator*
globalaccelerator:ListCustomRoutingPortMappingsByDestination [list] => *
globalaccelerator:ListEndpointGroups [list] => listener*
globalaccelerator:ListListeners [list] => accelerator*
globalaccelerator:ListTagsForResource [read] => accelerator
globalaccelerator:ProvisionByoipCidr [write] => *
globalaccelerator:RemoveCustomRoutingEndpoints [write] => endpointgroup*
globalaccelerator:TagResource [tagging] => *,accelerator
globalaccelerator:UntagResource [tagging] => *,accelerator
globalaccelerator:UpdateAccelerator [write] => accelerator*
globalaccelerator:UpdateAcceleratorAttributes [write] => accelerator*
globalaccelerator:UpdateCustomRoutingAccelerator [write] => accelerator*
globalaccelerator:UpdateCustomRoutingAcceleratorAttributes [write] => accelerator*
globalaccelerator:UpdateCustomRoutingListener [write] => listener*
globalaccelerator:UpdateEndpointGroup [write] => endpointgroup*
globalaccelerator:UpdateListener [write] => listener*
globalaccelerator:WithdrawByoipCidr [write] => *
glue:BatchCreatePartition [write] => catalog*,database*,table*
glue:BatchDeleteConnection [write] => catalog*,connection*
glue:BatchDeletePartition [write] => catalog*,database*,table*
glue:BatchDeleteTable [write] => catalog*,database*,table*
glue:BatchDeleteTableVersion [write] => catalog*,database*,table*
glue:BatchGetBlueprints [read] => blueprint*
glue:BatchGetCrawlers [read] => crawler*
glue:BatchGetCustomEntityTypes [read] => *
glue:BatchGetDevEndpoints [read] => devendpoint*
glue:BatchGetJobs [read] => job*
glue:BatchGetPartition [read] => catalog*,database*,table*
glue:BatchGetTriggers [read] => trigger*
glue:BatchGetWorkflows [read] => workflow*
glue:BatchStopJobRun [write] => job*
glue:BatchUpdatePartition [write] => catalog*,database*,table*
glue:CancelMLTaskRun [write] => mlTransform*
glue:CancelStatement [write] => session*
glue:CheckSchemaVersionValidity [read] => *
glue:CreateBlueprint [write] => *
glue:CreateClassifier [write] => *
glue:CreateConnection [write] => *,catalog*
glue:CreateCrawler [write] => *
glue:CreateCustomEntityType [write] => *
glue:CreateDatabase [write] => catalog*
glue:CreateDevEndpoint [write] => *
glue:CreateJob [write] => *
glue:CreateMLTransform [write] => *
glue:CreatePartition [write] => catalog*,database*,table*
glue:CreatePartitionIndex [write] => catalog*,database*,table*
glue:CreateRegistry [write] => *,registry*
glue:CreateSchema [write] => *,registry*,schema*
glue:CreateScript [write] => *
glue:CreateSecurityConfiguration [write] => *
glue:CreateSession [write] => *
glue:CreateTable [write] => catalog*,database*
glue:CreateTrigger [write] => *
glue:CreateUserDefinedFunction [write] => catalog*,database*
glue:CreateWorkflow [write] => *
glue:DeleteBlueprint [write] => blueprint*
glue:DeleteClassifier [write] => *
glue:DeleteColumnStatisticsForPartition [write] => catalog*,database*,table*
glue:DeleteColumnStatisticsForTable [write] => catalog*,database*,table*
glue:DeleteConnection [write] => catalog*,connection*
glue:DeleteCrawler [write] => crawler*
glue:DeleteCustomEntityType [write] => *
glue:DeleteDatabase [write] => catalog*,database*,table*,userdefinedfunction*
glue:DeleteDevEndpoint [write] => devendpoint*
glue:DeleteJob [write] => job*
glue:DeleteMLTransform [write] => mlTransform*
glue:DeletePartition [write] => catalog*,database*,table*
glue:DeletePartitionIndex [write] => catalog*,database*,table*
glue:DeleteRegistry [write] => registry*
glue:DeleteResourcePolicy [permissions-management] => catalog*
glue:DeleteSchema [write] => registry*,schema*
glue:DeleteSchemaVersions [write] => registry*,schema*
glue:DeleteSecurityConfiguration [write] => *
glue:DeleteSession [write] => session*
glue:DeleteTable [write] => catalog*,database*,table*
glue:DeleteTableVersion [write] => catalog*,database*,table*
glue:DeleteTrigger [write] => trigger*
glue:DeleteUserDefinedFunction [write] => catalog*,database*,userdefinedfunction*
glue:DeleteWorkflow [write] => workflow*
glue:GetBlueprint [read] => blueprint*
glue:GetBlueprintRun [read] => blueprint*
glue:GetBlueprintRuns [read] => blueprint*
glue:GetCatalogImportStatus [read] => catalog*
glue:GetClassifier [read] => *
glue:GetClassifiers [read] => *
glue:GetColumnStatisticsForPartition [read] => catalog*,database*,table*
glue:GetColumnStatisticsForTable [read] => catalog*,database*,table*
glue:GetConnection [read] => catalog*,connection*
glue:GetConnections [read] => catalog*,connection*
glue:GetCrawler [read] => crawler*
glue:GetCrawlerMetrics [read] => *
glue:GetCrawlers [read] => *
glue:GetCustomEntityType [read] => *
glue:GetDataCatalogEncryptionSettings [read] => catalog*
glue:GetDatabase [read] => catalog*,database*
glue:GetDatabases [read] => catalog*,database*
glue:GetDataflowGraph [read] => *
glue:GetDevEndpoint [read] => devendpoint*
glue:GetDevEndpoints [read] => *
glue:GetJob [read] => job*
glue:GetJobBookmark [read] => *
glue:GetJobRun [read] => job*
glue:GetJobRuns [read] => job*
glue:GetJobs [read] => *
glue:GetMLTaskRun [read] => mlTransform*
glue:GetMLTaskRuns [list] => mlTransform*
glue:GetMLTransform [read] => mlTransform*
glue:GetMLTransforms [list] => mlTransform*
glue:GetMapping [read] => *
glue:GetPartition [read] => catalog*,database*,table*
glue:GetPartitionIndexes [read] => catalog*,database*,table*
glue:GetPartitions [read] => catalog*,database*,table*
glue:GetPlan [read] => *
glue:GetRegistry [read] => registry*
glue:GetResourcePolicies [read] => catalog*
glue:GetResourcePolicy [read] => catalog*
glue:GetSchema [read] => registry*,schema*
glue:GetSchemaByDefinition [read] => registry*,schema*
glue:GetSchemaVersion [read] => registry,schema
glue:GetSchemaVersionsDiff [read] => registry*,schema*
glue:GetSecurityConfiguration [read] => *
glue:GetSecurityConfigurations [read] => *
glue:GetSession [read] => session*
glue:GetStatement [read] => session*
glue:GetTable [read] => catalog*,database*,table*
glue:GetTableVersion [read] => catalog*,database*,table*
glue:GetTableVersions [read] => catalog*,database*,table*
glue:GetTables [read] => catalog*,database*,table*
glue:GetTags [read] => blueprint,crawler,devendpoint,job,trigger,workflow
glue:GetTrigger [read] => trigger*
glue:GetTriggers [read] => *
glue:GetUserDefinedFunction [read] => catalog*,database*,userdefinedfunction*
glue:GetUserDefinedFunctions [read] => catalog*,database*,userdefinedfunction*
glue:GetWorkflow [read] => workflow*
glue:GetWorkflowRun [read] => workflow*
glue:GetWorkflowRunProperties [read] => workflow*
glue:GetWorkflowRuns [read] => workflow*
glue:ImportCatalogToGlue [write] => catalog*
glue:ListBlueprints [list] => *
glue:ListCrawlers [list] => *
glue:ListCustomEntityTypes [list] => *
glue:ListDevEndpoints [list] => *
glue:ListJobs [list] => *
glue:ListMLTransforms [list] => *,mlTransform*
glue:ListRegistries [list] => *
glue:ListSchemaVersions [list] => registry*,schema*
glue:ListSchemas [list] => registry
glue:ListSessions [list] => *
glue:ListStatements [list] => session*
glue:ListTriggers [list] => *
glue:ListWorkflows [list] => *
glue:NotifyEvent [write] => workflow*
glue:PutDataCatalogEncryptionSettings [write] => catalog*
glue:PutResourcePolicy [permissions-management] => catalog*
glue:PutSchemaVersionMetadata [write] => registry,schema
glue:PutWorkflowRunProperties [write] => workflow*
glue:QuerySchemaVersionMetadata [list] => registry,schema
glue:RegisterSchemaVersion [write] => registry*,schema*
glue:RemoveSchemaVersionMetadata [write] => registry,schema
glue:ResetJobBookmark [write] => *
glue:ResumeWorkflowRun [write] => workflow*
glue:RunStatement [write] => session*
glue:SearchTables [read] => catalog*,database*,table*
glue:StartBlueprintRun [write] => blueprint*
glue:StartCrawler [write] => crawler*
glue:StartCrawlerSchedule [write] => *
glue:StartExportLabelsTaskRun [write] => mlTransform*
glue:StartImportLabelsTaskRun [write] => mlTransform*
glue:StartJobRun [write] => job*
glue:StartMLEvaluationTaskRun [write] => mlTransform*
glue:StartMLLabelingSetGenerationTaskRun [write] => mlTransform*
glue:StartTrigger [write] => trigger*
glue:StartWorkflowRun [write] => workflow*
glue:StopCrawler [write] => crawler*
glue:StopCrawlerSchedule [write] => *
glue:StopSession [write] => session*
glue:StopTrigger [write] => trigger*
glue:StopWorkflowRun [write] => workflow*
glue:TagResource [tagging] => *,blueprint,crawler,devendpoint,job,trigger,workflow
glue:UntagResource [tagging] => *,blueprint,crawler,devendpoint,job,trigger,workflow
glue:UpdateBlueprint [write] => blueprint*
glue:UpdateClassifier [write] => *
glue:UpdateColumnStatisticsForPartition [write] => catalog*,database*,table*
glue:UpdateColumnStatisticsForTable [write] => catalog*,database*,table*
glue:UpdateConnection [write] => catalog*,connection*
glue:UpdateCrawler [write] => crawler*
glue:UpdateCrawlerSchedule [write] => *
glue:UpdateDatabase [write] => catalog*,database*
glue:UpdateDevEndpoint [write] => devendpoint*
glue:UpdateJob [write] => *,job*
glue:UpdateMLTransform [write] => mlTransform*
glue:UpdatePartition [write] => catalog*,database*,table*
glue:UpdateRegistry [write] => registry*
glue:UpdateSchema [write] => registry*,schema*
glue:UpdateTable [write] => catalog*,database*,table*
glue:UpdateTrigger [write] => trigger*
glue:UpdateUserDefinedFunction [write] => catalog*,database*,userdefinedfunction*
glue:UpdateWorkflow [write] => workflow*
glue:UseMLTransforms [write] => mlTransform*
grafana:AssociateLicense [write] => workspace*
grafana:CreateWorkspace [write] => *
grafana:CreateWorkspaceApiKey [write] => workspace*
grafana:DeleteWorkspace [write] => workspace*
grafana:DeleteWorkspaceApiKey [write] => workspace*
grafana:DescribeWorkspace [read] => workspace*
grafana:DescribeWorkspaceAuthentication [read] => workspace*
grafana:DisassociateLicense [write] => workspace*
grafana:ListPermissions [list] => workspace*
grafana:ListTagsForResource [read] => workspace
grafana:ListWorkspaces [read] => *
grafana:TagResource [tagging] => *,workspace
grafana:UntagResource [tagging] => *,workspace
grafana:UpdatePermissions [permissions-management] => workspace*
grafana:UpdateWorkspace [write] => workspace*
grafana:UpdateWorkspaceAuthentication [write] => workspace*
greengrass:AssociateServiceRoleToAccount [permissions-management] => *
greengrass:BatchAssociateClientDeviceWithCoreDevice [write] => coreDevice*
greengrass:BatchDisassociateClientDeviceFromCoreDevice [write] => coreDevice*
greengrass:CancelDeployment [write] => deployment*
greengrass:CreateComponentVersion [write] => *,component*
greengrass:CreateDeployment [write] => *
greengrass:DeleteComponent [write] => componentVersion*
greengrass:DeleteCoreDevice [write] => coreDevice*
greengrass:DeleteDeployment [write] => deployment*
greengrass:DescribeComponent [read] => componentVersion*
greengrass:DisassociateServiceRoleFromAccount [write] => *
greengrass:GetComponent [read] => componentVersion*
greengrass:GetComponentVersionArtifact [read] => componentVersion*
greengrass:GetConnectivityInfo [read] => connectivityInfo*
greengrass:GetCoreDevice [read] => coreDevice*
greengrass:GetDeployment [read] => deployment*
greengrass:GetServiceRoleForAccount [read] => *
greengrass:ListClientDevicesAssociatedWithCoreDevice [list] => coreDevice*
greengrass:ListComponentVersions [list] => component*
greengrass:ListComponents [list] => *
greengrass:ListCoreDevices [list] => *
greengrass:ListDeployments [list] => *
greengrass:ListEffectiveDeployments [list] => coreDevice*
greengrass:ListInstalledComponents [list] => coreDevice*
greengrass:ListTagsForResource [read] => *,component,componentVersion,coreDevice,deployment
greengrass:ResolveComponentCandidates [list] => componentVersion*
greengrass:TagResource [tagging] => *,component,componentVersion,coreDevice,deployment
greengrass:UntagResource [tagging] => *,component,componentVersion,coreDevice,deployment
greengrass:UpdateConnectivityInfo [write] => connectivityInfo*
greengrass:AssociateRoleToGroup [write] => group*
greengrass:AssociateServiceRoleToAccount [permissions-management] => *
greengrass:CreateConnectorDefinition [write] => *
greengrass:CreateConnectorDefinitionVersion [write] => connectorDefinition*
greengrass:CreateCoreDefinition [write] => *
greengrass:CreateCoreDefinitionVersion [write] => coreDefinition*
greengrass:CreateDeployment [write] => group*
greengrass:CreateDeviceDefinition [write] => *
greengrass:CreateDeviceDefinitionVersion [write] => deviceDefinition*
greengrass:CreateFunctionDefinition [write] => *
greengrass:CreateFunctionDefinitionVersion [write] => functionDefinition*
greengrass:CreateGroup [write] => *
greengrass:CreateGroupCertificateAuthority [write] => group*
greengrass:CreateGroupVersion [write] => group*
greengrass:CreateLoggerDefinition [write] => *
greengrass:CreateLoggerDefinitionVersion [write] => loggerDefinition*
greengrass:CreateResourceDefinition [write] => *
greengrass:CreateResourceDefinitionVersion [write] => resourceDefinition*
greengrass:CreateSoftwareUpdateJob [write] => *
greengrass:CreateSubscriptionDefinition [write] => *
greengrass:CreateSubscriptionDefinitionVersion [write] => subscriptionDefinition*
greengrass:DeleteConnectorDefinition [write] => connectorDefinition*
greengrass:DeleteCoreDefinition [write] => coreDefinition*
greengrass:DeleteDeviceDefinition [write] => deviceDefinition*
greengrass:DeleteFunctionDefinition [write] => functionDefinition*
greengrass:DeleteGroup [write] => group*
greengrass:DeleteLoggerDefinition [write] => loggerDefinition*
greengrass:DeleteResourceDefinition [write] => resourceDefinition*
greengrass:DeleteSubscriptionDefinition [write] => subscriptionDefinition*
greengrass:DisassociateRoleFromGroup [write] => group*
greengrass:DisassociateServiceRoleFromAccount [write] => *
greengrass:Discover [read] => thing*
greengrass:GetAssociatedRole [read] => group*
greengrass:GetBulkDeploymentStatus [read] => bulkDeployment*
greengrass:GetConnectivityInfo [read] => connectivityInfo*
greengrass:GetConnectorDefinition [read] => connectorDefinition*
greengrass:GetConnectorDefinitionVersion [read] => connectorDefinition*,connectorDefinitionVersion*
greengrass:GetCoreDefinition [read] => coreDefinition*
greengrass:GetCoreDefinitionVersion [read] => coreDefinition*,coreDefinitionVersion*
greengrass:GetDeploymentStatus [read] => deployment*,group*
greengrass:GetDeviceDefinition [read] => deviceDefinition*
greengrass:GetDeviceDefinitionVersion [read] => deviceDefinition*,deviceDefinitionVersion*
greengrass:GetFunctionDefinition [read] => functionDefinition*
greengrass:GetFunctionDefinitionVersion [read] => functionDefinition*,functionDefinitionVersion*
greengrass:GetGroup [read] => group*
greengrass:GetGroupCertificateAuthority [read] => certificateAuthority*,group*
greengrass:GetGroupCertificateConfiguration [read] => group*
greengrass:GetGroupVersion [read] => group*,groupVersion*
greengrass:GetLoggerDefinition [read] => loggerDefinition*
greengrass:GetLoggerDefinitionVersion [read] => loggerDefinition*,loggerDefinitionVersion*
greengrass:GetResourceDefinition [read] => resourceDefinition*
greengrass:GetResourceDefinitionVersion [read] => resourceDefinition*,resourceDefinitionVersion*
greengrass:GetServiceRoleForAccount [read] => *
greengrass:GetSubscriptionDefinition [read] => subscriptionDefinition*
greengrass:GetSubscriptionDefinitionVersion [read] => subscriptionDefinition*,subscriptionDefinitionVersion*
greengrass:GetThingRuntimeConfiguration [read] => thingRuntimeConfig*
greengrass:ListBulkDeploymentDetailedReports [read] => bulkDeployment*
greengrass:ListBulkDeployments [list] => *
greengrass:ListConnectorDefinitionVersions [list] => connectorDefinition*
greengrass:ListConnectorDefinitions [list] => *
greengrass:ListCoreDefinitionVersions [list] => coreDefinition*
greengrass:ListCoreDefinitions [list] => *
greengrass:ListDeployments [list] => group*
greengrass:ListDeviceDefinitionVersions [list] => deviceDefinition*
greengrass:ListDeviceDefinitions [list] => *
greengrass:ListFunctionDefinitionVersions [list] => functionDefinition*
greengrass:ListFunctionDefinitions [list] => *
greengrass:ListGroupCertificateAuthorities [list] => group*
greengrass:ListGroupVersions [list] => group*
greengrass:ListGroups [list] => *
greengrass:ListLoggerDefinitionVersions [list] => loggerDefinition*
greengrass:ListLoggerDefinitions [list] => *
greengrass:ListResourceDefinitionVersions [list] => resourceDefinition*
greengrass:ListResourceDefinitions [list] => *
greengrass:ListSubscriptionDefinitionVersions [list] => subscriptionDefinition*
greengrass:ListSubscriptionDefinitions [list] => *
greengrass:ListTagsForResource [read] => *,bulkDeployment,connectorDefinition,coreDefinition,deviceDefinition,functionDefinition,group,loggerDefinition,resourceDefinition,subscriptionDefinition
greengrass:ResetDeployments [write] => group*
greengrass:StartBulkDeployment [write] => *
greengrass:StopBulkDeployment [write] => bulkDeployment*
greengrass:TagResource [tagging] => *,bulkDeployment,connectorDefinition,coreDefinition,deviceDefinition,functionDefinition,group,loggerDefinition,resourceDefinition,subscriptionDefinition
greengrass:UntagResource [tagging] => *,bulkDeployment,connectorDefinition,coreDefinition,deviceDefinition,functionDefinition,group,loggerDefinition,resourceDefinition,subscriptionDefinition
greengrass:UpdateConnectivityInfo [write] => connectivityInfo*
greengrass:UpdateConnectorDefinition [write] => connectorDefinition*
greengrass:UpdateCoreDefinition [write] => coreDefinition*
greengrass:UpdateDeviceDefinition [write] => deviceDefinition*
greengrass:UpdateFunctionDefinition [write] => functionDefinition*
greengrass:UpdateGroup [write] => group*
greengrass:UpdateGroupCertificateConfiguration [write] => group*
greengrass:UpdateLoggerDefinition [write] => loggerDefinition*
greengrass:UpdateResourceDefinition [write] => resourceDefinition*
greengrass:UpdateSubscriptionDefinition [write] => subscriptionDefinition*
greengrass:UpdateThingRuntimeConfiguration [write] => thingRuntimeConfig*
groundstation:CancelContact [write] => Contact*
groundstation:CreateConfig [write] => *
groundstation:CreateDataflowEndpointGroup [write] => *
groundstation:CreateMissionProfile [write] => *
groundstation:DeleteConfig [write] => Config*
groundstation:DeleteDataflowEndpointGroup [write] => DataflowEndpointGroup*
groundstation:DeleteMissionProfile [write] => MissionProfile*
groundstation:DescribeContact [read] => Contact*
groundstation:GetConfig [read] => Config*
groundstation:GetDataflowEndpointGroup [read] => DataflowEndpointGroup*
groundstation:GetMinuteUsage [read] => *
groundstation:GetMissionProfile [read] => MissionProfile*
groundstation:GetSatellite [read] => Satellite*
groundstation:ListConfigs [list] => *
groundstation:ListContacts [list] => *
groundstation:ListDataflowEndpointGroups [list] => *
groundstation:ListGroundStations [list] => *
groundstation:ListMissionProfiles [list] => *
groundstation:ListSatellites [list] => *
groundstation:ListTagsForResource [read] => Config,Contact,DataflowEndpointGroup,MissionProfile
groundstation:ReserveContact [write] => *
groundstation:TagResource [tagging] => *,Config,Contact,DataflowEndpointGroup,MissionProfile
groundstation:UntagResource [tagging] => *,Config,Contact,DataflowEndpointGroup,MissionProfile
groundstation:UpdateConfig [write] => Config*
groundstation:UpdateMissionProfile [write] => MissionProfile*
groundtruthlabeling:AssociatePatchToManifestJob [write] => *
groundtruthlabeling:DescribeConsoleJob [read] => *
groundtruthlabeling:ListDatasetObjects [read] => *
groundtruthlabeling:RunFilterOrSampleDatasetJob [write] => *
groundtruthlabeling:RunGenerateManifestByCrawlingJob [write] => *
guardduty:AcceptInvitation [write] => *
guardduty:ArchiveFindings [write] => *
guardduty:CreateDetector [write] => *
guardduty:CreateFilter [write] => *,filter*
guardduty:CreateIPSet [write] => *
guardduty:CreateMembers [write] => *
guardduty:CreatePublishingDestination [write] => *
guardduty:CreateSampleFindings [write] => *
guardduty:CreateThreatIntelSet [write] => *
guardduty:DeclineInvitations [write] => *
guardduty:DeleteDetector [write] => detector*
guardduty:DeleteFilter [write] => filter*
guardduty:DeleteIPSet [write] => ipset*
guardduty:DeleteInvitations [write] => *
guardduty:DeleteMembers [write] => *
guardduty:DeletePublishingDestination [write] => publishingDestination*
guardduty:DeleteThreatIntelSet [write] => threatintelset*
guardduty:DescribeMalwareScans [read] => *
guardduty:DescribeOrganizationConfiguration [read] => *
guardduty:DescribePublishingDestination [read] => publishingDestination*
guardduty:DisableOrganizationAdminAccount [write] => *
guardduty:DisassociateFromMasterAccount [write] => *
guardduty:DisassociateMembers [write] => *
guardduty:EnableOrganizationAdminAccount [write] => *
guardduty:GetDetector [read] => detector*
guardduty:GetFilter [read] => filter*
guardduty:GetFindings [read] => *
guardduty:GetFindingsStatistics [read] => *
guardduty:GetIPSet [read] => ipset*
guardduty:GetInvitationsCount [read] => *
guardduty:GetMalwareScanSettings [read] => *
guardduty:GetMasterAccount [read] => *
guardduty:GetMemberDetectors [read] => *
guardduty:GetMembers [read] => *
guardduty:GetThreatIntelSet [read] => threatintelset*
guardduty:GetUsageStatistics [read] => *
guardduty:InviteMembers [write] => *
guardduty:ListDetectors [list] => *
guardduty:ListFilters [list] => *
guardduty:ListFindings [list] => *
guardduty:ListIPSets [list] => *
guardduty:ListInvitations [list] => *
guardduty:ListMembers [list] => *
guardduty:ListOrganizationAdminAccounts [list] => *
guardduty:ListPublishingDestinations [list] => *
guardduty:ListTagsForResource [read] => detector,filter,ipset,threatintelset
guardduty:ListThreatIntelSets [list] => *
guardduty:StartMonitoringMembers [write] => *
guardduty:StopMonitoringMembers [write] => *
guardduty:TagResource [tagging] => *,detector,filter,ipset,threatintelset
guardduty:UnarchiveFindings [write] => *
guardduty:UntagResource [tagging] => *,detector,filter,ipset,threatintelset
guardduty:UpdateDetector [write] => detector*
guardduty:UpdateFilter [write] => filter*
guardduty:UpdateFindingsFeedback [write] => *
guardduty:UpdateIPSet [write] => ipset*
guardduty:UpdateMalwareScanSettings [write] => *
guardduty:UpdateMemberDetectors [write] => *
guardduty:UpdateOrganizationConfiguration [write] => *
guardduty:UpdatePublishingDestination [write] => publishingDestination*
guardduty:UpdateThreatIntelSet [write] => threatintelset*
health:DescribeAffectedAccountsForOrganization [read] => *
health:DescribeAffectedEntities [read] => *,event*
health:DescribeAffectedEntitiesForOrganization [read] => *
health:DescribeEntityAggregates [read] => *
health:DescribeEventAggregates [read] => *
health:DescribeEventDetails [read] => *,event*
health:DescribeEventDetailsForOrganization [read] => *
health:DescribeEventTypes [read] => *
health:DescribeEvents [read] => *
health:DescribeEventsForOrganization [read] => *
health:DescribeHealthServiceStatusForOrganization [read] => *
health:DisableHealthServiceAccessForOrganization [permissions-management] => *
health:EnableHealthServiceAccessForOrganization [permissions-management] => *
healthlake:CreateFHIRDatastore [write] => *
healthlake:CreateResource [write] => datastore*
healthlake:DeleteFHIRDatastore [write] => datastore*
healthlake:DeleteResource [write] => datastore*
healthlake:DescribeFHIRDatastore [read] => datastore*
healthlake:DescribeFHIRExportJob [read] => datastore*
healthlake:DescribeFHIRImportJob [read] => datastore*
healthlake:GetCapabilities [read] => datastore*
healthlake:ListFHIRDatastores [list] => *
healthlake:ListFHIRExportJobs [list] => datastore*
healthlake:ListFHIRImportJobs [list] => datastore*
healthlake:ListTagsForResource [read] => datastore
healthlake:ReadResource [read] => datastore*
healthlake:SearchWithGet [read] => datastore*
healthlake:SearchWithPost [read] => datastore*
healthlake:StartFHIRExportJob [write] => datastore*
healthlake:StartFHIRImportJob [write] => datastore*
healthlake:TagResource [tagging] => *,datastore
healthlake:UntagResource [tagging] => *,datastore
healthlake:UpdateResource [write] => datastore*
honeycode:ApproveTeamAssociation [write] => *
honeycode:BatchCreateTableRows [write] => table*
honeycode:BatchDeleteTableRows [write] => table*
honeycode:BatchUpdateTableRows [write] => table*
honeycode:BatchUpsertTableRows [write] => table*
honeycode:CreateTeam [write] => *
honeycode:CreateTenant [write] => *
honeycode:DeleteDomains [write] => *
honeycode:DeregisterGroups [write] => *
honeycode:DescribeTableDataImportJob [read] => table*
honeycode:DescribeTeam [read] => *
honeycode:GetScreenData [read] => screen*
honeycode:InvokeScreenAutomation [write] => screen-automation*
honeycode:ListDomains [list] => *
honeycode:ListGroups [list] => *
honeycode:ListTableColumns [list] => table*
honeycode:ListTableRows [list] => table*
honeycode:ListTables [list] => workbook*
honeycode:ListTagsForResource [tagging] => *
honeycode:ListTeamAssociations [list] => *
honeycode:ListTenants [list] => *
honeycode:QueryTableRows [read] => table*
honeycode:RegisterDomainForVerification [write] => *
honeycode:RegisterGroups [write] => *
honeycode:RejectTeamAssociation [write] => *
honeycode:RestartDomainVerification [write] => *
honeycode:StartTableDataImportJob [write] => table*
honeycode:TagResource [tagging] => *
honeycode:UntagResource [tagging] => *
honeycode:UpdateTeam [write] => *
iam:AddClientIDToOpenIDConnectProvider [write] => oidc-provider*
iam:AddRoleToInstanceProfile [write] => instance-profile*
iam:AddUserToGroup [write] => group*
iam:AttachGroupPolicy [permissions-management] => *,group*
iam:AttachRolePolicy [permissions-management] => *,role*
iam:AttachUserPolicy [permissions-management] => *,user*
iam:ChangePassword [write] => user*
iam:CreateAccessKey [write] => user*
iam:CreateAccountAlias [write] => *
iam:CreateGroup [write] => group*
iam:CreateInstanceProfile [write] => *,instance-profile*
iam:CreateLoginProfile [write] => user*
iam:CreateOpenIDConnectProvider [write] => *,oidc-provider*
iam:CreatePolicy [permissions-management] => *,policy*
iam:CreatePolicyVersion [permissions-management] => policy*
iam:CreateRole [write] => *,role*
iam:CreateSAMLProvider [write] => *,saml-provider*
iam:CreateServiceLinkedRole [write] => *,role*
iam:CreateServiceSpecificCredential [write] => user*
iam:CreateUser [write] => *,user*
iam:CreateVirtualMFADevice [write] => *,mfa*
iam:DeactivateMFADevice [write] => user*
iam:DeleteAccessKey [write] => user*
iam:DeleteAccountAlias [write] => *
iam:DeleteAccountPasswordPolicy [permissions-management] => *
iam:DeleteGroup [write] => group*
iam:DeleteGroupPolicy [permissions-management] => group*
iam:DeleteInstanceProfile [write] => instance-profile*
iam:DeleteLoginProfile [write] => user*
iam:DeleteOpenIDConnectProvider [write] => oidc-provider*
iam:DeletePolicy [permissions-management] => policy*
iam:DeletePolicyVersion [permissions-management] => policy*
iam:DeleteRole [write] => role*
iam:DeleteRolePermissionsBoundary [permissions-management] => *,role*
iam:DeleteRolePolicy [permissions-management] => *,role*
iam:DeleteSAMLProvider [write] => saml-provider*
iam:DeleteSSHPublicKey [write] => user*
iam:DeleteServerCertificate [write] => server-certificate*
iam:DeleteServiceLinkedRole [write] => role*
iam:DeleteServiceSpecificCredential [write] => user*
iam:DeleteSigningCertificate [write] => user*
iam:DeleteUser [write] => user*
iam:DeleteUserPermissionsBoundary [permissions-management] => *,user*
iam:DeleteUserPolicy [permissions-management] => *,user*
iam:DeleteVirtualMFADevice [write] => mfa,sms-mfa
iam:DetachGroupPolicy [permissions-management] => *,group*
iam:DetachRolePolicy [permissions-management] => *,role*
iam:DetachUserPolicy [permissions-management] => *,user*
iam:EnableMFADevice [write] => user*
iam:GenerateCredentialReport [read] => *
iam:GenerateOrganizationsAccessReport [read] => *,access-report*
iam:GenerateServiceLastAccessedDetails [read] => group*,policy*,role*,user*
iam:GetAccessKeyLastUsed [read] => user*
iam:GetAccountAuthorizationDetails [read] => *
iam:GetAccountPasswordPolicy [read] => *
iam:GetAccountSummary [list] => *
iam:GetContextKeysForCustomPolicy [read] => *
iam:GetContextKeysForPrincipalPolicy [read] => group,role,user
iam:GetCredentialReport [read] => *
iam:GetGroup [read] => group*
iam:GetGroupPolicy [read] => group*
iam:GetInstanceProfile [read] => instance-profile*
iam:GetLoginProfile [list] => user*
iam:GetOpenIDConnectProvider [read] => oidc-provider*
iam:GetOrganizationsAccessReport [read] => *
iam:GetPolicy [read] => policy*
iam:GetPolicyVersion [read] => policy*
iam:GetRole [read] => role*
iam:GetRolePolicy [read] => role*
iam:GetSAMLProvider [read] => saml-provider*
iam:GetSSHPublicKey [read] => user*
iam:GetServerCertificate [read] => server-certificate*
iam:GetServiceLastAccessedDetails [read] => *
iam:GetServiceLastAccessedDetailsWithEntities [read] => *
iam:GetServiceLinkedRoleDeletionStatus [read] => role*
iam:GetUser [read] => user*
iam:GetUserPolicy [read] => user*
iam:ListAccessKeys [list] => user*
iam:ListAccountAliases [list] => *
iam:ListAttachedGroupPolicies [list] => group*
iam:ListAttachedRolePolicies [list] => role*
iam:ListAttachedUserPolicies [list] => user*
iam:ListEntitiesForPolicy [list] => policy*
iam:ListGroupPolicies [list] => group*
iam:ListGroups [list] => *
iam:ListGroupsForUser [list] => user*
iam:ListInstanceProfileTags [list] => instance-profile*
iam:ListInstanceProfiles [list] => instance-profile*
iam:ListInstanceProfilesForRole [list] => role*
iam:ListMFADeviceTags [list] => mfa*
iam:ListMFADevices [list] => user
iam:ListOpenIDConnectProviderTags [list] => oidc-provider*
iam:ListOpenIDConnectProviders [list] => *
iam:ListPolicies [list] => *
iam:ListPoliciesGrantingServiceAccess [list] => group*,role*,user*
iam:ListPolicyTags [list] => policy*
iam:ListPolicyVersions [list] => policy*
iam:ListRolePolicies [list] => role*
iam:ListRoleTags [list] => role*
iam:ListRoles [list] => *
iam:ListSAMLProviderTags [list] => saml-provider*
iam:ListSAMLProviders [list] => *
iam:ListSSHPublicKeys [list] => user*
iam:ListServerCertificateTags [list] => server-certificate*
iam:ListServerCertificates [list] => *
iam:ListServiceSpecificCredentials [list] => user*
iam:ListSigningCertificates [list] => user*
iam:ListUserPolicies [list] => user*
iam:ListUserTags [list] => user*
iam:ListUsers [list] => *
iam:ListVirtualMFADevices [list] => *
iam:PassRole [write] => *,role*
iam:PutGroupPolicy [permissions-management] => group*
iam:PutRolePermissionsBoundary [permissions-management] => *,role*
iam:PutRolePolicy [permissions-management] => *,role*
iam:PutUserPermissionsBoundary [permissions-management] => *,user*
iam:PutUserPolicy [permissions-management] => *,user*
iam:RemoveClientIDFromOpenIDConnectProvider [write] => oidc-provider*
iam:RemoveRoleFromInstanceProfile [write] => instance-profile*
iam:RemoveUserFromGroup [write] => group*
iam:ResetServiceSpecificCredential [write] => user*
iam:ResyncMFADevice [write] => user*
iam:SetDefaultPolicyVersion [permissions-management] => policy*
iam:SetSecurityTokenServicePreferences [write] => *
iam:SimulateCustomPolicy [read] => *
iam:SimulatePrincipalPolicy [read] => group,role,user
iam:TagInstanceProfile [tagging] => *,instance-profile*
iam:TagMFADevice [tagging] => *,mfa*
iam:TagOpenIDConnectProvider [tagging] => *,oidc-provider*
iam:TagPolicy [tagging] => *,policy*
iam:TagRole [tagging] => *,role*
iam:TagSAMLProvider [tagging] => *,saml-provider*
iam:TagServerCertificate [tagging] => *,server-certificate*
iam:TagUser [tagging] => *,user*
iam:UntagInstanceProfile [tagging] => *,instance-profile*
iam:UntagMFADevice [tagging] => *,mfa*
iam:UntagOpenIDConnectProvider [tagging] => *,oidc-provider*
iam:UntagPolicy [tagging] => *,policy*
iam:UntagRole [tagging] => *,role*
iam:UntagSAMLProvider [tagging] => *,saml-provider*
iam:UntagServerCertificate [tagging] => *,server-certificate*
iam:UntagUser [tagging] => *,user*
iam:UpdateAccessKey [write] => user*
iam:UpdateAccountPasswordPolicy [write] => *
iam:UpdateAssumeRolePolicy [permissions-management] => role*
iam:UpdateGroup [write] => group*
iam:UpdateLoginProfile [write] => user*
iam:UpdateOpenIDConnectProviderThumbprint [write] => oidc-provider*
iam:UpdateRole [write] => role*
iam:UpdateRoleDescription [write] => role*
iam:UpdateSAMLProvider [write] => saml-provider*
iam:UpdateSSHPublicKey [write] => user*
iam:UpdateServerCertificate [write] => server-certificate*
iam:UpdateServiceSpecificCredential [write] => user*
iam:UpdateSigningCertificate [write] => user*
iam:UpdateUser [write] => user*
iam:UploadSSHPublicKey [write] => user*
iam:UploadServerCertificate [write] => *,server-certificate*
iam:UploadSigningCertificate [write] => user*
identity-sync:CreateSyncFilter [write] => SyncProfileResource*
identity-sync:CreateSyncProfile [write] => *
identity-sync:CreateSyncTarget [write] => SyncProfileResource*
identity-sync:DeleteSyncFilter [write] => SyncProfileResource*
identity-sync:DeleteSyncProfile [write] => SyncProfileResource*
identity-sync:DeleteSyncTarget [write] => SyncProfileResource*,SyncTargetResource*
identity-sync:GetSyncProfile [read] => SyncProfileResource*
identity-sync:GetSyncTarget [read] => SyncProfileResource*,SyncTargetResource*
identity-sync:ListSyncFilters [list] => SyncProfileResource*
identity-sync:StartSync [write] => SyncProfileResource*
identity-sync:StopSync [write] => SyncProfileResource*
identity-sync:UpdateSyncTarget [write] => SyncProfileResource*,SyncTargetResource*
identitystore:CreateGroup [write] => Identitystore*
identitystore:CreateGroupMembership [write] => Group*,Identitystore*,User*
identitystore:CreateUser [write] => Identitystore*
identitystore:DeleteGroup [write] => Group*,Identitystore*
identitystore:DeleteGroupMembership [write] => Group*,GroupMembership*,Identitystore*,User*
identitystore:DeleteUser [write] => Identitystore*,User*
identitystore:DescribeGroup [read] => Group*,Identitystore*
identitystore:DescribeGroupMembership [read] => Group*,GroupMembership*,Identitystore*,User*
identitystore:DescribeUser [read] => Identitystore*,User*
identitystore:GetGroupId [read] => Group*,Identitystore*
identitystore:GetGroupMembershipId [read] => Group*,GroupMembership*,Identitystore*,User*
identitystore:GetUserId [read] => Identitystore*,User*
identitystore:IsMemberInGroups [read] => AllGroupMemberships*,Group*,Identitystore*,User*
identitystore:ListGroupMemberships [list] => AllGroupMemberships*,Group*,Identitystore*
identitystore:ListGroupMembershipsForMember [list] => AllGroupMemberships*,Identitystore*,User*
identitystore:ListGroups [list] => AllGroups*,Identitystore*
identitystore:ListUsers [list] => AllUsers*,Identitystore*
identitystore:UpdateGroup [write] => Group*,Identitystore*
identitystore:UpdateUser [write] => Identitystore*,User*
imagebuilder:CancelImageCreation [write] => image*
imagebuilder:CreateComponent [write] => *,component*,kmsKey
imagebuilder:CreateContainerRecipe [write] => *,containerRecipe*
imagebuilder:CreateDistributionConfiguration [write] => *,distributionConfiguration*
imagebuilder:CreateImage [write] => *,image*
imagebuilder:CreateImagePipeline [write] => *,imagePipeline*
imagebuilder:CreateImageRecipe [write] => *,imageRecipe*
imagebuilder:CreateInfrastructureConfiguration [write] => *,infrastructureConfiguration*
imagebuilder:DeleteComponent [write] => component*
imagebuilder:DeleteContainerRecipe [write] => containerRecipe*
imagebuilder:DeleteDistributionConfiguration [write] => distributionConfiguration*
imagebuilder:DeleteImage [write] => image*
imagebuilder:DeleteImagePipeline [write] => imagePipeline*
imagebuilder:DeleteImageRecipe [write] => imageRecipe*
imagebuilder:DeleteInfrastructureConfiguration [write] => infrastructureConfiguration*
imagebuilder:GetComponent [read] => component*
imagebuilder:GetComponentPolicy [read] => component*
imagebuilder:GetContainerRecipe [read] => containerRecipe*
imagebuilder:GetContainerRecipePolicy [read] => containerRecipe*
imagebuilder:GetDistributionConfiguration [read] => distributionConfiguration*
imagebuilder:GetImage [read] => *,image*
imagebuilder:GetImagePipeline [read] => imagePipeline*
imagebuilder:GetImagePolicy [read] => image*
imagebuilder:GetImageRecipe [read] => imageRecipe*
imagebuilder:GetImageRecipePolicy [read] => imageRecipe*
imagebuilder:GetInfrastructureConfiguration [read] => infrastructureConfiguration*
imagebuilder:ImportComponent [write] => *,component*,kmsKey
imagebuilder:ImportVmImage [write] => *,image*
imagebuilder:ListComponentBuildVersions [list] => componentVersion*
imagebuilder:ListComponents [list] => *
imagebuilder:ListContainerRecipes [list] => *
imagebuilder:ListDistributionConfigurations [list] => *
imagebuilder:ListImageBuildVersions [list] => imageVersion*
imagebuilder:ListImagePackages [list] => *,image*
imagebuilder:ListImagePipelineImages [list] => imagePipeline*
imagebuilder:ListImagePipelines [list] => *
imagebuilder:ListImageRecipes [list] => *
imagebuilder:ListImages [list] => *
imagebuilder:ListInfrastructureConfigurations [list] => *
imagebuilder:ListTagsForResource [read] => *,component,distributionConfiguration,image,imagePipeline,imageRecipe,infrastructureConfiguration
imagebuilder:PutComponentPolicy [permissions-management] => component*
imagebuilder:PutContainerRecipePolicy [permissions-management] => containerRecipe*
imagebuilder:PutImagePolicy [permissions-management] => image*
imagebuilder:PutImageRecipePolicy [permissions-management] => imageRecipe*
imagebuilder:StartImagePipelineExecution [write] => imagePipeline*
imagebuilder:TagResource [tagging] => *,component,containerRecipe,distributionConfiguration,image,imagePipeline,imageRecipe,infrastructureConfiguration
imagebuilder:UntagResource [tagging] => *,component,containerRecipe,distributionConfiguration,image,imagePipeline,imageRecipe,infrastructureConfiguration
imagebuilder:UpdateDistributionConfiguration [write] => distributionConfiguration*
imagebuilder:UpdateImagePipeline [write] => imagePipeline*
imagebuilder:UpdateInfrastructureConfiguration [write] => *,infrastructureConfiguration*
importexport:CancelJob [write] => *
importexport:CreateJob [write] => *
importexport:GetShippingLabel [read] => *
importexport:GetStatus [read] => *
importexport:ListJobs [list] => *
importexport:UpdateJob [write] => *
inspector:AddAttributesToFindings [write] => *
inspector:CreateAssessmentTarget [write] => *
inspector:CreateAssessmentTemplate [write] => *
inspector:CreateExclusionsPreview [write] => *
inspector:CreateResourceGroup [write] => *
inspector:DeleteAssessmentRun [write] => *
inspector:DeleteAssessmentTarget [write] => *
inspector:DeleteAssessmentTemplate [write] => *
inspector:DescribeAssessmentRuns [read] => *
inspector:DescribeAssessmentTargets [read] => *
inspector:DescribeAssessmentTemplates [read] => *
inspector:DescribeCrossAccountAccessRole [read] => *
inspector:DescribeExclusions [read] => *
inspector:DescribeFindings [read] => *
inspector:DescribeResourceGroups [read] => *
inspector:DescribeRulesPackages [read] => *
inspector:GetAssessmentReport [read] => *
inspector:GetExclusionsPreview [read] => *
inspector:GetTelemetryMetadata [read] => *
inspector:ListAssessmentRunAgents [list] => *
inspector:ListAssessmentRuns [list] => *
inspector:ListAssessmentTargets [list] => *
inspector:ListAssessmentTemplates [list] => *
inspector:ListEventSubscriptions [list] => *
inspector:ListExclusions [list] => *
inspector:ListFindings [list] => *
inspector:ListRulesPackages [list] => *
inspector:ListTagsForResource [read] => *
inspector:PreviewAgents [read] => *
inspector:RegisterCrossAccountAccessRole [write] => *
inspector:RemoveAttributesFromFindings [write] => *
inspector:SetTagsForResource [tagging] => *
inspector:StartAssessmentRun [write] => *
inspector:StopAssessmentRun [write] => *
inspector:SubscribeToEvent [write] => *
inspector:UnsubscribeFromEvent [write] => *
inspector:UpdateAssessmentTarget [write] => *
inspector2:AssociateMember [write] => *
inspector2:BatchGetAccountStatus [read] => *
inspector2:BatchGetFreeTrialInfo [read] => *
inspector2:CancelFindingsReport [write] => *
inspector2:CreateFilter [write] => *,Filter*
inspector2:CreateFindingsReport [write] => *
inspector2:DeleteFilter [write] => Filter*
inspector2:DescribeOrganizationConfiguration [read] => *
inspector2:Disable [write] => *
inspector2:DisableDelegatedAdminAccount [write] => *
inspector2:DisassociateMember [write] => *
inspector2:Enable [write] => *
inspector2:EnableDelegatedAdminAccount [write] => *
inspector2:GetConfiguration [read] => *
inspector2:GetDelegatedAdminAccount [read] => *
inspector2:GetFindingsReportStatus [read] => *
inspector2:GetMember [read] => *
inspector2:ListAccountPermissions [list] => *
inspector2:ListCoverage [list] => *
inspector2:ListCoverageStatistics [list] => *
inspector2:ListDelegatedAdminAccounts [list] => *
inspector2:ListFilters [list] => *
inspector2:ListFindingAggregations [list] => *
inspector2:ListFindings [list] => *
inspector2:ListMembers [list] => *
inspector2:ListTagsForResource [read] => *
inspector2:ListUsageTotals [list] => *
inspector2:TagResource [tagging] => *
inspector2:UntagResource [tagging] => *
inspector2:UpdateConfiguration [write] => *
inspector2:UpdateFilter [write] => *,Filter*
inspector2:UpdateOrganizationConfiguration [write] => *
iot:AcceptCertificateTransfer [write] => cert*
iot:AddThingToBillingGroup [write] => billinggroup*,thing*
iot:AddThingToThingGroup [write] => thing*,thinggroup*
iot:AssociateTargetsWithJob [write] => job*,thing*,thinggroup*
iot:AttachPolicy [permissions-management] => cert,thinggroup
iot:AttachPrincipalPolicy [permissions-management] => cert
iot:AttachSecurityProfile [write] => custommetric,dimension,securityprofile*,thinggroup
iot:AttachThingPrincipal [write] => *
iot:CancelAuditMitigationActionsTask [write] => *
iot:CancelAuditTask [write] => *
iot:CancelCertificateTransfer [write] => cert*
iot:CancelDetectMitigationActionsTask [write] => *
iot:CancelJob [write] => job*
iot:CancelJobExecution [write] => job*,thing*
iot:ClearDefaultAuthorizer [write] => *
iot:CloseTunnel [write] => *,tunnel*
iot:ConfirmTopicRuleDestination [write] => destination*
iot:Connect [write] => client*
iot:CreateAuditSuppression [write] => *
iot:CreateAuthorizer [write] => *,authorizer*
iot:CreateBillingGroup [write] => *,billinggroup*
iot:CreateCertificateFromCsr [write] => *
iot:CreateCustomMetric [write] => *,custommetric*
iot:CreateDimension [write] => *,dimension*
iot:CreateDomainConfiguration [write] => *,domainconfiguration*
iot:CreateDynamicThingGroup [write] => *,dynamicthinggroup*
iot:CreateFleetMetric [write] => *,fleetmetric*,index*
iot:CreateJob [write] => *,job*,jobtemplate,thing*,thinggroup*
iot:CreateJobTemplate [write] => *,job,jobtemplate*
iot:CreateKeysAndCertificate [write] => *
iot:CreateMitigationAction [write] => *,mitigationaction*
iot:CreateOTAUpdate [write] => *,otaupdate*
iot:CreatePolicy [write] => *,policy*
iot:CreatePolicyVersion [write] => policy*
iot:CreateProvisioningClaim [write] => provisioningtemplate*
iot:CreateProvisioningTemplate [write] => *,provisioningtemplate*
iot:CreateProvisioningTemplateVersion [write] => provisioningtemplate*
iot:CreateRoleAlias [write] => *,rolealias*
iot:CreateScheduledAudit [write] => *,scheduledaudit*
iot:CreateSecurityProfile [write] => *,custommetric,dimension,securityprofile*
iot:CreateStream [write] => *,stream*
iot:CreateThing [write] => billinggroup,thing*
iot:CreateThingGroup [write] => *,thinggroup*
iot:CreateThingType [write] => *,thingtype*
iot:CreateTopicRule [write] => *,rule*
iot:CreateTopicRuleDestination [write] => destination*
iot:DeleteAccountAuditConfiguration [write] => *
iot:DeleteAuditSuppression [write] => *
iot:DeleteAuthorizer [write] => authorizer*
iot:DeleteBillingGroup [write] => billinggroup*
iot:DeleteCACertificate [write] => cacert*
iot:DeleteCertificate [write] => cert*
iot:DeleteCustomMetric [write] => custommetric*
iot:DeleteDimension [write] => dimension*
iot:DeleteDomainConfiguration [write] => domainconfiguration*
iot:DeleteDynamicThingGroup [write] => dynamicthinggroup*
iot:DeleteFleetMetric [write] => fleetmetric*
iot:DeleteJob [write] => job*
iot:DeleteJobExecution [write] => job*,thing*
iot:DeleteJobTemplate [write] => jobtemplate*
iot:DeleteMitigationAction [write] => mitigationaction*
iot:DeleteOTAUpdate [write] => otaupdate*
iot:DeletePolicy [write] => policy*
iot:DeletePolicyVersion [write] => policy*
iot:DeleteProvisioningTemplate [write] => provisioningtemplate*
iot:DeleteProvisioningTemplateVersion [write] => provisioningtemplate*
iot:DeleteRegistrationCode [write] => *
iot:DeleteRoleAlias [write] => rolealias*
iot:DeleteScheduledAudit [write] => scheduledaudit*
iot:DeleteSecurityProfile [write] => custommetric,dimension,securityprofile*
iot:DeleteStream [write] => stream*
iot:DeleteThing [write] => thing*
iot:DeleteThingGroup [write] => thinggroup*
iot:DeleteThingShadow [write] => thing*
iot:DeleteThingType [write] => thingtype*
iot:DeleteTopicRule [write] => rule*
iot:DeleteTopicRuleDestination [write] => destination*
iot:DeleteV2LoggingLevel [write] => *
iot:DeprecateThingType [write] => thingtype*
iot:DescribeAccountAuditConfiguration [read] => *
iot:DescribeAuditFinding [read] => *
iot:DescribeAuditMitigationActionsTask [read] => *
iot:DescribeAuditSuppression [read] => *
iot:DescribeAuditTask [read] => *
iot:DescribeAuthorizer [read] => authorizer*
iot:DescribeBillingGroup [read] => billinggroup*
iot:DescribeCACertificate [read] => cacert*
iot:DescribeCertificate [read] => cert*
iot:DescribeCustomMetric [read] => custommetric*
iot:DescribeDefaultAuthorizer [read] => *
iot:DescribeDetectMitigationActionsTask [read] => *
iot:DescribeDimension [read] => dimension*
iot:DescribeDomainConfiguration [read] => domainconfiguration*
iot:DescribeEndpoint [read] => *
iot:DescribeEventConfigurations [read] => *
iot:DescribeFleetMetric [read] => fleetmetric*
iot:DescribeIndex [read] => index*
iot:DescribeJob [read] => job*
iot:DescribeJobExecution [read] => job,thing
iot:DescribeJobTemplate [read] => jobtemplate*
iot:DescribeManagedJobTemplate [read] => jobtemplate*
iot:DescribeMitigationAction [read] => mitigationaction*
iot:DescribeProvisioningTemplate [read] => provisioningtemplate*
iot:DescribeProvisioningTemplateVersion [read] => provisioningtemplate*
iot:DescribeRoleAlias [read] => rolealias*
iot:DescribeScheduledAudit [read] => scheduledaudit*
iot:DescribeSecurityProfile [read] => securityprofile*
iot:DescribeStream [read] => stream*
iot:DescribeThing [read] => thing*
iot:DescribeThingGroup [read] => thinggroup*
iot:DescribeThingRegistrationTask [read] => *
iot:DescribeThingType [read] => thingtype*
iot:DescribeTunnel [read] => tunnel*
iot:DetachPolicy [permissions-management] => cert,thinggroup
iot:DetachPrincipalPolicy [permissions-management] => cert
iot:DetachSecurityProfile [write] => custommetric,dimension,securityprofile*,thinggroup
iot:DetachThingPrincipal [write] => *
iot:DisableTopicRule [write] => rule*
iot:EnableTopicRule [write] => rule*
iot:GetBehaviorModelTrainingSummaries [list] => securityprofile
iot:GetBucketsAggregation [read] => index*
iot:GetCardinality [read] => index*
iot:GetEffectivePolicies [read] => cert
iot:GetIndexingConfiguration [read] => *
iot:GetJobDocument [read] => job*
iot:GetLoggingOptions [read] => *
iot:GetOTAUpdate [read] => otaupdate*
iot:GetPercentiles [read] => index*
iot:GetPolicy [read] => policy*
iot:GetPolicyVersion [read] => policy*
iot:GetRegistrationCode [read] => *
iot:GetRetainedMessage [read] => topic*
iot:GetStatistics [read] => index*
iot:GetThingShadow [read] => thing*
iot:GetTopicRule [read] => rule*
iot:GetTopicRuleDestination [read] => destination*
iot:GetV2LoggingOptions [read] => *
iot:ListActiveViolations [list] => securityprofile,thing
iot:ListAttachedPolicies [list] => *
iot:ListAuditFindings [list] => *
iot:ListAuditMitigationActionsExecutions [list] => *
iot:ListAuditMitigationActionsTasks [list] => *
iot:ListAuditSuppressions [list] => *
iot:ListAuditTasks [list] => *
iot:ListAuthorizers [list] => *
iot:ListBillingGroups [list] => *
iot:ListCACertificates [list] => *
iot:ListCertificates [list] => *
iot:ListCertificatesByCA [list] => *
iot:ListCustomMetrics [list] => *
iot:ListDetectMitigationActionsExecutions [list] => thing
iot:ListDetectMitigationActionsTasks [list] => *
iot:ListDimensions [list] => *
iot:ListDomainConfigurations [list] => *
iot:ListFleetMetrics [list] => *
iot:ListIndices [list] => *
iot:ListJobExecutionsForJob [list] => job*
iot:ListJobExecutionsForThing [list] => thing*
iot:ListJobTemplates [list] => *
iot:ListJobs [list] => *
iot:ListManagedJobTemplates [list] => *
iot:ListMetricValues [list] => thing*
iot:ListMitigationActions [list] => *
iot:ListNamedShadowsForThing [list] => thing*
iot:ListOTAUpdates [list] => *
iot:ListOutgoingCertificates [list] => *
iot:ListPolicies [list] => *
iot:ListPolicyPrincipals [list] => *
iot:ListPolicyVersions [list] => policy*
iot:ListPrincipalPolicies [list] => *
iot:ListPrincipalThings [list] => *
iot:ListProvisioningTemplateVersions [list] => provisioningtemplate*
iot:ListProvisioningTemplates [list] => *
iot:ListRetainedMessages [list] => *
iot:ListRoleAliases [list] => *
iot:ListScheduledAudits [list] => *
iot:ListSecurityProfiles [list] => custommetric,dimension
iot:ListSecurityProfilesForTarget [list] => thinggroup
iot:ListStreams [list] => *
iot:ListTagsForResource [read] => authorizer,billinggroup,cacert,custommetric,dimension,domainconfiguration,dynamicthinggroup,fleetmetric,job,jobtemplate,mitigationaction,otaupdate,policy,provisioningtemplate,rolealias,rule,scheduledaudit,securityprofile,stream,thinggroup,thingtype
iot:ListTargetsForPolicy [list] => policy*
iot:ListTargetsForSecurityProfile [list] => securityprofile*
iot:ListThingGroups [list] => *
iot:ListThingGroupsForThing [list] => thing*
iot:ListThingPrincipals [list] => *
iot:ListThingRegistrationTaskReports [list] => *
iot:ListThingRegistrationTasks [list] => *
iot:ListThingTypes [list] => *
iot:ListThings [list] => *
iot:ListThingsInBillingGroup [list] => billinggroup*
iot:ListThingsInThingGroup [list] => thinggroup*
iot:ListTopicRuleDestinations [list] => *
iot:ListTopicRules [list] => *
iot:ListTunnels [list] => *
iot:ListV2LoggingLevels [list] => *
iot:ListViolationEvents [list] => securityprofile,thing
iot:OpenTunnel [write] => *
iot:Publish [write] => topic*
iot:PutVerificationStateOnViolation [write] => *
iot:Receive [write] => topic*
iot:RegisterCACertificate [write] => *
iot:RegisterCertificate [write] => *
iot:RegisterCertificateWithoutCA [write] => *
iot:RegisterThing [write] => *
iot:RejectCertificateTransfer [write] => cert*
iot:RemoveThingFromBillingGroup [write] => billinggroup*,thing*
iot:RemoveThingFromThingGroup [write] => thing*,thinggroup*
iot:ReplaceTopicRule [write] => rule*
iot:RetainPublish [write] => topic*
iot:RotateTunnelAccessToken [write] => *,tunnel*
iot:SearchIndex [read] => index*
iot:SetDefaultAuthorizer [permissions-management] => authorizer*
iot:SetDefaultPolicyVersion [permissions-management] => policy*
iot:SetLoggingOptions [write] => *
iot:SetV2LoggingLevel [write] => *
iot:SetV2LoggingOptions [write] => *
iot:StartAuditMitigationActionsTask [write] => *
iot:StartDetectMitigationActionsTask [write] => securityprofile
iot:StartOnDemandAuditTask [write] => *
iot:StartThingRegistrationTask [write] => *
iot:StopThingRegistrationTask [write] => *
iot:Subscribe [write] => topicfilter*
iot:TagResource [tagging] => *,authorizer,billinggroup,cacert,custommetric,dimension,domainconfiguration,dynamicthinggroup,fleetmetric,job,jobtemplate,mitigationaction,otaupdate,policy,provisioningtemplate,rolealias,rule,scheduledaudit,securityprofile,stream,thinggroup,thingtype
iot:TestAuthorization [read] => cert
iot:TestInvokeAuthorizer [read] => authorizer*
iot:TransferCertificate [write] => cert*
iot:UntagResource [tagging] => *,authorizer,billinggroup,cacert,custommetric,dimension,domainconfiguration,dynamicthinggroup,fleetmetric,job,jobtemplate,mitigationaction,otaupdate,policy,provisioningtemplate,rolealias,rule,scheduledaudit,securityprofile,stream,thinggroup,thingtype
iot:UpdateAccountAuditConfiguration [write] => *
iot:UpdateAuditSuppression [write] => *
iot:UpdateAuthorizer [write] => authorizer*
iot:UpdateBillingGroup [write] => billinggroup*
iot:UpdateCACertificate [write] => cacert*
iot:UpdateCertificate [write] => cert*
iot:UpdateCustomMetric [write] => custommetric*
iot:UpdateDimension [write] => dimension*
iot:UpdateDomainConfiguration [write] => domainconfiguration*
iot:UpdateDynamicThingGroup [write] => dynamicthinggroup*
iot:UpdateEventConfigurations [write] => *
iot:UpdateFleetMetric [write] => fleetmetric*,index*
iot:UpdateIndexingConfiguration [write] => *
iot:UpdateJob [write] => job*
iot:UpdateMitigationAction [write] => mitigationaction*
iot:UpdateProvisioningTemplate [write] => provisioningtemplate*
iot:UpdateRoleAlias [write] => rolealias*
iot:UpdateScheduledAudit [write] => scheduledaudit*
iot:UpdateSecurityProfile [write] => custommetric,dimension,securityprofile*
iot:UpdateStream [write] => stream*
iot:UpdateThing [write] => thing*
iot:UpdateThingGroup [write] => thinggroup*
iot:UpdateThingGroupsForThing [write] => thing*,thinggroup
iot:UpdateThingShadow [write] => thing*
iot:UpdateTopicRuleDestination [write] => destination*
iot:ValidateSecurityProfileBehaviors [read] => *
iot-device-tester:CheckVersion [read] => *
iot-device-tester:DownloadTestSuite [read] => *
iot-device-tester:LatestIdt [read] => *
iot-device-tester:SendMetrics [write] => *
iot-device-tester:SupportedVersion [read] => *
iot1click:AssociateDeviceWithPlacement [write] => project*
iot1click:ClaimDevicesByClaimCode [read] => *
iot1click:CreatePlacement [write] => project*
iot1click:CreateProject [write] => *,project*
iot1click:DeletePlacement [write] => project*
iot1click:DeleteProject [write] => project*
iot1click:DescribeDevice [read] => device*
iot1click:DescribePlacement [read] => project*
iot1click:DescribeProject [read] => project*
iot1click:DisassociateDeviceFromPlacement [write] => project*
iot1click:FinalizeDeviceClaim [read] => *,device*
iot1click:GetDeviceMethods [read] => device*
iot1click:GetDevicesInPlacement [read] => project*
iot1click:InitiateDeviceClaim [read] => device*
iot1click:InvokeDeviceMethod [write] => device*
iot1click:ListDeviceEvents [read] => device*
iot1click:ListDevices [list] => *
iot1click:ListPlacements [read] => project*
iot1click:ListProjects [list] => *
iot1click:ListTagsForResource [read] => device,project
iot1click:TagResource [tagging] => *,device,project
iot1click:UnclaimDevice [read] => device*
iot1click:UntagResource [tagging] => *,device,project
iot1click:UpdateDeviceState [write] => device*
iot1click:UpdatePlacement [write] => project*
iot1click:UpdateProject [write] => project*
iotanalytics:BatchPutMessage [write] => channel*
iotanalytics:CancelPipelineReprocessing [write] => pipeline*
iotanalytics:CreateChannel [write] => *,channel*
iotanalytics:CreateDataset [write] => *,dataset*
iotanalytics:CreateDatasetContent [write] => dataset*
iotanalytics:CreateDatastore [write] => *,datastore*
iotanalytics:CreatePipeline [write] => *,pipeline*
iotanalytics:DeleteChannel [write] => channel*
iotanalytics:DeleteDataset [write] => dataset*
iotanalytics:DeleteDatasetContent [write] => dataset*
iotanalytics:DeleteDatastore [write] => datastore*
iotanalytics:DeletePipeline [write] => pipeline*
iotanalytics:DescribeChannel [read] => channel*
iotanalytics:DescribeDataset [read] => dataset*
iotanalytics:DescribeDatastore [read] => datastore*
iotanalytics:DescribeLoggingOptions [read] => *
iotanalytics:DescribePipeline [read] => pipeline*
iotanalytics:GetDatasetContent [read] => dataset*
iotanalytics:ListChannels [list] => *
iotanalytics:ListDatasetContents [list] => dataset*
iotanalytics:ListDatasets [list] => *
iotanalytics:ListDatastores [list] => *
iotanalytics:ListPipelines [list] => *
iotanalytics:ListTagsForResource [read] => channel,dataset,datastore,pipeline
iotanalytics:PutLoggingOptions [write] => *
iotanalytics:RunPipelineActivity [read] => *
iotanalytics:SampleChannelData [read] => channel*
iotanalytics:StartPipelineReprocessing [write] => pipeline*
iotanalytics:TagResource [tagging] => *,channel,dataset,datastore,pipeline
iotanalytics:UntagResource [tagging] => *,channel,dataset,datastore,pipeline
iotanalytics:UpdateChannel [write] => channel*
iotanalytics:UpdateDataset [write] => dataset*
iotanalytics:UpdateDatastore [write] => datastore*
iotanalytics:UpdatePipeline [write] => pipeline*
iotdeviceadvisor:CreateSuiteDefinition [write] => *
iotdeviceadvisor:DeleteSuiteDefinition [write] => Suitedefinition*
iotdeviceadvisor:GetEndpoint [read] => *
iotdeviceadvisor:GetSuiteDefinition [read] => Suitedefinition*
iotdeviceadvisor:GetSuiteRun [read] => Suiterun*
iotdeviceadvisor:GetSuiteRunReport [read] => Suiterun*
iotdeviceadvisor:ListSuiteDefinitions [list] => *
iotdeviceadvisor:ListSuiteRuns [list] => Suitedefinition*
iotdeviceadvisor:ListTagsForResource [read] => Suitedefinition,Suiterun
iotdeviceadvisor:StartSuiteRun [write] => *
iotdeviceadvisor:StopSuiteRun [write] => Suiterun*
iotdeviceadvisor:TagResource [tagging] => *,Suitedefinition,Suiterun
iotdeviceadvisor:UntagResource [tagging] => *,Suitedefinition,Suiterun
iotdeviceadvisor:UpdateSuiteDefinition [write] => Suitedefinition*
iotevents:BatchAcknowledgeAlarm [write] => alarmModel*
iotevents:BatchDeleteDetector [write] => detectorModel*
iotevents:BatchDisableAlarm [write] => alarmModel*
iotevents:BatchEnableAlarm [write] => alarmModel*
iotevents:BatchPutMessage [write] => input*
iotevents:BatchResetAlarm [write] => alarmModel*
iotevents:BatchSnoozeAlarm [write] => alarmModel*
iotevents:BatchUpdateDetector [write] => detectorModel*
iotevents:CreateAlarmModel [write] => *,alarmModel*
iotevents:CreateDetectorModel [write] => *,detectorModel*
iotevents:CreateInput [write] => *,input*
iotevents:DeleteAlarmModel [write] => alarmModel*
iotevents:DeleteDetectorModel [write] => detectorModel*
iotevents:DeleteInput [write] => input*
iotevents:DescribeAlarm [read] => alarmModel*
iotevents:DescribeAlarmModel [read] => alarmModel*
iotevents:DescribeDetector [read] => detectorModel*
iotevents:DescribeDetectorModel [read] => detectorModel*
iotevents:DescribeDetectorModelAnalysis [read] => *
iotevents:DescribeInput [read] => input*
iotevents:DescribeLoggingOptions [read] => *
iotevents:GetDetectorModelAnalysisResults [read] => *
iotevents:ListAlarmModelVersions [list] => alarmModel*
iotevents:ListAlarmModels [list] => *
iotevents:ListAlarms [list] => alarmModel*
iotevents:ListDetectorModelVersions [list] => detectorModel*
iotevents:ListDetectorModels [list] => *
iotevents:ListDetectors [list] => detectorModel*
iotevents:ListInputRoutings [list] => *
iotevents:ListInputs [list] => *
iotevents:ListTagsForResource [read] => alarmModel,detectorModel,input
iotevents:PutLoggingOptions [write] => *
iotevents:StartDetectorModelAnalysis [write] => *
iotevents:TagResource [tagging] => *,alarmModel,detectorModel,input
iotevents:UntagResource [tagging] => *,alarmModel,detectorModel,input
iotevents:UpdateAlarmModel [write] => alarmModel*
iotevents:UpdateDetectorModel [write] => detectorModel*
iotevents:UpdateInput [write] => input*
iotevents:UpdateInputRouting [write] => input*
iotfleethub:CreateApplication [write] => *
iotfleethub:DeleteApplication [write] => application*
iotfleethub:DescribeApplication [read] => application*
iotfleethub:ListApplications [list] => *
iotfleethub:ListTagsForResource [read] => application
iotfleethub:TagResource [tagging] => *,application
iotfleethub:UntagResource [tagging] => *,application
iotfleethub:UpdateApplication [write] => application*
iotfleetwise:AssociateVehicleFleet [write] => fleet*,vehicle*
iotfleetwise:CreateCampaign [write] => *,fleet*,signalcatalog*,vehicle*
iotfleetwise:CreateDecoderManifest [write] => *,modelmanifest*
iotfleetwise:CreateFleet [write] => *,signalcatalog*
iotfleetwise:CreateModelManifest [write] => *,signalcatalog*
iotfleetwise:CreateSignalCatalog [write] => *
iotfleetwise:CreateVehicle [write] => *,decodermanifest*,modelmanifest*
iotfleetwise:DeleteCampaign [write] => campaign*
iotfleetwise:DeleteDecoderManifest [write] => decodermanifest*
iotfleetwise:DeleteFleet [write] => fleet*
iotfleetwise:DeleteModelManifest [write] => modelmanifest*
iotfleetwise:DeleteSignalCatalog [write] => signalcatalog*
iotfleetwise:DeleteVehicle [write] => vehicle*
iotfleetwise:DisassociateVehicleFleet [write] => fleet*,vehicle*
iotfleetwise:GetCampaign [read] => campaign*
iotfleetwise:GetDecoderManifest [read] => decodermanifest*
iotfleetwise:GetFleet [read] => fleet*
iotfleetwise:GetLoggingOptions [read] => *
iotfleetwise:GetModelManifest [read] => modelmanifest*
iotfleetwise:GetRegisterAccountStatus [read] => *
iotfleetwise:GetSignalCatalog [read] => signalcatalog*
iotfleetwise:GetVehicle [read] => vehicle*
iotfleetwise:GetVehicleStatus [read] => vehicle*
iotfleetwise:ImportDecoderManifest [write] => decodermanifest*
iotfleetwise:ImportSignalCatalog [write] => *
iotfleetwise:ListCampaigns [read] => *
iotfleetwise:ListDecoderManifestNetworkInterfaces [list] => decodermanifest*
iotfleetwise:ListDecoderManifestSignals [list] => decodermanifest*
iotfleetwise:ListDecoderManifests [read] => *
iotfleetwise:ListFleets [read] => *
iotfleetwise:ListFleetsForVehicle [read] => vehicle*
iotfleetwise:ListModelManifestNodes [list] => modelmanifest*
iotfleetwise:ListModelManifests [read] => *
iotfleetwise:ListSignalCatalogNodes [read] => signalcatalog*
iotfleetwise:ListSignalCatalogs [read] => *
iotfleetwise:ListTagsForResource [read] => campaign,decodermanifest,fleet,modelmanifest,signalcatalog,vehicle
iotfleetwise:ListVehicles [read] => *
iotfleetwise:ListVehiclesInFleet [read] => fleet*
iotfleetwise:PutLoggingOptions [write] => *
iotfleetwise:RegisterAccount [write] => *
iotfleetwise:TagResource [tagging] => *,campaign,decodermanifest,fleet,modelmanifest,signalcatalog,vehicle
iotfleetwise:UntagResource [tagging] => *,campaign,decodermanifest,fleet,modelmanifest,signalcatalog,vehicle
iotfleetwise:UpdateCampaign [write] => campaign*
iotfleetwise:UpdateDecoderManifest [write] => decodermanifest*
iotfleetwise:UpdateFleet [write] => fleet*
iotfleetwise:UpdateModelManifest [write] => modelmanifest*
iotfleetwise:UpdateSignalCatalog [write] => signalcatalog*
iotfleetwise:UpdateVehicle [write] => *,decodermanifest,modelmanifest,vehicle*
iotjobsdata:DescribeJobExecution [read] => *,thing*
iotjobsdata:GetPendingJobExecutions [read] => thing*
iotjobsdata:StartNextPendingJobExecution [write] => thing*
iotjobsdata:UpdateJobExecution [write] => *,thing*
iotroborunner:CreateAction [write] => *
iotroborunner:CreateActionTemplate [write] => *
iotroborunner:CreateActionTemplateDependency [write] => *
iotroborunner:CreateActivity [write] => *
iotroborunner:CreateActivityDependency [write] => *
iotroborunner:CreateDestination [write] => SiteResource*
iotroborunner:CreateDestinationRelationship [write] => *
iotroborunner:CreateSite [write] => *
iotroborunner:CreateTask [write] => *
iotroborunner:CreateTaskDependency [write] => *
iotroborunner:CreateWorker [write] => WorkerFleetResource*
iotroborunner:CreateWorkerFleet [write] => SiteResource*
iotroborunner:DeleteAction [write] => ActionResource*
iotroborunner:DeleteActionTemplate [write] => ActionTemplateResource*
iotroborunner:DeleteActionTemplateDependency [write] => *
iotroborunner:DeleteActivity [write] => ActivityResource*
iotroborunner:DeleteActivityDependency [write] => *
iotroborunner:DeleteDestination [write] => DestinationResource*
iotroborunner:DeleteDestinationRelationship [write] => DestinationRelationshipResource*
iotroborunner:DeleteSite [write] => SiteResource*
iotroborunner:DeleteTask [write] => TaskResource*
iotroborunner:DeleteTaskDependency [write] => *
iotroborunner:DeleteWorker [write] => WorkerResource*
iotroborunner:DeleteWorkerFleet [write] => WorkerFleetResource*
iotroborunner:GetAction [read] => ActionResource*
iotroborunner:GetActionTemplate [read] => ActionTemplateResource*
iotroborunner:GetActivity [read] => ActivityResource*
iotroborunner:GetDestination [read] => DestinationResource*
iotroborunner:GetDestinationRelationship [read] => DestinationRelationshipResource*
iotroborunner:GetSite [read] => SiteResource*
iotroborunner:GetTask [read] => TaskResource*
iotroborunner:GetWorker [read] => WorkerResource*
iotroborunner:GetWorkerFleet [read] => WorkerFleetResource*
iotroborunner:ListActionTemplates [read] => *
iotroborunner:ListActions [read] => *
iotroborunner:ListActivities [read] => *
iotroborunner:ListDestinationRelationships [read] => *
iotroborunner:ListDestinations [read] => *
iotroborunner:ListSites [read] => *
iotroborunner:ListTasks [read] => *
iotroborunner:ListWorkerFleets [read] => SiteResource*
iotroborunner:ListWorkers [read] => SiteResource*
iotroborunner:UpdateActionState [write] => ActionResource*
iotroborunner:UpdateActivity [write] => ActivityResource*
iotroborunner:UpdateDestination [write] => DestinationResource*
iotroborunner:UpdateSite [write] => SiteResource*
iotroborunner:UpdateTask [write] => TaskResource*
iotroborunner:UpdateWorker [write] => WorkerResource*
iotroborunner:UpdateWorkerFleet [write] => WorkerFleetResource*
iotsitewise:AssociateAssets [write] => asset*
iotsitewise:AssociateTimeSeriesToAssetProperty [write] => asset*,time-series*
iotsitewise:BatchAssociateProjectAssets [write] => project*
iotsitewise:BatchDisassociateProjectAssets [write] => project*
iotsitewise:BatchGetAssetPropertyAggregates [read] => asset,time-series
iotsitewise:BatchGetAssetPropertyValue [read] => asset,time-series
iotsitewise:BatchGetAssetPropertyValueHistory [read] => asset,time-series
iotsitewise:BatchPutAssetPropertyValue [write] => asset,time-series
iotsitewise:CreateAccessPolicy [write] => *,portal,project
iotsitewise:CreateAsset [write] => *,asset-model*
iotsitewise:CreateAssetModel [write] => *
iotsitewise:CreateBulkImportJob [write] => *
iotsitewise:CreateDashboard [write] => *,project*
iotsitewise:CreateGateway [write] => *
iotsitewise:CreatePortal [write] => *
iotsitewise:CreateProject [write] => *,portal*
iotsitewise:DeleteAccessPolicy [write] => access-policy*
iotsitewise:DeleteAsset [write] => asset*
iotsitewise:DeleteAssetModel [write] => asset-model*
iotsitewise:DeleteDashboard [write] => dashboard*
iotsitewise:DeleteGateway [write] => gateway*
iotsitewise:DeletePortal [write] => portal*
iotsitewise:DeleteProject [write] => project*
iotsitewise:DeleteTimeSeries [write] => asset,time-series
iotsitewise:DescribeAccessPolicy [read] => access-policy*
iotsitewise:DescribeAsset [read] => asset*
iotsitewise:DescribeAssetModel [read] => asset-model*
iotsitewise:DescribeAssetProperty [read] => asset*
iotsitewise:DescribeBulkImportJob [read] => *
iotsitewise:DescribeDashboard [read] => dashboard*
iotsitewise:DescribeDefaultEncryptionConfiguration [read] => *
iotsitewise:DescribeGateway [read] => gateway*
iotsitewise:DescribeGatewayCapabilityConfiguration [read] => gateway*
iotsitewise:DescribeLoggingOptions [read] => *
iotsitewise:DescribePortal [read] => portal*
iotsitewise:DescribeProject [read] => project*
iotsitewise:DescribeStorageConfiguration [read] => *
iotsitewise:DescribeTimeSeries [read] => asset,time-series
iotsitewise:DisassociateAssets [write] => asset*
iotsitewise:DisassociateTimeSeriesFromAssetProperty [write] => asset*,time-series*
iotsitewise:GetAssetPropertyAggregates [read] => asset,time-series
iotsitewise:GetAssetPropertyValue [read] => asset,time-series
iotsitewise:GetAssetPropertyValueHistory [read] => asset,time-series
iotsitewise:GetInterpolatedAssetPropertyValues [read] => asset,time-series
iotsitewise:ListAccessPolicies [list] => portal,project
iotsitewise:ListAssetModels [list] => *
iotsitewise:ListAssetRelationships [list] => asset*
iotsitewise:ListAssets [list] => asset-model
iotsitewise:ListAssociatedAssets [list] => asset*
iotsitewise:ListBulkImportJobs [list] => *
iotsitewise:ListDashboards [list] => project*
iotsitewise:ListGateways [list] => *
iotsitewise:ListPortals [list] => *
iotsitewise:ListProjectAssets [list] => project*
iotsitewise:ListProjects [list] => portal*
iotsitewise:ListTagsForResource [read] => *,access-policy,asset,asset-model,dashboard,gateway,portal,project
iotsitewise:ListTimeSeries [list] => asset
iotsitewise:PutDefaultEncryptionConfiguration [write] => *
iotsitewise:PutLoggingOptions [write] => *
iotsitewise:PutStorageConfiguration [write] => *
iotsitewise:TagResource [tagging] => *,access-policy,asset,asset-model,dashboard,gateway,portal,project
iotsitewise:UntagResource [tagging] => *,access-policy,asset,asset-model,dashboard,gateway,portal,project
iotsitewise:UpdateAccessPolicy [write] => access-policy*
iotsitewise:UpdateAsset [write] => asset*
iotsitewise:UpdateAssetModel [write] => asset-model*
iotsitewise:UpdateAssetModelPropertyRouting [write] => asset-model*
iotsitewise:UpdateAssetProperty [write] => asset*
iotsitewise:UpdateDashboard [write] => dashboard*
iotsitewise:UpdateGateway [write] => gateway*
iotsitewise:UpdateGatewayCapabilityConfiguration [write] => gateway*
iotsitewise:UpdatePortal [write] => portal*
iotsitewise:UpdateProject [write] => project*
iotthingsgraph:AssociateEntityToThing [write] => *
iotthingsgraph:CreateFlowTemplate [write] => *
iotthingsgraph:CreateSystemInstance [write] => *
iotthingsgraph:CreateSystemTemplate [write] => *
iotthingsgraph:DeleteFlowTemplate [write] => Workflow*
iotthingsgraph:DeleteNamespace [write] => *
iotthingsgraph:DeleteSystemInstance [write] => SystemInstance*
iotthingsgraph:DeleteSystemTemplate [write] => System*
iotthingsgraph:DeploySystemInstance [write] => SystemInstance*
iotthingsgraph:DeprecateFlowTemplate [write] => Workflow*
iotthingsgraph:DeprecateSystemTemplate [write] => System*
iotthingsgraph:DescribeNamespace [read] => *
iotthingsgraph:DissociateEntityFromThing [write] => *
iotthingsgraph:GetEntities [read] => *
iotthingsgraph:GetFlowTemplate [read] => Workflow*
iotthingsgraph:GetFlowTemplateRevisions [read] => Workflow*
iotthingsgraph:GetNamespaceDeletionStatus [read] => *
iotthingsgraph:GetSystemInstance [read] => SystemInstance*
iotthingsgraph:GetSystemTemplate [read] => System*
iotthingsgraph:GetSystemTemplateRevisions [read] => System*
iotthingsgraph:GetUploadStatus [read] => *
iotthingsgraph:ListFlowExecutionMessages [list] => *
iotthingsgraph:ListTagsForResource [list] => SystemInstance
iotthingsgraph:SearchEntities [read] => *
iotthingsgraph:SearchFlowExecutions [read] => SystemInstance*
iotthingsgraph:SearchFlowTemplates [read] => *
iotthingsgraph:SearchSystemInstances [read] => *
iotthingsgraph:SearchSystemTemplates [read] => *
iotthingsgraph:SearchThings [read] => *
iotthingsgraph:TagResource [tagging] => *,SystemInstance
iotthingsgraph:UndeploySystemInstance [write] => SystemInstance*
iotthingsgraph:UntagResource [tagging] => *,SystemInstance
iotthingsgraph:UpdateFlowTemplate [write] => Workflow*
iotthingsgraph:UpdateSystemTemplate [write] => System*
iotthingsgraph:UploadEntityDefinitions [write] => *
iottwinmaker:BatchPutPropertyValues [write] => entity,workspace*
iottwinmaker:CreateComponentType [write] => *,workspace*
iottwinmaker:CreateEntity [write] => *,workspace*
iottwinmaker:CreateScene [write] => *,workspace*
iottwinmaker:CreateWorkspace [write] => *
iottwinmaker:DeleteComponentType [write] => componentType*,workspace*
iottwinmaker:DeleteEntity [write] => entity*,workspace*
iottwinmaker:DeleteScene [write] => scene*,workspace*
iottwinmaker:DeleteWorkspace [write] => workspace*
iottwinmaker:GetComponentType [read] => componentType*,workspace*
iottwinmaker:GetEntity [read] => entity*,workspace*
iottwinmaker:GetPropertyValue [read] => componentType,entity,workspace*
iottwinmaker:GetPropertyValueHistory [read] => componentType,entity,workspace*
iottwinmaker:GetScene [read] => scene*,workspace*
iottwinmaker:GetWorkspace [read] => workspace*
iottwinmaker:ListComponentTypes [list] => workspace*
iottwinmaker:ListEntities [list] => workspace*
iottwinmaker:ListScenes [list] => workspace*
iottwinmaker:ListTagsForResource [list] => *,componentType,entity,scene,workspace
iottwinmaker:ListWorkspaces [list] => *
iottwinmaker:TagResource [tagging] => *,componentType,entity,scene,workspace
iottwinmaker:UntagResource [tagging] => *,componentType,entity,scene,workspace
iottwinmaker:UpdateComponentType [write] => componentType*,workspace*
iottwinmaker:UpdateEntity [write] => entity*,workspace*
iottwinmaker:UpdateScene [write] => scene*,workspace*
iottwinmaker:UpdateWorkspace [write] => workspace*
iotwireless:AssociateAwsAccountWithPartnerAccount [write] => *
iotwireless:AssociateMulticastGroupWithFuotaTask [write] => FuotaTask*,MulticastGroup*
iotwireless:AssociateWirelessDeviceWithFuotaTask [write] => FuotaTask*,WirelessDevice*
iotwireless:AssociateWirelessDeviceWithMulticastGroup [write] => MulticastGroup*,WirelessDevice*
iotwireless:AssociateWirelessDeviceWithThing [write] => WirelessDevice*,thing*
iotwireless:AssociateWirelessGatewayWithCertificate [write] => WirelessGateway*,cert*
iotwireless:AssociateWirelessGatewayWithThing [write] => WirelessGateway*,thing*
iotwireless:CancelMulticastGroupSession [write] => MulticastGroup*
iotwireless:CreateDestination [write] => *
iotwireless:CreateDeviceProfile [write] => *
iotwireless:CreateFuotaTask [write] => *
iotwireless:CreateMulticastGroup [write] => *
iotwireless:CreateNetworkAnalyzerConfiguration [write] => *,WirelessDevice*,WirelessGateway*
iotwireless:CreateServiceProfile [write] => *
iotwireless:CreateWirelessDevice [write] => *
iotwireless:CreateWirelessGateway [write] => *
iotwireless:CreateWirelessGatewayTask [write] => WirelessGateway*
iotwireless:CreateWirelessGatewayTaskDefinition [write] => *
iotwireless:DeleteDestination [write] => Destination*
iotwireless:DeleteDeviceProfile [write] => DeviceProfile*
iotwireless:DeleteFuotaTask [write] => FuotaTask*
iotwireless:DeleteMulticastGroup [write] => MulticastGroup*
iotwireless:DeleteNetworkAnalyzerConfiguration [write] => NetworkAnalyzerConfiguration*
iotwireless:DeleteQueuedMessages [write] => *
iotwireless:DeleteServiceProfile [write] => ServiceProfile*
iotwireless:DeleteWirelessDevice [write] => WirelessDevice*
iotwireless:DeleteWirelessGateway [write] => WirelessGateway*
iotwireless:DeleteWirelessGatewayTask [write] => WirelessGateway*
iotwireless:DeleteWirelessGatewayTaskDefinition [write] => WirelessGatewayTaskDefinition*
iotwireless:DisassociateAwsAccountFromPartnerAccount [write] => SidewalkAccount*
iotwireless:DisassociateMulticastGroupFromFuotaTask [write] => FuotaTask*,MulticastGroup*
iotwireless:DisassociateWirelessDeviceFromFuotaTask [write] => FuotaTask*,WirelessDevice*
iotwireless:DisassociateWirelessDeviceFromMulticastGroup [write] => MulticastGroup*,WirelessDevice*
iotwireless:DisassociateWirelessDeviceFromThing [write] => WirelessDevice*,thing*
iotwireless:DisassociateWirelessGatewayFromCertificate [write] => WirelessGateway*,cert*
iotwireless:DisassociateWirelessGatewayFromThing [write] => WirelessGateway*,thing*
iotwireless:GetDestination [read] => Destination*
iotwireless:GetDeviceProfile [read] => DeviceProfile*
iotwireless:GetEventConfigurationByResourceTypes [read] => *
iotwireless:GetFuotaTask [read] => FuotaTask*
iotwireless:GetLogLevelsByResourceTypes [read] => *
iotwireless:GetMulticastGroup [read] => MulticastGroup*
iotwireless:GetMulticastGroupSession [read] => MulticastGroup*
iotwireless:GetNetworkAnalyzerConfiguration [read] => NetworkAnalyzerConfiguration*
iotwireless:GetPartnerAccount [read] => SidewalkAccount*
iotwireless:GetPosition [read] => WirelessDevice,WirelessGateway
iotwireless:GetPositionConfiguration [read] => WirelessDevice,WirelessGateway
iotwireless:GetResourceEventConfiguration [read] => SidewalkAccount,WirelessDevice,WirelessGateway
iotwireless:GetResourceLogLevel [read] => WirelessDevice,WirelessGateway
iotwireless:GetServiceEndpoint [read] => *
iotwireless:GetServiceProfile [read] => ServiceProfile*
iotwireless:GetWirelessDevice [read] => WirelessDevice*
iotwireless:GetWirelessDeviceStatistics [read] => WirelessDevice*
iotwireless:GetWirelessGateway [read] => WirelessGateway*
iotwireless:GetWirelessGatewayCertificate [read] => WirelessGateway*
iotwireless:GetWirelessGatewayFirmwareInformation [read] => WirelessGateway*
iotwireless:GetWirelessGatewayStatistics [read] => WirelessGateway*
iotwireless:GetWirelessGatewayTask [read] => WirelessGateway*
iotwireless:GetWirelessGatewayTaskDefinition [read] => WirelessGatewayTaskDefinition*
iotwireless:ListDestinations [read] => *
iotwireless:ListDeviceProfiles [read] => *
iotwireless:ListEventConfigurations [read] => *
iotwireless:ListFuotaTasks [read] => *
iotwireless:ListMulticastGroups [read] => *
iotwireless:ListMulticastGroupsByFuotaTask [read] => FuotaTask*
iotwireless:ListNetworkAnalyzerConfigurations [read] => *
iotwireless:ListPartnerAccounts [read] => *
iotwireless:ListPositionConfigurations [read] => *
iotwireless:ListQueuedMessages [read] => *
iotwireless:ListServiceProfiles [read] => *
iotwireless:ListTagsForResource [read] => Destination,DeviceProfile,FuotaTask,MulticastGroup,NetworkAnalyzerConfiguration,ServiceProfile,SidewalkAccount,WirelessDevice,WirelessGateway,WirelessGatewayTaskDefinition
iotwireless:ListWirelessDevices [read] => *
iotwireless:ListWirelessGatewayTaskDefinitions [read] => *
iotwireless:ListWirelessGateways [read] => *
iotwireless:PutPositionConfiguration [write] => WirelessDevice,WirelessGateway
iotwireless:PutResourceLogLevel [write] => WirelessDevice,WirelessGateway
iotwireless:ResetAllResourceLogLevels [write] => *
iotwireless:ResetResourceLogLevel [write] => WirelessDevice,WirelessGateway
iotwireless:SendDataToMulticastGroup [write] => MulticastGroup*
iotwireless:SendDataToWirelessDevice [write] => WirelessDevice*
iotwireless:StartBulkAssociateWirelessDeviceWithMulticastGroup [write] => MulticastGroup*
iotwireless:StartBulkDisassociateWirelessDeviceFromMulticastGroup [write] => MulticastGroup*
iotwireless:StartFuotaTask [write] => FuotaTask*
iotwireless:StartMulticastGroupSession [write] => MulticastGroup*
iotwireless:StartNetworkAnalyzerStream [write] => NetworkAnalyzerConfiguration*
iotwireless:TagResource [tagging] => *,Destination,DeviceProfile,FuotaTask,MulticastGroup,NetworkAnalyzerConfiguration,ServiceProfile,SidewalkAccount,WirelessDevice,WirelessGateway,WirelessGatewayTaskDefinition
iotwireless:TestWirelessDevice [write] => WirelessDevice*
iotwireless:UntagResource [tagging] => *,Destination,DeviceProfile,FuotaTask,MulticastGroup,NetworkAnalyzerConfiguration,ServiceProfile,SidewalkAccount,WirelessDevice,WirelessGateway,WirelessGatewayTaskDefinition
iotwireless:UpdateDestination [write] => Destination*
iotwireless:UpdateEventConfigurationByResourceTypes [write] => *
iotwireless:UpdateFuotaTask [write] => FuotaTask*
iotwireless:UpdateLogLevelsByResourceTypes [write] => *
iotwireless:UpdateMulticastGroup [write] => MulticastGroup*
iotwireless:UpdateNetworkAnalyzerConfiguration [write] => NetworkAnalyzerConfiguration*,WirelessDevice*,WirelessGateway*
iotwireless:UpdatePartnerAccount [write] => SidewalkAccount*
iotwireless:UpdatePosition [write] => WirelessDevice,WirelessGateway
iotwireless:UpdateResourceEventConfiguration [write] => SidewalkAccount,WirelessDevice,WirelessGateway
iotwireless:UpdateWirelessDevice [write] => WirelessDevice*
iotwireless:UpdateWirelessGateway [write] => WirelessGateway*
iq:CreateProject [write] => *
iq-permission:ApproveAccessGrant [write] => *
ivs:BatchGetChannel [read] => Channel*
ivs:BatchGetStreamKey [read] => Stream-Key*
ivs:CreateChannel [write] => *,Channel*,Stream-Key*
ivs:CreateRecordingConfiguration [write] => *,Recording-Configuration*
ivs:CreateStreamKey [write] => *,Stream-Key*
ivs:DeleteChannel [write] => Channel*,Stream-Key*
ivs:DeletePlaybackKeyPair [write] => Playback-Key-Pair*
ivs:DeleteRecordingConfiguration [write] => Recording-Configuration*
ivs:DeleteStreamKey [write] => Stream-Key*
ivs:GetChannel [read] => Channel*
ivs:GetPlaybackKeyPair [read] => Playback-Key-Pair*
ivs:GetRecordingConfiguration [read] => Recording-Configuration*
ivs:GetStream [read] => Channel*
ivs:GetStreamKey [read] => Stream-Key*
ivs:GetStreamSession [read] => Channel*
ivs:ImportPlaybackKeyPair [write] => *,Playback-Key-Pair*
ivs:ListChannels [list] => Channel*
ivs:ListPlaybackKeyPairs [list] => Playback-Key-Pair*
ivs:ListRecordingConfigurations [list] => Recording-Configuration*
ivs:ListStreamKeys [list] => Channel*,Stream-Key*
ivs:ListStreamSessions [list] => Channel*
ivs:ListStreams [list] => Channel*
ivs:ListTagsForResource [read] => *,Channel,Playback-Key-Pair,Recording-Configuration,Stream-Key
ivs:PutMetadata [write] => Channel*
ivs:StopStream [write] => Channel*
ivs:TagResource [tagging] => *,Channel,Playback-Key-Pair,Recording-Configuration,Stream-Key
ivs:UntagResource [tagging] => *,Channel,Playback-Key-Pair,Recording-Configuration,Stream-Key
ivs:UpdateChannel [write] => Channel*
ivschat:CreateChatToken [write] => *,Room*
ivschat:CreateRoom [write] => *,Room*
ivschat:DeleteMessage [write] => Room*
ivschat:DeleteRoom [write] => Room*
ivschat:DisconnectUser [write] => Room*
ivschat:GetRoom [read] => Room*
ivschat:ListRooms [list] => Room*
ivschat:ListTagsForResource [read] => *,Room
ivschat:SendEvent [write] => Room*
ivschat:TagResource [tagging] => *,Room
ivschat:UntagResource [tagging] => *,Room
ivschat:UpdateRoom [write] => Room*
kafka:BatchAssociateScramSecret [write] => *
kafka:BatchDisassociateScramSecret [write] => *
kafka:CreateCluster [write] => *
kafka:CreateClusterV2 [write] => *
kafka:CreateConfiguration [write] => *
kafka:DeleteCluster [write] => *
kafka:DeleteConfiguration [write] => *
kafka:DescribeCluster [read] => *
kafka:DescribeClusterOperation [read] => *
kafka:DescribeClusterV2 [read] => *
kafka:DescribeConfiguration [read] => configuration*
kafka:DescribeConfigurationRevision [read] => configuration*
kafka:GetBootstrapBrokers [read] => *
kafka:GetCompatibleKafkaVersions [list] => *
kafka:ListClusterOperations [list] => *
kafka:ListClusters [list] => *
kafka:ListClustersV2 [list] => *
kafka:ListConfigurationRevisions [list] => *
kafka:ListConfigurations [list] => *
kafka:ListKafkaVersions [list] => *
kafka:ListNodes [list] => *
kafka:ListScramSecrets [list] => *
kafka:ListTagsForResource [read] => cluster
kafka:RebootBroker [write] => *
kafka:TagResource [tagging] => *,cluster
kafka:UntagResource [tagging] => *,cluster
kafka:UpdateBrokerCount [write] => *
kafka:UpdateBrokerStorage [write] => *
kafka:UpdateBrokerType [write] => *
kafka:UpdateClusterConfiguration [write] => *
kafka:UpdateClusterKafkaVersion [write] => *
kafka:UpdateConfiguration [write] => *
kafka:UpdateConnectivity [write] => *
kafka:UpdateMonitoring [write] => *
kafka:UpdateSecurity [write] => *
kafka-cluster:AlterCluster [write] => cluster*
kafka-cluster:AlterClusterDynamicConfiguration [write] => cluster*
kafka-cluster:AlterGroup [write] => group*
kafka-cluster:AlterTopic [write] => topic*
kafka-cluster:AlterTopicDynamicConfiguration [write] => topic*
kafka-cluster:AlterTransactionalId [write] => transactional-id*
kafka-cluster:Connect [write] => cluster*
kafka-cluster:CreateTopic [write] => topic*
kafka-cluster:DeleteGroup [write] => group*
kafka-cluster:DeleteTopic [write] => topic*
kafka-cluster:DescribeCluster [list] => cluster*
kafka-cluster:DescribeClusterDynamicConfiguration [list] => cluster*
kafka-cluster:DescribeGroup [list] => group*
kafka-cluster:DescribeTopic [list] => topic*
kafka-cluster:DescribeTopicDynamicConfiguration [list] => topic*
kafka-cluster:DescribeTransactionalId [list] => transactional-id*
kafka-cluster:ReadData [read] => topic*
kafka-cluster:WriteData [write] => topic*
kafka-cluster:WriteDataIdempotently [write] => cluster*
kafkaconnect:CreateConnector [write] => *
kafkaconnect:CreateCustomPlugin [write] => *
kafkaconnect:CreateWorkerConfiguration [write] => *
kafkaconnect:DeleteConnector [write] => *
kafkaconnect:DeleteCustomPlugin [write] => *
kafkaconnect:DescribeConnector [read] => connector*
kafkaconnect:DescribeCustomPlugin [read] => custom plugin*
kafkaconnect:DescribeWorkerConfiguration [read] => worker configuration*
kafkaconnect:ListConnectors [read] => *
kafkaconnect:ListCustomPlugins [read] => *
kafkaconnect:ListWorkerConfigurations [read] => *
kafkaconnect:UpdateConnector [write] => *
kendra:AssociateEntitiesToExperience [write] => experience*,index*
kendra:AssociatePersonasToEntities [write] => experience*,index*
kendra:BatchDeleteDocument [write] => index*
kendra:BatchGetDocumentStatus [read] => index*
kendra:BatchPutDocument [write] => index*
kendra:ClearQuerySuggestions [write] => index*
kendra:CreateDataSource [write] => *,index*
kendra:CreateExperience [write] => index*
kendra:CreateFaq [write] => *,index*
kendra:CreateIndex [write] => *
kendra:CreateQuerySuggestionsBlockList [write] => *,index*
kendra:CreateThesaurus [write] => *,index*
kendra:DeleteDataSource [write] => data-source*,index*
kendra:DeleteExperience [write] => experience*,index*
kendra:DeleteFaq [write] => faq*,index*
kendra:DeleteIndex [write] => index*
kendra:DeletePrincipalMapping [write] => data-source,index*
kendra:DeleteQuerySuggestionsBlockList [write] => index*,query-suggestions-block-list*
kendra:DeleteThesaurus [write] => index*,thesaurus*
kendra:DescribeDataSource [read] => data-source*,index*
kendra:DescribeExperience [read] => experience*,index*
kendra:DescribeFaq [read] => faq*,index*
kendra:DescribeIndex [read] => index*
kendra:DescribePrincipalMapping [read] => data-source,index*
kendra:DescribeQuerySuggestionsBlockList [read] => index*,query-suggestions-block-list*
kendra:DescribeQuerySuggestionsConfig [read] => index*
kendra:DescribeThesaurus [read] => index*,thesaurus*
kendra:DisassociateEntitiesFromExperience [write] => experience*,index*
kendra:DisassociatePersonasFromEntities [write] => experience*,index*
kendra:GetQuerySuggestions [read] => index*
kendra:GetSnapshots [read] => index*
kendra:ListDataSourceSyncJobs [list] => data-source*,index*
kendra:ListDataSources [list] => index*
kendra:ListEntityPersonas [list] => experience*,index*
kendra:ListExperienceEntities [list] => experience*,index*
kendra:ListExperiences [list] => index*
kendra:ListFaqs [list] => index*
kendra:ListGroupsOlderThanOrderingId [list] => data-source,index*
kendra:ListIndices [list] => *
kendra:ListQuerySuggestionsBlockLists [list] => index*
kendra:ListTagsForResource [read] => data-source,faq,index,query-suggestions-block-list,thesaurus
kendra:ListThesauri [list] => index*
kendra:PutPrincipalMapping [write] => data-source,index*
kendra:Query [read] => index*
kendra:StartDataSourceSyncJob [write] => data-source*,index*
kendra:StopDataSourceSyncJob [write] => data-source*,index*
kendra:SubmitFeedback [write] => index*
kendra:TagResource [tagging] => *,data-source,faq,index,query-suggestions-block-list,thesaurus
kendra:UntagResource [tagging] => *,data-source,faq,index,query-suggestions-block-list,thesaurus
kendra:UpdateDataSource [write] => data-source*,index*
kendra:UpdateExperience [write] => index*
kendra:UpdateIndex [write] => index*
kendra:UpdateQuerySuggestionsBlockList [write] => index*,query-suggestions-block-list*
kendra:UpdateQuerySuggestionsConfig [write] => index*
kendra:UpdateThesaurus [write] => index*,thesaurus*
kinesis:AddTagsToStream [tagging] => stream*
kinesis:CreateStream [write] => stream*
kinesis:DecreaseStreamRetentionPeriod [write] => stream*
kinesis:DeleteStream [write] => stream*
kinesis:DeregisterStreamConsumer [write] => consumer*
kinesis:DescribeLimits [read] => *
kinesis:DescribeStream [read] => stream*
kinesis:DescribeStreamConsumer [read] => consumer*
kinesis:DescribeStreamSummary [read] => stream*
kinesis:DisableEnhancedMonitoring [write] => *
kinesis:EnableEnhancedMonitoring [write] => *
kinesis:GetRecords [read] => stream*
kinesis:GetShardIterator [read] => stream*
kinesis:IncreaseStreamRetentionPeriod [write] => stream*
kinesis:ListShards [list] => *
kinesis:ListStreamConsumers [list] => stream*
kinesis:ListStreams [list] => *
kinesis:ListTagsForStream [read] => stream*
kinesis:MergeShards [write] => stream*
kinesis:PutRecord [write] => stream*
kinesis:PutRecords [write] => stream*
kinesis:RegisterStreamConsumer [write] => stream*
kinesis:RemoveTagsFromStream [tagging] => stream*
kinesis:SplitShard [write] => stream*
kinesis:StartStreamEncryption [write] => kmsKey*,stream*
kinesis:StopStreamEncryption [write] => kmsKey*,stream*
kinesis:SubscribeToShard [read] => consumer*
kinesis:UpdateShardCount [write] => *
kinesis:UpdateStreamMode [write] => *
kinesisanalytics:AddApplicationCloudWatchLoggingOption [write] => application*
kinesisanalytics:AddApplicationInput [write] => application*
kinesisanalytics:AddApplicationInputProcessingConfiguration [write] => application*
kinesisanalytics:AddApplicationOutput [write] => application*
kinesisanalytics:AddApplicationReferenceDataSource [write] => application*
kinesisanalytics:AddApplicationVpcConfiguration [write] => application*
kinesisanalytics:CreateApplication [write] => *
kinesisanalytics:CreateApplicationPresignedUrl [read] => application*
kinesisanalytics:CreateApplicationSnapshot [write] => application*
kinesisanalytics:DeleteApplication [write] => application*
kinesisanalytics:DeleteApplicationCloudWatchLoggingOption [write] => application*
kinesisanalytics:DeleteApplicationInputProcessingConfiguration [write] => application*
kinesisanalytics:DeleteApplicationOutput [write] => application*
kinesisanalytics:DeleteApplicationReferenceDataSource [write] => application*
kinesisanalytics:DeleteApplicationSnapshot [write] => application*
kinesisanalytics:DeleteApplicationVpcConfiguration [write] => application*
kinesisanalytics:DescribeApplication [read] => application*
kinesisanalytics:DescribeApplicationSnapshot [read] => application*
kinesisanalytics:DescribeApplicationVersion [read] => application*
kinesisanalytics:DiscoverInputSchema [read] => *
kinesisanalytics:ListApplicationSnapshots [read] => application*
kinesisanalytics:ListApplicationVersions [read] => application*
kinesisanalytics:ListApplications [list] => *
kinesisanalytics:ListTagsForResource [read] => application*
kinesisanalytics:RollbackApplication [write] => application*
kinesisanalytics:StartApplication [write] => application*
kinesisanalytics:StopApplication [write] => application*
kinesisanalytics:TagResource [tagging] => *,application*
kinesisanalytics:UntagResource [tagging] => *,application*
kinesisanalytics:UpdateApplication [write] => application*
kinesisanalytics:UpdateApplicationMaintenanceConfiguration [write] => application*
kinesisanalytics:AddApplicationInput [write] => application*
kinesisanalytics:AddApplicationOutput [write] => application*
kinesisanalytics:AddApplicationReferenceDataSource [write] => application*
kinesisanalytics:CreateApplication [write] => *
kinesisanalytics:DeleteApplication [write] => application*
kinesisanalytics:DeleteApplicationOutput [write] => application*
kinesisanalytics:DeleteApplicationReferenceDataSource [write] => application*
kinesisanalytics:DescribeApplication [read] => application*
kinesisanalytics:DiscoverInputSchema [read] => *
kinesisanalytics:GetApplicationState [read] => application*
kinesisanalytics:ListApplications [list] => *
kinesisanalytics:ListTagsForResource [read] => application*
kinesisanalytics:StartApplication [write] => application*
kinesisanalytics:StopApplication [write] => application*
kinesisanalytics:TagResource [tagging] => *,application*
kinesisanalytics:UntagResource [tagging] => *,application*
kinesisanalytics:UpdateApplication [write] => application*
kinesisvideo:ConnectAsMaster [write] => channel*
kinesisvideo:ConnectAsViewer [write] => channel*
kinesisvideo:CreateSignalingChannel [write] => *,channel*
kinesisvideo:CreateStream [write] => *,stream*
kinesisvideo:DeleteSignalingChannel [write] => channel*
kinesisvideo:DeleteStream [write] => stream*
kinesisvideo:DescribeImageGenerationConfiguration [read] => stream*
kinesisvideo:DescribeNotificationConfiguration [read] => stream*
kinesisvideo:DescribeSignalingChannel [list] => channel*
kinesisvideo:DescribeStream [list] => stream*
kinesisvideo:GetClip [read] => stream*
kinesisvideo:GetDASHStreamingSessionURL [read] => stream*
kinesisvideo:GetDataEndpoint [read] => stream*
kinesisvideo:GetHLSStreamingSessionURL [read] => stream*
kinesisvideo:GetIceServerConfig [read] => channel*
kinesisvideo:GetImages [read] => stream*
kinesisvideo:GetMedia [read] => stream*
kinesisvideo:GetMediaForFragmentList [read] => stream*
kinesisvideo:GetSignalingChannelEndpoint [read] => channel*
kinesisvideo:ListFragments [list] => stream*
kinesisvideo:ListSignalingChannels [list] => *
kinesisvideo:ListStreams [list] => *
kinesisvideo:ListTagsForResource [read] => channel,stream
kinesisvideo:ListTagsForStream [read] => stream*
kinesisvideo:PutMedia [write] => stream*
kinesisvideo:SendAlexaOfferToMaster [write] => channel*
kinesisvideo:TagResource [tagging] => *,channel,stream
kinesisvideo:TagStream [tagging] => *,stream*
kinesisvideo:UntagResource [tagging] => *,channel,stream
kinesisvideo:UntagStream [tagging] => *,stream*
kinesisvideo:UpdateDataRetention [write] => stream*
kinesisvideo:UpdateImageGenerationConfiguration [write] => stream*
kinesisvideo:UpdateNotificationConfiguration [write] => stream*
kinesisvideo:UpdateSignalingChannel [write] => channel*
kinesisvideo:UpdateStream [write] => stream*
kms:CancelKeyDeletion [write] => *,key*
kms:ConnectCustomKeyStore [write] => *
kms:CreateAlias [write] => *,alias*,key*
kms:CreateCustomKeyStore [write] => *
kms:CreateGrant [permissions-management] => *,key*
kms:CreateKey [write] => *
kms:Decrypt [write] => *,key*
kms:DeleteAlias [write] => *,alias*,key*
kms:DeleteCustomKeyStore [write] => *
kms:DeleteImportedKeyMaterial [write] => *,key*
kms:DescribeCustomKeyStores [read] => *
kms:DescribeKey [read] => *,key*
kms:DisableKey [write] => *,key*
kms:DisableKeyRotation [write] => *,key*
kms:DisconnectCustomKeyStore [write] => *
kms:EnableKey [write] => *,key*
kms:EnableKeyRotation [write] => *,key*
kms:Encrypt [write] => *,key*
kms:GenerateDataKey [write] => *,key*
kms:GenerateDataKeyPair [write] => *,key*
kms:GenerateDataKeyPairWithoutPlaintext [write] => *,key*
kms:GenerateDataKeyWithoutPlaintext [write] => *,key*
kms:GenerateMac [write] => *,key*
kms:GenerateRandom [write] => *
kms:GetKeyPolicy [read] => *,key*
kms:GetKeyRotationStatus [read] => *,key*
kms:GetParametersForImport [read] => *,key*
kms:GetPublicKey [read] => *,key*
kms:ImportKeyMaterial [write] => *,key*
kms:ListAliases [list] => *
kms:ListGrants [list] => *,key*
kms:ListKeyPolicies [list] => *,key*
kms:ListKeys [list] => *
kms:ListResourceTags [list] => *,key*
kms:ListRetirableGrants [list] => key*
kms:PutKeyPolicy [permissions-management] => *,key*
kms:ReEncryptFrom [write] => *,key*
kms:ReEncryptTo [write] => *,key*
kms:ReplicateKey [write] => *,key*
kms:RetireGrant [permissions-management] => key*
kms:RevokeGrant [permissions-management] => *,key*
kms:ScheduleKeyDeletion [write] => *,key*
kms:Sign [write] => *,key*
kms:SynchronizeMultiRegionKey [write] => key*
kms:TagResource [tagging] => *,key*
kms:UntagResource [tagging] => *,key*
kms:UpdateAlias [write] => *,alias*,key*
kms:UpdateCustomKeyStore [write] => *
kms:UpdateKeyDescription [write] => *,key*
kms:UpdatePrimaryRegion [write] => *,key*
kms:Verify [write] => *,key*
kms:VerifyMac [write] => *,key*
lakeformation:AddLFTagsToResource [tagging] => *
lakeformation:BatchGrantPermissions [permissions-management] => *
lakeformation:BatchRevokePermissions [permissions-management] => *
lakeformation:CancelTransaction [write] => *
lakeformation:CommitTransaction [write] => *
lakeformation:CreateDataCellsFilter [write] => *
lakeformation:CreateLFTag [write] => *
lakeformation:DeleteDataCellsFilter [write] => *
lakeformation:DeleteLFTag [write] => *
lakeformation:DeleteObjectsOnCancel [write] => *
lakeformation:DeregisterResource [write] => *
lakeformation:DescribeResource [read] => *
lakeformation:DescribeTransaction [read] => *
lakeformation:ExtendTransaction [write] => *
lakeformation:GetDataAccess [write] => *
lakeformation:GetDataLakeSettings [read] => *
lakeformation:GetEffectivePermissionsForPath [read] => *
lakeformation:GetLFTag [read] => *
lakeformation:GetQueryState [read] => *
lakeformation:GetQueryStatistics [read] => *
lakeformation:GetResourceLFTags [read] => *
lakeformation:GetTableObjects [read] => *
lakeformation:GetWorkUnitResults [read] => *
lakeformation:GetWorkUnits [read] => *
lakeformation:GrantPermissions [permissions-management] => *
lakeformation:ListDataCellsFilter [list] => *
lakeformation:ListLFTags [read] => *
lakeformation:ListPermissions [list] => *
lakeformation:ListResources [list] => *
lakeformation:ListTableStorageOptimizers [list] => *
lakeformation:ListTransactions [list] => *
lakeformation:PutDataLakeSettings [permissions-management] => *
lakeformation:RegisterResource [write] => *
lakeformation:RemoveLFTagsFromResource [tagging] => *
lakeformation:RevokePermissions [permissions-management] => *
lakeformation:SearchDatabasesByLFTags [read] => *
lakeformation:SearchTablesByLFTags [read] => *
lakeformation:StartQueryPlanning [write] => *
lakeformation:StartTransaction [write] => *
lakeformation:UpdateLFTag [write] => *
lakeformation:UpdateResource [write] => *
lakeformation:UpdateTableObjects [write] => *
lakeformation:UpdateTableStorageOptimizer [write] => *
lambda:AddLayerVersionPermission [permissions-management] => layerVersion*
lambda:AddPermission [permissions-management] => *,function*
lambda:CreateAlias [write] => function*
lambda:CreateCodeSigningConfig [write] => *
lambda:CreateEventSourceMapping [write] => *
lambda:CreateFunction [write] => *,function*
lambda:CreateFunctionUrlConfig [write] => *,function*
lambda:DeleteAlias [write] => function*
lambda:DeleteCodeSigningConfig [write] => code signing config*
lambda:DeleteEventSourceMapping [write] => *,eventSourceMapping*
lambda:DeleteFunction [write] => function*
lambda:DeleteFunctionCodeSigningConfig [write] => function*
lambda:DeleteFunctionConcurrency [write] => function*
lambda:DeleteFunctionEventInvokeConfig [write] => function*
lambda:DeleteFunctionUrlConfig [write] => *,function*
lambda:DeleteLayerVersion [write] => layerVersion*
lambda:DeleteProvisionedConcurrencyConfig [write] => function alias,function version
lambda:DisableReplication [permissions-management] => function*
lambda:EnableReplication [permissions-management] => function*
lambda:GetAccountSettings [read] => *
lambda:GetAlias [read] => function*
lambda:GetCodeSigningConfig [read] => code signing config*
lambda:GetEventSourceMapping [read] => *,eventSourceMapping*
lambda:GetFunction [read] => function*
lambda:GetFunctionCodeSigningConfig [read] => function*
lambda:GetFunctionConcurrency [read] => function*
lambda:GetFunctionConfiguration [read] => function*
lambda:GetFunctionEventInvokeConfig [read] => function*
lambda:GetFunctionUrlConfig [read] => *,function*
lambda:GetLayerVersion [read] => layerVersion*
lambda:GetLayerVersionPolicy [read] => layerVersion*
lambda:GetPolicy [read] => function*
lambda:GetProvisionedConcurrencyConfig [read] => function alias,function version
lambda:InvokeAsync [write] => function*
lambda:InvokeFunction [write] => function*
lambda:InvokeFunctionUrl [write] => *,function*
lambda:ListAliases [list] => function*
lambda:ListCodeSigningConfigs [list] => *
lambda:ListEventSourceMappings [list] => *
lambda:ListFunctionEventInvokeConfigs [list] => function*
lambda:ListFunctionUrlConfigs [list] => *,function*
lambda:ListFunctions [list] => *
lambda:ListFunctionsByCodeSigningConfig [list] => code signing config*
lambda:ListLayerVersions [list] => *
lambda:ListLayers [list] => *
lambda:ListProvisionedConcurrencyConfigs [list] => function*
lambda:ListTags [read] => function*
lambda:ListVersionsByFunction [list] => function*
lambda:PublishLayerVersion [write] => layer*
lambda:PublishVersion [write] => function*
lambda:PutFunctionCodeSigningConfig [write] => *,code signing config*,function*
lambda:PutFunctionConcurrency [write] => function*
lambda:PutFunctionEventInvokeConfig [write] => function*
lambda:PutProvisionedConcurrencyConfig [write] => function alias,function version
lambda:RemoveLayerVersionPermission [permissions-management] => layerVersion*
lambda:RemovePermission [permissions-management] => *,function*
lambda:TagResource [tagging] => *,function*
lambda:UntagResource [tagging] => *,function*
lambda:UpdateAlias [write] => function*
lambda:UpdateCodeSigningConfig [write] => code signing config*
lambda:UpdateEventSourceMapping [write] => *,eventSourceMapping*
lambda:UpdateFunctionCode [write] => function*
lambda:UpdateFunctionCodeSigningConfig [write] => code signing config*,function*
lambda:UpdateFunctionConfiguration [write] => *,function*
lambda:UpdateFunctionEventInvokeConfig [write] => function*
lambda:UpdateFunctionUrlConfig [write] => *,function*
launchwizard:DeleteApp [write] => *
launchwizard:DescribeProvisionedApp [read] => *
launchwizard:DescribeProvisioningEvents [read] => *
launchwizard:GetInfrastructureSuggestion [read] => *
launchwizard:GetIpAddress [read] => *
launchwizard:GetResourceCostEstimate [read] => *
launchwizard:ListProvisionedApps [list] => *
launchwizard:StartProvisioning [write] => *
lex:CreateBotVersion [write] => bot version*
lex:CreateIntentVersion [write] => intent version*
lex:CreateSlotTypeVersion [write] => slottype version*
lex:DeleteBot [write] => bot version*
lex:DeleteBotAlias [write] => bot alias*
lex:DeleteBotChannelAssociation [write] => channel*
lex:DeleteBotVersion [write] => bot version*
lex:DeleteIntent [write] => intent version*
lex:DeleteIntentVersion [write] => intent version*
lex:DeleteSession [write] => bot alias,bot version
lex:DeleteSlotType [write] => slottype version*
lex:DeleteSlotTypeVersion [write] => slottype version*
lex:DeleteUtterances [write] => bot version*
lex:GetBot [read] => bot alias,bot version
lex:GetBotAlias [read] => bot alias*
lex:GetBotAliases [list] => *
lex:GetBotChannelAssociation [read] => channel*
lex:GetBotChannelAssociations [list] => channel*
lex:GetBotVersions [list] => bot version*
lex:GetBots [list] => *
lex:GetBuiltinIntent [read] => *
lex:GetBuiltinIntents [read] => *
lex:GetBuiltinSlotTypes [read] => *
lex:GetExport [read] => bot version*
lex:GetImport [read] => *
lex:GetIntent [read] => intent version*
lex:GetIntentVersions [list] => intent version*
lex:GetIntents [list] => *
lex:GetMigration [read] => *
lex:GetMigrations [list] => *
lex:GetSession [read] => bot alias,bot version
lex:GetSlotType [read] => slottype version*
lex:GetSlotTypeVersions [list] => slottype version*
lex:GetSlotTypes [list] => *
lex:GetUtterancesView [list] => bot version*
lex:ListTagsForResource [read] => bot,bot alias,channel
lex:PostContent [write] => bot alias,bot version
lex:PostText [write] => bot alias,bot version
lex:PutBot [write] => *,bot version*
lex:PutBotAlias [write] => *,bot alias*
lex:PutIntent [write] => intent version*
lex:PutSession [write] => bot alias,bot version
lex:PutSlotType [write] => slottype version*
lex:StartImport [write] => *
lex:StartMigration [write] => bot version*
lex:TagResource [tagging] => *,bot,bot alias,channel
lex:UntagResource [tagging] => *,bot,bot alias,channel
lex:BuildBotLocale [write] => bot*
lex:CreateBot [write] => *,bot alias*,bot*
lex:CreateBotAlias [write] => *,bot alias*
lex:CreateBotChannel [write] => bot*
lex:CreateBotLocale [write] => bot*
lex:CreateBotVersion [write] => bot*
lex:CreateCustomVocabulary [write] => bot*
lex:CreateExport [write] => bot*
lex:CreateIntent [write] => bot*
lex:CreateResourcePolicy [write] => bot,bot alias
lex:CreateSlot [write] => bot*
lex:CreateSlotType [write] => bot*
lex:CreateUploadUrl [write] => *
lex:DeleteBot [write] => bot alias*,bot*
lex:DeleteBotAlias [write] => bot alias*
lex:DeleteBotChannel [write] => bot*
lex:DeleteBotLocale [write] => bot*
lex:DeleteBotVersion [write] => bot*
lex:DeleteCustomVocabulary [write] => bot*
lex:DeleteExport [write] => bot*
lex:DeleteImport [write] => bot*
lex:DeleteIntent [write] => bot*
lex:DeleteResourcePolicy [write] => bot,bot alias
lex:DeleteSession [write] => bot alias*
lex:DeleteSlot [write] => bot*
lex:DeleteSlotType [write] => bot*
lex:DeleteUtterances [write] => bot*
lex:DescribeBot [read] => bot*
lex:DescribeBotAlias [read] => bot alias*
lex:DescribeBotChannel [read] => bot*
lex:DescribeBotLocale [read] => bot*
lex:DescribeBotRecommendation [read] => bot*
lex:DescribeBotVersion [read] => bot*
lex:DescribeCustomVocabulary [read] => bot*
lex:DescribeCustomVocabularyMetadata [read] => bot*
lex:DescribeExport [read] => bot*
lex:DescribeImport [read] => bot*
lex:DescribeIntent [read] => bot*
lex:DescribeResourcePolicy [read] => bot,bot alias
lex:DescribeSlot [read] => bot*
lex:DescribeSlotType [read] => bot*
lex:GetSession [read] => bot alias*
lex:ListAggregatedUtterances [list] => bot*
lex:ListBotAliases [list] => bot*
lex:ListBotChannels [list] => bot*
lex:ListBotLocales [list] => bot*
lex:ListBotRecommendations [list] => bot*
lex:ListBotVersions [list] => bot*
lex:ListBots [list] => *
lex:ListBuiltInIntents [list] => *
lex:ListBuiltInSlotTypes [list] => *
lex:ListExports [list] => *
lex:ListImports [list] => *
lex:ListIntents [list] => bot*
lex:ListRecommendedIntents [list] => bot*
lex:ListSlotTypes [list] => bot*
lex:ListSlots [list] => bot*
lex:ListTagsForResource [read] => bot,bot alias
lex:PutSession [write] => bot alias*
lex:RecognizeText [write] => bot alias*
lex:RecognizeUtterance [write] => bot alias*
lex:SearchAssociatedTranscripts [list] => bot*
lex:StartBotRecommendation [write] => bot*
lex:StartConversation [write] => bot alias*
lex:StartImport [write] => *,bot,bot alias
lex:StopBotRecommendation [write] => bot*
lex:TagResource [tagging] => *,bot,bot alias
lex:UntagResource [tagging] => *,bot,bot alias
lex:UpdateBot [write] => bot*
lex:UpdateBotAlias [write] => bot alias*
lex:UpdateBotLocale [write] => bot*
lex:UpdateBotRecommendation [write] => bot*
lex:UpdateCustomVocabulary [write] => bot*
lex:UpdateExport [write] => bot*
lex:UpdateIntent [write] => bot*
lex:UpdateResourcePolicy [write] => bot,bot alias
lex:UpdateSlot [write] => bot*
lex:UpdateSlotType [write] => bot*
license-manager:AcceptGrant [write] => grant*
license-manager:CheckInLicense [write] => *
license-manager:CheckoutBorrowLicense [write] => license*
license-manager:CheckoutLicense [write] => *
license-manager:CreateGrant [write] => license*
license-manager:CreateGrantVersion [write] => grant*
license-manager:CreateLicense [write] => *
license-manager:CreateLicenseConfiguration [write] => *
license-manager:CreateLicenseConversionTaskForResource [write] => *
license-manager:CreateLicenseManagerReportGenerator [write] => *
license-manager:CreateLicenseVersion [write] => license*
license-manager:CreateToken [write] => license*
license-manager:DeleteGrant [write] => grant*
license-manager:DeleteLicense [write] => license*
license-manager:DeleteLicenseConfiguration [write] => license-configuration*
license-manager:DeleteLicenseManagerReportGenerator [write] => report-generator*
license-manager:DeleteToken [write] => *
license-manager:ExtendLicenseConsumption [write] => *
license-manager:GetAccessToken [read] => *
license-manager:GetGrant [read] => grant*
license-manager:GetLicense [read] => license*
license-manager:GetLicenseConfiguration [read] => license-configuration*
license-manager:GetLicenseConversionTask [read] => *
license-manager:GetLicenseManagerReportGenerator [read] => report-generator*
license-manager:GetLicenseUsage [read] => license*
license-manager:GetServiceSettings [list] => *
license-manager:ListAssociationsForLicenseConfiguration [list] => license-configuration*
license-manager:ListDistributedGrants [list] => *
license-manager:ListFailuresForLicenseConfigurationOperations [list] => license-configuration*
license-manager:ListLicenseConfigurations [read] => *
license-manager:ListLicenseConversionTasks [list] => *
license-manager:ListLicenseManagerReportGenerators [list] => license-configuration
license-manager:ListLicenseSpecificationsForResource [list] => *
license-manager:ListLicenseVersions [list] => license*
license-manager:ListLicenses [read] => *
license-manager:ListReceivedGrants [list] => *
license-manager:ListReceivedLicenses [list] => *
license-manager:ListResourceInventory [list] => *
license-manager:ListTagsForResource [read] => license-configuration*
license-manager:ListTokens [list] => *
license-manager:ListUsageForLicenseConfiguration [list] => license-configuration*
license-manager:RejectGrant [write] => grant*
license-manager:TagResource [tagging] => *,license-configuration*
license-manager:UntagResource [tagging] => license-configuration*
license-manager:UpdateLicenseConfiguration [write] => license-configuration*
license-manager:UpdateLicenseManagerReportGenerator [write] => report-generator*
license-manager:UpdateLicenseSpecificationsForResource [write] => license-configuration*
license-manager:UpdateServiceSettings [permissions-management] => *
license-manager-user-subscriptions:AssociateUser [write] => *
license-manager-user-subscriptions:DeregisterIdentityProvider [write] => *
license-manager-user-subscriptions:DisassociateUser [write] => *
license-manager-user-subscriptions:ListIdentityProviders [list] => *
license-manager-user-subscriptions:ListInstances [list] => *
license-manager-user-subscriptions:ListProductSubscriptions [list] => *
license-manager-user-subscriptions:ListUserAssociations [list] => *
license-manager-user-subscriptions:RegisterIdentityProvider [write] => *
license-manager-user-subscriptions:StartProductSubscription [write] => *
license-manager-user-subscriptions:StopProductSubscription [write] => *
lightsail:AllocateStaticIp [write] => *
lightsail:AttachCertificateToDistribution [write] => Certificate*,Distribution*
lightsail:AttachDisk [write] => Disk*
lightsail:AttachInstancesToLoadBalancer [write] => LoadBalancer*
lightsail:AttachLoadBalancerTlsCertificate [write] => LoadBalancer*
lightsail:AttachStaticIp [write] => Instance*,StaticIp*
lightsail:CloseInstancePublicPorts [write] => Instance*
lightsail:CopySnapshot [write] => *
lightsail:CreateBucket [write] => *
lightsail:CreateBucketAccessKey [write] => Bucket*
lightsail:CreateCertificate [write] => *
lightsail:CreateCloudFormationStack [write] => *
lightsail:CreateContactMethod [write] => *
lightsail:CreateContainerService [write] => *
lightsail:CreateContainerServiceDeployment [write] => ContainerService*
lightsail:CreateContainerServiceRegistryLogin [write] => *
lightsail:CreateDisk [write] => *
lightsail:CreateDiskFromSnapshot [write] => *,DiskSnapshot*
lightsail:CreateDiskSnapshot [write] => *,Disk,Instance
lightsail:CreateDistribution [write] => *
lightsail:CreateDomain [write] => *
lightsail:CreateDomainEntry [write] => Domain*
lightsail:CreateInstanceSnapshot [write] => *,Instance*
lightsail:CreateInstances [write] => *
lightsail:CreateInstancesFromSnapshot [write] => *,InstanceSnapshot*
lightsail:CreateKeyPair [write] => *
lightsail:CreateLoadBalancer [write] => *
lightsail:CreateLoadBalancerTlsCertificate [write] => LoadBalancer*
lightsail:CreateRelationalDatabase [write] => *
lightsail:CreateRelationalDatabaseFromSnapshot [write] => *,RelationalDatabaseSnapshot*
lightsail:CreateRelationalDatabaseSnapshot [write] => *
lightsail:DeleteAlarm [write] => Alarm*
lightsail:DeleteAutoSnapshot [write] => *
lightsail:DeleteBucket [write] => Bucket*
lightsail:DeleteBucketAccessKey [write] => Bucket*
lightsail:DeleteCertificate [write] => Certificate*
lightsail:DeleteContactMethod [write] => *
lightsail:DeleteContainerImage [write] => ContainerService*
lightsail:DeleteContainerService [write] => ContainerService*
lightsail:DeleteDisk [write] => Disk*
lightsail:DeleteDiskSnapshot [write] => DiskSnapshot*
lightsail:DeleteDistribution [write] => Distribution*
lightsail:DeleteDomain [write] => Domain*
lightsail:DeleteDomainEntry [write] => Domain*
lightsail:DeleteInstance [write] => Instance*
lightsail:DeleteInstanceSnapshot [write] => InstanceSnapshot*
lightsail:DeleteKeyPair [write] => KeyPair*
lightsail:DeleteKnownHostKeys [write] => Instance*
lightsail:DeleteLoadBalancer [write] => LoadBalancer*
lightsail:DeleteLoadBalancerTlsCertificate [write] => LoadBalancer*
lightsail:DeleteRelationalDatabase [write] => RelationalDatabase*
lightsail:DeleteRelationalDatabaseSnapshot [write] => RelationalDatabaseSnapshot*
lightsail:DetachCertificateFromDistribution [write] => Distribution*
lightsail:DetachDisk [write] => Disk*
lightsail:DetachInstancesFromLoadBalancer [write] => LoadBalancer*
lightsail:DetachStaticIp [write] => StaticIp*
lightsail:DisableAddOn [write] => *
lightsail:DownloadDefaultKeyPair [write] => *
lightsail:EnableAddOn [write] => *
lightsail:ExportSnapshot [write] => DiskSnapshot,InstanceSnapshot
lightsail:GetActiveNames [read] => *
lightsail:GetAlarms [read] => *
lightsail:GetAutoSnapshots [read] => *
lightsail:GetBlueprints [read] => *
lightsail:GetBucketAccessKeys [read] => *
lightsail:GetBucketBundles [read] => *
lightsail:GetBucketMetricData [read] => *
lightsail:GetBuckets [read] => *
lightsail:GetBundles [read] => *
lightsail:GetCertificates [read] => *
lightsail:GetCloudFormationStackRecords [read] => *
lightsail:GetContactMethods [read] => *
lightsail:GetContainerAPIMetadata [read] => *
lightsail:GetContainerImages [read] => *
lightsail:GetContainerLog [read] => *
lightsail:GetContainerServiceDeployments [read] => *
lightsail:GetContainerServiceMetricData [read] => *
lightsail:GetContainerServicePowers [read] => *
lightsail:GetContainerServices [read] => *
lightsail:GetDisk [read] => *
lightsail:GetDiskSnapshot [read] => *
lightsail:GetDiskSnapshots [read] => *
lightsail:GetDisks [read] => *
lightsail:GetDistributionBundles [read] => *
lightsail:GetDistributionLatestCacheReset [read] => *
lightsail:GetDistributionMetricData [read] => *
lightsail:GetDistributions [read] => *
lightsail:GetDomain [read] => *
lightsail:GetDomains [read] => *
lightsail:GetExportSnapshotRecords [read] => *
lightsail:GetInstance [read] => *
lightsail:GetInstanceAccessDetails [write] => Instance*
lightsail:GetInstanceMetricData [read] => *
lightsail:GetInstancePortStates [read] => *
lightsail:GetInstanceSnapshot [read] => *
lightsail:GetInstanceSnapshots [read] => *
lightsail:GetInstanceState [read] => *
lightsail:GetInstances [read] => *
lightsail:GetKeyPair [read] => *
lightsail:GetKeyPairs [read] => *
lightsail:GetLoadBalancer [read] => *
lightsail:GetLoadBalancerMetricData [read] => *
lightsail:GetLoadBalancerTlsCertificates [read] => *
lightsail:GetLoadBalancerTlsPolicies [read] => *
lightsail:GetLoadBalancers [read] => *
lightsail:GetOperation [read] => *
lightsail:GetOperations [read] => *
lightsail:GetOperationsForResource [read] => *
lightsail:GetRegions [read] => *
lightsail:GetRelationalDatabase [read] => *
lightsail:GetRelationalDatabaseBlueprints [read] => *
lightsail:GetRelationalDatabaseBundles [read] => *
lightsail:GetRelationalDatabaseEvents [read] => *
lightsail:GetRelationalDatabaseLogEvents [read] => *
lightsail:GetRelationalDatabaseLogStreams [read] => *
lightsail:GetRelationalDatabaseMasterUserPassword [write] => RelationalDatabase*
lightsail:GetRelationalDatabaseMetricData [read] => *
lightsail:GetRelationalDatabaseParameters [read] => *
lightsail:GetRelationalDatabaseSnapshot [read] => *
lightsail:GetRelationalDatabaseSnapshots [read] => *
lightsail:GetRelationalDatabases [read] => *
lightsail:GetStaticIp [read] => *
lightsail:GetStaticIps [read] => *
lightsail:ImportKeyPair [write] => *
lightsail:IsVpcPeered [read] => *
lightsail:OpenInstancePublicPorts [write] => Instance*
lightsail:PeerVpc [write] => *
lightsail:PutAlarm [write] => Alarm*
lightsail:PutInstancePublicPorts [write] => Instance*
lightsail:RebootInstance [write] => Instance*
lightsail:RebootRelationalDatabase [write] => RelationalDatabase*
lightsail:RegisterContainerImage [write] => ContainerService*
lightsail:ReleaseStaticIp [write] => StaticIp*
lightsail:ResetDistributionCache [write] => Distribution*
lightsail:SendContactMethodVerification [write] => *
lightsail:SetIpAddressType [write] => Distribution,Instance,LoadBalancer
lightsail:SetResourceAccessForBucket [write] => Bucket*,Instance*
lightsail:StartInstance [write] => Instance*
lightsail:StartRelationalDatabase [write] => RelationalDatabase*
lightsail:StopInstance [write] => Instance*
lightsail:StopRelationalDatabase [write] => RelationalDatabase*
lightsail:TagResource [tagging] => *,Bucket,Certificate,ContainerService,Disk,DiskSnapshot,Distribution,Domain,Instance,InstanceSnapshot,KeyPair,LoadBalancer,RelationalDatabase,RelationalDatabaseSnapshot,StaticIp
lightsail:TestAlarm [write] => Alarm*
lightsail:UnpeerVpc [write] => *
lightsail:UntagResource [tagging] => *,Bucket,Certificate,ContainerService,Disk,DiskSnapshot,Distribution,Domain,Instance,InstanceSnapshot,KeyPair,LoadBalancer,RelationalDatabase,RelationalDatabaseSnapshot,StaticIp
lightsail:UpdateBucket [write] => Bucket*
lightsail:UpdateBucketBundle [write] => Bucket*
lightsail:UpdateContainerService [write] => ContainerService*
lightsail:UpdateDistribution [write] => Distribution*
lightsail:UpdateDistributionBundle [write] => Distribution*
lightsail:UpdateDomainEntry [write] => Domain*
lightsail:UpdateInstanceMetadataOptions [write] => Instance*
lightsail:UpdateLoadBalancerAttribute [write] => LoadBalancer*
lightsail:UpdateRelationalDatabase [write] => RelationalDatabase*
lightsail:UpdateRelationalDatabaseParameters [write] => RelationalDatabase*
logs:AssociateKmsKey [write] => log-group*
logs:CancelExportTask [write] => *
logs:CreateExportTask [write] => log-group*
logs:CreateLogDelivery [write] => *
logs:CreateLogGroup [write] => log-group*
logs:CreateLogStream [write] => log-group*
logs:DeleteDestination [write] => *
logs:DeleteLogDelivery [write] => *
logs:DeleteLogGroup [write] => log-group*
logs:DeleteLogStream [write] => log-stream*
logs:DeleteMetricFilter [write] => log-group*
logs:DeleteQueryDefinition [write] => *
logs:DeleteResourcePolicy [permissions-management] => *
logs:DeleteRetentionPolicy [write] => log-group*
logs:DeleteSubscriptionFilter [write] => log-group*
logs:DescribeDestinations [list] => *
logs:DescribeExportTasks [list] => *
logs:DescribeLogGroups [list] => log-group*
logs:DescribeLogStreams [list] => log-group*
logs:DescribeMetricFilters [list] => log-group*
logs:DescribeQueries [list] => *
logs:DescribeQueryDefinitions [list] => *
logs:DescribeResourcePolicies [list] => *
logs:DescribeSubscriptionFilters [list] => log-group*
logs:DisassociateKmsKey [write] => log-group*
logs:FilterLogEvents [read] => log-group*
logs:GetLogDelivery [read] => *
logs:GetLogEvents [read] => log-stream*
logs:GetLogGroupFields [read] => log-group*
logs:GetLogRecord [read] => *
logs:GetQueryResults [read] => *
logs:ListLogDeliveries [list] => *
logs:ListTagsLogGroup [list] => log-group*
logs:PutDestination [write] => *
logs:PutDestinationPolicy [write] => *
logs:PutLogEvents [write] => log-stream*
logs:PutMetricFilter [write] => log-group*
logs:PutQueryDefinition [write] => *
logs:PutResourcePolicy [permissions-management] => *
logs:PutRetentionPolicy [write] => log-group*
logs:PutSubscriptionFilter [write] => destination,log-group*
logs:StartQuery [read] => log-group*
logs:StopQuery [read] => *
logs:TagLogGroup [tagging] => log-group*
logs:TestMetricFilter [read] => *
logs:UntagLogGroup [tagging] => log-group*
logs:UpdateLogDelivery [write] => *
lookoutequipment:CreateDataset [write] => *,dataset*
lookoutequipment:CreateInferenceScheduler [write] => *,inference-scheduler*,model*
lookoutequipment:CreateLabel [write] => label-group*
lookoutequipment:CreateLabelGroup [write] => *,label-group*
lookoutequipment:CreateModel [write] => *,dataset*,model*
lookoutequipment:DeleteDataset [write] => dataset*
lookoutequipment:DeleteInferenceScheduler [write] => inference-scheduler*
lookoutequipment:DeleteLabel [write] => label-group*
lookoutequipment:DeleteLabelGroup [write] => label-group*
lookoutequipment:DeleteModel [write] => model*
lookoutequipment:DescribeDataIngestionJob [read] => *
lookoutequipment:DescribeDataset [read] => dataset*
lookoutequipment:DescribeInferenceScheduler [read] => inference-scheduler*
lookoutequipment:DescribeLabelGroup [read] => label-group*
lookoutequipment:DescribeModel [read] => model*
lookoutequipment:Describelabel [read] => label-group*
lookoutequipment:ListDataIngestionJobs [list] => dataset*
lookoutequipment:ListDatasets [list] => *
lookoutequipment:ListInferenceExecutions [read] => inference-scheduler*
lookoutequipment:ListInferenceSchedulers [list] => *
lookoutequipment:ListLabelGroups [list] => label-group*
lookoutequipment:ListLabels [list] => label-group*
lookoutequipment:ListModels [list] => *
lookoutequipment:ListSensorStatistics [list] => dataset*
lookoutequipment:ListTagsForResource [read] => dataset,inference-scheduler,label-group,model
lookoutequipment:StartDataIngestionJob [write] => dataset*
lookoutequipment:StartInferenceScheduler [write] => inference-scheduler*
lookoutequipment:StopInferenceScheduler [write] => inference-scheduler*
lookoutequipment:TagResource [tagging] => *,dataset,inference-scheduler,label-group,model
lookoutequipment:UntagResource [tagging] => *,dataset,inference-scheduler,label-group,model
lookoutequipment:UpdateInferenceScheduler [write] => inference-scheduler*
lookoutequipment:UpdateLabelGroup [write] => label-group*
lookoutmetrics:ActivateAnomalyDetector [write] => AnomalyDetector*
lookoutmetrics:BackTestAnomalyDetector [write] => AnomalyDetector*
lookoutmetrics:CreateAlert [write] => *,Alert*,AnomalyDetector*
lookoutmetrics:CreateAnomalyDetector [write] => *,AnomalyDetector*
lookoutmetrics:CreateMetricSet [write] => *,AnomalyDetector*,MetricSet*
lookoutmetrics:DeactivateAnomalyDetector [write] => AnomalyDetector*
lookoutmetrics:DeleteAlert [write] => Alert*
lookoutmetrics:DeleteAnomalyDetector [write] => AnomalyDetector*
lookoutmetrics:DescribeAlert [read] => Alert*
lookoutmetrics:DescribeAnomalyDetectionExecutions [read] => AnomalyDetector*
lookoutmetrics:DescribeAnomalyDetector [read] => AnomalyDetector*
lookoutmetrics:DescribeMetricSet [read] => MetricSet*
lookoutmetrics:DetectMetricSetConfig [write] => AnomalyDetector*
lookoutmetrics:GetAnomalyGroup [read] => AnomalyDetector*
lookoutmetrics:GetDataQualityMetrics [read] => AnomalyDetector*
lookoutmetrics:GetFeedback [read] => AnomalyDetector*
lookoutmetrics:GetSampleData [read] => *
lookoutmetrics:ListAlerts [list] => AnomalyDetector
lookoutmetrics:ListAnomalyDetectors [list] => *
lookoutmetrics:ListAnomalyGroupRelatedMetrics [list] => AnomalyDetector*
lookoutmetrics:ListAnomalyGroupSummaries [list] => AnomalyDetector*
lookoutmetrics:ListAnomalyGroupTimeSeries [list] => AnomalyDetector*
lookoutmetrics:ListMetricSets [list] => AnomalyDetector
lookoutmetrics:ListTagsForResource [read] => Alert,AnomalyDetector,MetricSet
lookoutmetrics:PutFeedback [write] => AnomalyDetector*
lookoutmetrics:TagResource [tagging] => *,Alert,AnomalyDetector,MetricSet
lookoutmetrics:UntagResource [tagging] => *,Alert,AnomalyDetector,MetricSet
lookoutmetrics:UpdateAlert [write] => Alert*
lookoutmetrics:UpdateAnomalyDetector [write] => AnomalyDetector*
lookoutmetrics:UpdateMetricSet [write] => MetricSet*
lookoutvision:CreateDataset [write] => *
lookoutvision:CreateModel [write] => *,model*
lookoutvision:CreateProject [write] => project*
lookoutvision:DeleteDataset [write] => *
lookoutvision:DeleteModel [write] => model*
lookoutvision:DeleteProject [write] => project*
lookoutvision:DescribeDataset [read] => *
lookoutvision:DescribeModel [read] => model*
lookoutvision:DescribeModelPackagingJob [read] => *
lookoutvision:DescribeProject [read] => project*
lookoutvision:DescribeTrialDetection [read] => *
lookoutvision:DetectAnomalies [write] => model*
lookoutvision:ListDatasetEntries [read] => *
lookoutvision:ListModelPackagingJobs [list] => *
lookoutvision:ListModels [list] => *
lookoutvision:ListProjects [list] => *
lookoutvision:ListTagsForResource [read] => model
lookoutvision:ListTrialDetections [list] => *
lookoutvision:StartModel [write] => model*
lookoutvision:StartModelPackagingJob [write] => model*
lookoutvision:StartTrialDetection [write] => *
lookoutvision:StopModel [write] => model*
lookoutvision:TagResource [tagging] => *,model
lookoutvision:UntagResource [tagging] => *,model
lookoutvision:UpdateDatasetEntries [write] => *
m2:CancelBatchJobExecution [write] => Application*
m2:CreateApplication [write] => *
m2:CreateDataSetImportTask [write] => Application*
m2:CreateDeployment [write] => Application*,Environment
m2:CreateEnvironment [write] => *
m2:DeleteApplication [write] => Application*
m2:DeleteApplicationFromEnvironment [write] => Application*
m2:DeleteEnvironment [write] => Environment*
m2:GetApplication [read] => Application*
m2:GetApplicationVersion [read] => Application*
m2:GetBatchJobExecution [read] => Application*
m2:GetDataSetDetails [read] => Application*
m2:GetDataSetImportTask [read] => Application*
m2:GetDeployment [read] => Application*
m2:GetEnvironment [read] => Environment*
m2:ListApplicationVersions [read] => Application*
m2:ListApplications [list] => Environment
m2:ListBatchJobDefinitions [read] => Application*
m2:ListBatchJobExecutions [read] => Application*
m2:ListDataSetImportHistory [read] => Application*
m2:ListDataSets [read] => Application*
m2:ListDeployments [read] => Application*
m2:ListEngineVersions [read] => *
m2:ListEnvironments [list] => *
m2:ListTagsForResource [read] => *
m2:StartApplication [write] => Application*
m2:StartBatchJob [write] => Application*
m2:StopApplication [write] => Application*
m2:TagResource [tagging] => *,Application,Environment
m2:UntagResource [tagging] => *,Application,Environment
m2:UpdateApplication [write] => Application*
m2:UpdateEnvironment [write] => Environment*
machinelearning:AddTags [tagging] => batchprediction,datasource,evaluation,mlmodel
machinelearning:CreateBatchPrediction [write] => batchprediction*,datasource*,mlmodel*
machinelearning:CreateDataSourceFromRDS [write] => datasource*
machinelearning:CreateDataSourceFromRedshift [write] => datasource*
machinelearning:CreateDataSourceFromS3 [write] => datasource*
machinelearning:CreateEvaluation [write] => datasource*,evaluation*,mlmodel*
machinelearning:CreateMLModel [write] => datasource*,mlmodel*
machinelearning:CreateRealtimeEndpoint [write] => mlmodel*
machinelearning:DeleteBatchPrediction [write] => batchprediction*
machinelearning:DeleteDataSource [write] => datasource*
machinelearning:DeleteEvaluation [write] => evaluation*
machinelearning:DeleteMLModel [write] => mlmodel*
machinelearning:DeleteRealtimeEndpoint [write] => mlmodel*
machinelearning:DeleteTags [tagging] => batchprediction,datasource,evaluation,mlmodel
machinelearning:DescribeBatchPredictions [list] => *
machinelearning:DescribeDataSources [list] => *
machinelearning:DescribeEvaluations [list] => *
machinelearning:DescribeMLModels [list] => *
machinelearning:DescribeTags [list] => batchprediction,datasource,evaluation,mlmodel
machinelearning:GetBatchPrediction [read] => batchprediction*
machinelearning:GetDataSource [read] => datasource*
machinelearning:GetEvaluation [read] => datasource*
machinelearning:GetMLModel [read] => mlmodel*
machinelearning:Predict [write] => mlmodel*
machinelearning:UpdateBatchPrediction [write] => batchprediction*
machinelearning:UpdateDataSource [write] => datasource*
machinelearning:UpdateEvaluation [write] => evaluation*
machinelearning:UpdateMLModel [write] => mlmodel*
macie2:AcceptInvitation [write] => *
macie2:BatchGetCustomDataIdentifiers [read] => CustomDataIdentifier*
macie2:CreateAllowList [write] => *
macie2:CreateClassificationJob [write] => *,ClassificationJob*
macie2:CreateCustomDataIdentifier [write] => *,CustomDataIdentifier*
macie2:CreateFindingsFilter [write] => *,FindingsFilter*
macie2:CreateInvitations [write] => *
macie2:CreateMember [write] => *,Member*
macie2:CreateSampleFindings [write] => *
macie2:DeclineInvitations [write] => *
macie2:DeleteAllowList [write] => AllowList*
macie2:DeleteCustomDataIdentifier [write] => CustomDataIdentifier*
macie2:DeleteFindingsFilter [write] => FindingsFilter*
macie2:DeleteInvitations [write] => *
macie2:DeleteMember [write] => Member*
macie2:DescribeBuckets [read] => *
macie2:DescribeClassificationJob [read] => ClassificationJob*
macie2:DescribeOrganizationConfiguration [read] => *
macie2:DisableMacie [write] => *
macie2:DisableOrganizationAdminAccount [write] => *
macie2:DisassociateFromAdministratorAccount [write] => *
macie2:DisassociateFromMasterAccount [write] => *
macie2:DisassociateMember [write] => Member*
macie2:EnableMacie [write] => *
macie2:EnableOrganizationAdminAccount [write] => *
macie2:GetAdministratorAccount [read] => *
macie2:GetAllowList [read] => AllowList*
macie2:GetBucketStatistics [read] => *
macie2:GetClassificationExportConfiguration [read] => *
macie2:GetCustomDataIdentifier [read] => CustomDataIdentifier*
macie2:GetFindingStatistics [read] => *
macie2:GetFindings [read] => *
macie2:GetFindingsFilter [read] => FindingsFilter*
macie2:GetFindingsPublicationConfiguration [read] => *
macie2:GetInvitationsCount [read] => *
macie2:GetMacieSession [read] => *
macie2:GetMasterAccount [read] => *
macie2:GetMember [read] => Member*
macie2:GetRevealConfiguration [read] => *
macie2:GetSensitiveDataOccurrences [read] => *
macie2:GetSensitiveDataOccurrencesAvailability [read] => *
macie2:GetUsageStatistics [read] => *
macie2:GetUsageTotals [read] => *
macie2:ListAllowLists [list] => *
macie2:ListClassificationJobs [list] => *
macie2:ListCustomDataIdentifiers [list] => *
macie2:ListFindings [list] => *
macie2:ListFindingsFilters [list] => *
macie2:ListInvitations [list] => *
macie2:ListManagedDataIdentifiers [list] => *
macie2:ListMembers [list] => *
macie2:ListOrganizationAdminAccounts [list] => *
macie2:ListTagsForResource [read] => AllowList,ClassificationJob,CustomDataIdentifier,FindingsFilter,Member
macie2:PutClassificationExportConfiguration [write] => *
macie2:PutFindingsPublicationConfiguration [write] => *
macie2:SearchResources [read] => *
macie2:TagResource [tagging] => *,AllowList,ClassificationJob,CustomDataIdentifier,FindingsFilter,Member
macie2:TestCustomDataIdentifier [write] => *
macie2:UntagResource [tagging] => *,AllowList,ClassificationJob,CustomDataIdentifier,FindingsFilter,Member
macie2:UpdateAllowList [write] => AllowList*
macie2:UpdateClassificationJob [write] => *,ClassificationJob*
macie2:UpdateFindingsFilter [write] => *,FindingsFilter*
macie2:UpdateMacieSession [write] => *
macie2:UpdateMemberSession [write] => *
macie2:UpdateOrganizationConfiguration [write] => *
macie2:UpdateRevealConfiguration [write] => *
managedblockchain:CreateMember [write] => *,network*
managedblockchain:CreateNetwork [write] => *
managedblockchain:CreateNode [write] => *,member,network
managedblockchain:CreateProposal [write] => *,network*
managedblockchain:DeleteMember [write] => member*
managedblockchain:DeleteNode [write] => node*
managedblockchain:GetMember [read] => member*
managedblockchain:GetNetwork [read] => network*
managedblockchain:GetNode [read] => node*
managedblockchain:GetProposal [read] => proposal*
managedblockchain:ListInvitations [list] => *
managedblockchain:ListMembers [list] => network*
managedblockchain:ListNetworks [list] => *
managedblockchain:ListNodes [list] => member,network
managedblockchain:ListProposalVotes [read] => proposal*
managedblockchain:ListProposals [list] => network*
managedblockchain:ListTagsForResource [read] => invitation,member,network,node,proposal
managedblockchain:RejectInvitation [write] => invitation*
managedblockchain:TagResource [tagging] => *,invitation,member,network,node,proposal
managedblockchain:UntagResource [tagging] => *,invitation,member,network,node,proposal
managedblockchain:UpdateMember [write] => member*
managedblockchain:UpdateNode [write] => node*
managedblockchain:VoteOnProposal [write] => proposal*
marketplacecommerceanalytics:GenerateDataSet [write] => *
marketplacecommerceanalytics:StartSupportDataExport [write] => *
mechanicalturk:AcceptQualificationRequest [write] => *
mechanicalturk:ApproveAssignment [write] => *
mechanicalturk:AssociateQualificationWithWorker [write] => *
mechanicalturk:CreateAdditionalAssignmentsForHIT [write] => *
mechanicalturk:CreateHIT [write] => *
mechanicalturk:CreateHITType [write] => *
mechanicalturk:CreateHITWithHITType [write] => *
mechanicalturk:CreateQualificationType [write] => *
mechanicalturk:CreateWorkerBlock [write] => *
mechanicalturk:DeleteHIT [write] => *
mechanicalturk:DeleteQualificationType [write] => *
mechanicalturk:DeleteWorkerBlock [write] => *
mechanicalturk:DisassociateQualificationFromWorker [write] => *
mechanicalturk:GetAccountBalance [read] => *
mechanicalturk:GetAssignment [read] => *
mechanicalturk:GetFileUploadURL [read] => *
mechanicalturk:GetHIT [read] => *
mechanicalturk:GetQualificationScore [read] => *
mechanicalturk:GetQualificationType [read] => *
mechanicalturk:ListAssignmentsForHIT [list] => *
mechanicalturk:ListBonusPayments [list] => *
mechanicalturk:ListHITs [list] => *
mechanicalturk:ListHITsForQualificationType [list] => *
mechanicalturk:ListQualificationRequests [list] => *
mechanicalturk:ListQualificationTypes [list] => *
mechanicalturk:ListReviewPolicyResultsForHIT [list] => *
mechanicalturk:ListReviewableHITs [list] => *
mechanicalturk:ListWorkerBlocks [list] => *
mechanicalturk:ListWorkersWithQualificationType [list] => *
mechanicalturk:NotifyWorkers [write] => *
mechanicalturk:RejectAssignment [write] => *
mechanicalturk:RejectQualificationRequest [write] => *
mechanicalturk:SendBonus [write] => *
mechanicalturk:SendTestEventNotification [write] => *
mechanicalturk:UpdateExpirationForHIT [write] => *
mechanicalturk:UpdateHITReviewStatus [write] => *
mechanicalturk:UpdateHITTypeOfHIT [write] => *
mechanicalturk:UpdateNotificationSettings [write] => *
mechanicalturk:UpdateQualificationType [write] => *
mediaconnect:AddFlowMediaStreams [write] => *
mediaconnect:AddFlowOutputs [write] => *
mediaconnect:AddFlowSources [write] => *
mediaconnect:AddFlowVpcInterfaces [write] => *
mediaconnect:CreateFlow [write] => *
mediaconnect:DeleteFlow [write] => *
mediaconnect:DescribeFlow [read] => *
mediaconnect:DescribeOffering [read] => *
mediaconnect:DescribeReservation [read] => *
mediaconnect:GrantFlowEntitlements [write] => *
mediaconnect:ListEntitlements [list] => *
mediaconnect:ListFlows [list] => *
mediaconnect:ListOfferings [list] => *
mediaconnect:ListReservations [list] => *
mediaconnect:ListTagsForResource [read] => *
mediaconnect:PurchaseOffering [write] => *
mediaconnect:RemoveFlowMediaStream [write] => *
mediaconnect:RemoveFlowOutput [write] => *
mediaconnect:RemoveFlowSource [write] => *
mediaconnect:RemoveFlowVpcInterface [write] => *
mediaconnect:RevokeFlowEntitlement [write] => *
mediaconnect:StartFlow [write] => *
mediaconnect:StopFlow [write] => *
mediaconnect:TagResource [tagging] => *
mediaconnect:UntagResource [tagging] => *
mediaconnect:UpdateFlow [write] => *
mediaconnect:UpdateFlowEntitlement [write] => *
mediaconnect:UpdateFlowMediaStream [write] => *
mediaconnect:UpdateFlowOutput [write] => *
mediaconnect:UpdateFlowSource [write] => *
mediaconvert:AssociateCertificate [write] => *
mediaconvert:CancelJob [write] => Job*
mediaconvert:CreateJob [write] => *,JobTemplate,Preset,Queue
mediaconvert:CreateJobTemplate [write] => *,Preset,Queue
mediaconvert:CreatePreset [write] => *
mediaconvert:CreateQueue [write] => *
mediaconvert:DeleteJobTemplate [write] => JobTemplate*
mediaconvert:DeletePolicy [write] => *
mediaconvert:DeletePreset [write] => Preset*
mediaconvert:DeleteQueue [write] => Queue*
mediaconvert:DescribeEndpoints [list] => *
mediaconvert:DisassociateCertificate [write] => *
mediaconvert:GetJob [read] => Job*
mediaconvert:GetJobTemplate [read] => JobTemplate*
mediaconvert:GetPolicy [read] => *
mediaconvert:GetPreset [read] => Preset*
mediaconvert:GetQueue [read] => Queue*
mediaconvert:ListJobTemplates [list] => *
mediaconvert:ListJobs [list] => Queue
mediaconvert:ListPresets [list] => *
mediaconvert:ListQueues [list] => *
mediaconvert:ListTagsForResource [read] => JobTemplate,Preset,Queue
mediaconvert:PutPolicy [write] => *
mediaconvert:TagResource [tagging] => *,JobTemplate,Preset,Queue
mediaconvert:UntagResource [tagging] => *,JobTemplate,Preset,Queue
mediaconvert:UpdateJobTemplate [write] => JobTemplate*,Preset,Queue
mediaconvert:UpdatePreset [write] => Preset*
mediaconvert:UpdateQueue [write] => Queue*
mediaimport:CreateDatabaseBinarySnapshot [write] => *
medialive:AcceptInputDeviceTransfer [write] => input-device*
medialive:BatchDelete [write] => *
medialive:BatchStart [write] => *
medialive:BatchStop [write] => *
medialive:BatchUpdateSchedule [write] => channel*
medialive:CancelInputDeviceTransfer [write] => input-device*
medialive:ClaimDevice [write] => input-device*
medialive:CreateChannel [write] => *,channel*,input*
medialive:CreateInput [write] => *,input*,input-security-group*
medialive:CreateInputSecurityGroup [write] => *,input-security-group*
medialive:CreateMultiplex [write] => *,multiplex*
medialive:CreateMultiplexProgram [write] => multiplex*
medialive:CreatePartnerInput [write] => *,input*
medialive:CreateTags [tagging] => *,channel,input,input-security-group,multiplex,reservation
medialive:DeleteChannel [write] => channel*
medialive:DeleteInput [write] => input*
medialive:DeleteInputSecurityGroup [write] => input-security-group*
medialive:DeleteMultiplex [write] => multiplex*
medialive:DeleteMultiplexProgram [write] => multiplex*
medialive:DeleteReservation [write] => reservation*
medialive:DeleteSchedule [write] => channel*
medialive:DeleteTags [tagging] => *,channel,input,input-security-group,multiplex,reservation
medialive:DescribeChannel [read] => channel*
medialive:DescribeInput [read] => input*
medialive:DescribeInputDevice [read] => input-device*
medialive:DescribeInputDeviceThumbnail [read] => input-device*
medialive:DescribeInputSecurityGroup [read] => input-security-group*
medialive:DescribeMultiplex [read] => multiplex*
medialive:DescribeMultiplexProgram [read] => multiplex*
medialive:DescribeOffering [read] => offering*
medialive:DescribeReservation [read] => reservation*
medialive:DescribeSchedule [read] => channel*
medialive:ListChannels [list] => *
medialive:ListInputDeviceTransfers [list] => *
medialive:ListInputDevices [list] => *
medialive:ListInputSecurityGroups [list] => *
medialive:ListInputs [list] => *
medialive:ListMultiplexPrograms [list] => *
medialive:ListMultiplexes [list] => *
medialive:ListOfferings [list] => *
medialive:ListReservations [list] => *
medialive:ListTagsForResource [list] => channel,input,input-security-group,multiplex,reservation
medialive:PurchaseOffering [write] => *,offering*,reservation*
medialive:RebootInputDevice [write] => input-device*
medialive:RejectInputDeviceTransfer [write] => input-device*
medialive:StartChannel [write] => channel*
medialive:StartInputDeviceMaintenanceWindow [write] => input-device*
medialive:StartMultiplex [write] => multiplex*
medialive:StopChannel [write] => channel*
medialive:StopMultiplex [write] => multiplex*
medialive:TransferInputDevice [write] => input-device*
medialive:UpdateChannel [write] => channel*
medialive:UpdateChannelClass [write] => channel*
medialive:UpdateInput [write] => input*
medialive:UpdateInputDevice [write] => input-device*
medialive:UpdateInputSecurityGroup [write] => *,input-security-group*
medialive:UpdateMultiplex [write] => multiplex*
medialive:UpdateMultiplexProgram [write] => multiplex*
medialive:UpdateReservation [write] => reservation*
mediapackage:ConfigureLogs [write] => channels*
mediapackage:CreateChannel [write] => *
mediapackage:CreateHarvestJob [write] => *
mediapackage:CreateOriginEndpoint [write] => *
mediapackage:DeleteChannel [write] => channels*
mediapackage:DeleteOriginEndpoint [write] => origin_endpoints*
mediapackage:DescribeChannel [read] => channels*
mediapackage:DescribeHarvestJob [read] => harvest_jobs*
mediapackage:DescribeOriginEndpoint [read] => origin_endpoints*
mediapackage:ListChannels [read] => *
mediapackage:ListHarvestJobs [read] => *
mediapackage:ListOriginEndpoints [read] => *
mediapackage:ListTagsForResource [read] => channels,harvest_jobs,origin_endpoints
mediapackage:RotateChannelCredentials [write] => channels*
mediapackage:RotateIngestEndpointCredentials [write] => channels*
mediapackage:TagResource [tagging] => *,channels,harvest_jobs,origin_endpoints
mediapackage:UntagResource [tagging] => *,channels,harvest_jobs,origin_endpoints
mediapackage:UpdateChannel [write] => channels*
mediapackage:UpdateOriginEndpoint [write] => origin_endpoints*
mediapackage-vod:ConfigureLogs [write] => packaging-groups*
mediapackage-vod:CreateAsset [write] => *
mediapackage-vod:CreatePackagingConfiguration [write] => *
mediapackage-vod:CreatePackagingGroup [write] => *
mediapackage-vod:DeleteAsset [write] => assets*
mediapackage-vod:DeletePackagingConfiguration [write] => packaging-configurations*
mediapackage-vod:DeletePackagingGroup [write] => packaging-groups*
mediapackage-vod:DescribeAsset [read] => assets*
mediapackage-vod:DescribePackagingConfiguration [read] => packaging-configurations*
mediapackage-vod:DescribePackagingGroup [read] => packaging-groups*
mediapackage-vod:ListAssets [list] => *
mediapackage-vod:ListPackagingConfigurations [list] => *
mediapackage-vod:ListPackagingGroups [list] => *
mediapackage-vod:ListTagsForResource [read] => assets,packaging-configurations,packaging-groups
mediapackage-vod:TagResource [tagging] => *,assets,packaging-configurations,packaging-groups
mediapackage-vod:UntagResource [tagging] => *,assets,packaging-configurations,packaging-groups
mediapackage-vod:UpdatePackagingGroup [write] => packaging-groups*
mediastore:CreateContainer [write] => *
mediastore:DeleteContainer [write] => container*
mediastore:DeleteContainerPolicy [permissions-management] => container*
mediastore:DeleteCorsPolicy [write] => container*
mediastore:DeleteLifecyclePolicy [write] => container*
mediastore:DeleteMetricPolicy [write] => container*
mediastore:DeleteObject [write] => object*
mediastore:DescribeContainer [list] => container*
mediastore:DescribeObject [list] => object*
mediastore:GetContainerPolicy [read] => container*
mediastore:GetCorsPolicy [read] => container*
mediastore:GetLifecyclePolicy [read] => container*
mediastore:GetMetricPolicy [read] => container*
mediastore:GetObject [read] => object*
mediastore:ListContainers [list] => *
mediastore:ListItems [list] => folder
mediastore:ListTagsForResource [read] => container
mediastore:PutContainerPolicy [permissions-management] => container*
mediastore:PutCorsPolicy [write] => container*
mediastore:PutLifecyclePolicy [write] => container*
mediastore:PutMetricPolicy [write] => container*
mediastore:PutObject [write] => object*
mediastore:StartAccessLogging [write] => container*
mediastore:StopAccessLogging [write] => container*
mediastore:TagResource [tagging] => *,container
mediastore:UntagResource [tagging] => *,container
mediatailor:ConfigureLogsForPlaybackConfiguration [write] => playbackConfiguration*
mediatailor:CreateChannel [write] => *
mediatailor:CreateLiveSource [write] => *,sourceLocation*
mediatailor:CreatePrefetchSchedule [write] => playbackConfiguration*
mediatailor:CreateProgram [write] => channel*
mediatailor:CreateSourceLocation [write] => *
mediatailor:CreateVodSource [write] => *,sourceLocation*
mediatailor:DeleteChannel [write] => channel*
mediatailor:DeleteChannelPolicy [permissions-management] => channel*
mediatailor:DeleteLiveSource [write] => liveSource*,sourceLocation*
mediatailor:DeletePlaybackConfiguration [write] => playbackConfiguration*
mediatailor:DeletePrefetchSchedule [write] => playbackConfiguration*,prefetchSchedule*
mediatailor:DeleteProgram [write] => channel*,program*
mediatailor:DeleteSourceLocation [write] => sourceLocation*
mediatailor:DeleteVodSource [write] => sourceLocation*,vodSource*
mediatailor:DescribeChannel [read] => channel*
mediatailor:DescribeLiveSource [read] => liveSource*,sourceLocation*
mediatailor:DescribeProgram [read] => channel*,program*
mediatailor:DescribeSourceLocation [read] => sourceLocation*
mediatailor:DescribeVodSource [read] => sourceLocation*,vodSource*
mediatailor:GetChannelPolicy [read] => channel*
mediatailor:GetChannelSchedule [read] => channel*
mediatailor:GetPlaybackConfiguration [read] => playbackConfiguration*
mediatailor:GetPrefetchSchedule [read] => playbackConfiguration*,prefetchSchedule*
mediatailor:ListAlerts [read] => *
mediatailor:ListChannels [read] => *
mediatailor:ListLiveSources [read] => sourceLocation*
mediatailor:ListPlaybackConfigurations [list] => *
mediatailor:ListPrefetchSchedules [list] => playbackConfiguration*
mediatailor:ListSourceLocations [read] => *
mediatailor:ListTagsForResource [read] => channel,liveSource,playbackConfiguration,sourceLocation,vodSource
mediatailor:ListVodSources [read] => sourceLocation*
mediatailor:PutChannelPolicy [permissions-management] => channel*
mediatailor:PutPlaybackConfiguration [write] => *
mediatailor:StartChannel [write] => channel*
mediatailor:StopChannel [write] => channel*
mediatailor:TagResource [tagging] => *,channel,liveSource,playbackConfiguration,sourceLocation,vodSource
mediatailor:UntagResource [tagging] => *,channel,liveSource,playbackConfiguration,sourceLocation,vodSource
mediatailor:UpdateChannel [write] => channel*
mediatailor:UpdateLiveSource [write] => liveSource*,sourceLocation*
mediatailor:UpdateSourceLocation [write] => sourceLocation*
mediatailor:UpdateVodSource [write] => sourceLocation*,vodSource*
memorydb:BatchUpdateCluster [write] => *,cluster*
memorydb:CopySnapshot [write] => *,snapshot*
memorydb:CreateAcl [write] => *,user*
memorydb:CreateCluster [write] => *,acl*,parametergroup*,snapshot,subnetgroup*
memorydb:CreateParameterGroup [write] => *
memorydb:CreateSnapshot [write] => *,cluster*
memorydb:CreateSubnetGroup [write] => *
memorydb:CreateUser [write] => *
memorydb:DeleteAcl [write] => *,acl*
memorydb:DeleteCluster [write] => *,cluster*,snapshot
memorydb:DeleteParameterGroup [write] => *,parametergroup*
memorydb:DeleteSnapshot [write] => *,snapshot*
memorydb:DeleteSubnetGroup [write] => *,subnetgroup*
memorydb:DeleteUser [write] => *,user*
memorydb:DescribeAcls [read] => *,acl*
memorydb:DescribeClusters [read] => *,cluster*
memorydb:DescribeEngineVersions [read] => *
memorydb:DescribeEvents [read] => *
memorydb:DescribeParameterGroups [read] => *,parametergroup*
memorydb:DescribeParameters [read] => *,parametergroup*
memorydb:DescribeServiceUpdates [read] => *
memorydb:DescribeSnapshots [read] => *,snapshot*
memorydb:DescribeSubnetGroups [read] => *,subnetgroup*
memorydb:DescribeUsers [read] => *,user*
memorydb:FailoverShard [write] => *,cluster*
memorydb:ListAllowedNodeTypeUpdates [read] => *,cluster*
memorydb:ListTags [read] => *,acl,cluster,parametergroup,snapshot,subnetgroup,user
memorydb:ResetParameterGroup [write] => *,parametergroup*
memorydb:TagResource [tagging] => *,acl,cluster,parametergroup,snapshot,subnetgroup,user
memorydb:UntagResource [tagging] => *,acl,cluster,parametergroup,snapshot,subnetgroup,user
memorydb:UpdateAcl [write] => *,acl*,user*
memorydb:UpdateCluster [write] => *,acl,cluster*,parametergroup
memorydb:UpdateParameterGroup [write] => *,parametergroup*
memorydb:UpdateSubnetGroup [write] => *,subnetgroup*
memorydb:UpdateUser [write] => *,user*
mgh:AssociateCreatedArtifact [write] => migrationTask*
mgh:AssociateDiscoveredResource [write] => migrationTask*
mgh:CreateHomeRegionControl [write] => *
mgh:CreateProgressUpdateStream [write] => progressUpdateStream*
mgh:DeleteProgressUpdateStream [write] => progressUpdateStream*
mgh:DescribeApplicationState [read] => *
mgh:DescribeHomeRegionControls [list] => *
mgh:DescribeMigrationTask [read] => migrationTask*
mgh:DisassociateCreatedArtifact [write] => migrationTask*
mgh:DisassociateDiscoveredResource [write] => migrationTask*
mgh:GetHomeRegion [read] => *
mgh:ImportMigrationTask [write] => migrationTask*
mgh:ListApplicationStates [list] => *
mgh:ListCreatedArtifacts [list] => migrationTask*
mgh:ListDiscoveredResources [list] => migrationTask*
mgh:ListMigrationTasks [list] => *
mgh:ListProgressUpdateStreams [list] => *
mgh:NotifyApplicationState [write] => *
mgh:NotifyMigrationTaskState [write] => migrationTask*
mgh:PutResourceAttributes [write] => migrationTask*
mgn:BatchCreateVolumeSnapshotGroupForMgn [write] => SourceServerResource*
mgn:BatchDeleteSnapshotRequestForMgn [write] => *
mgn:ChangeServerLifeCycleState [write] => SourceServerResource*
mgn:CreateLaunchConfigurationTemplate [write] => *
mgn:CreateReplicationConfigurationTemplate [write] => *
mgn:CreateVcenterClientForMgn [write] => *
mgn:DeleteJob [write] => JobResource*
mgn:DeleteLaunchConfigurationTemplate [write] => LaunchConfigurationTemplateResource*
mgn:DeleteReplicationConfigurationTemplate [write] => ReplicationConfigurationTemplateResource*
mgn:DeleteSourceServer [write] => SourceServerResource*
mgn:DeleteVcenterClient [write] => VcenterClientResource*
mgn:DescribeJobLogItems [read] => JobResource*
mgn:DescribeJobs [list] => *
mgn:DescribeLaunchConfigurationTemplates [list] => *
mgn:DescribeReplicationConfigurationTemplates [list] => *
mgn:DescribeReplicationServerAssociationsForMgn [read] => *
mgn:DescribeSnapshotRequestsForMgn [read] => *
mgn:DescribeSourceServers [list] => *
mgn:DescribeVcenterClients [list] => *
mgn:DisconnectFromService [write] => SourceServerResource*
mgn:FinalizeCutover [write] => SourceServerResource*
mgn:GetAgentCommandForMgn [read] => SourceServerResource*
mgn:GetAgentConfirmedResumeInfoForMgn [read] => SourceServerResource*
mgn:GetAgentInstallationAssetsForMgn [read] => *
mgn:GetAgentReplicationInfoForMgn [read] => SourceServerResource*
mgn:GetAgentRuntimeConfigurationForMgn [read] => SourceServerResource*
mgn:GetAgentSnapshotCreditsForMgn [read] => SourceServerResource*
mgn:GetChannelCommandsForMgn [read] => *
mgn:GetLaunchConfiguration [read] => SourceServerResource*
mgn:GetReplicationConfiguration [read] => SourceServerResource*
mgn:GetVcenterClientCommandsForMgn [read] => VcenterClientResource*
mgn:InitializeService [write] => *
mgn:IssueClientCertificateForMgn [write] => SourceServerResource
mgn:ListTagsForResource [read] => *
mgn:MarkAsArchived [write] => SourceServerResource*
mgn:NotifyAgentAuthenticationForMgn [write] => SourceServerResource*
mgn:NotifyAgentConnectedForMgn [write] => SourceServerResource*
mgn:NotifyAgentDisconnectedForMgn [write] => SourceServerResource*
mgn:NotifyAgentReplicationProgressForMgn [write] => SourceServerResource*
mgn:NotifyVcenterClientStartedForMgn [write] => VcenterClientResource*
mgn:RegisterAgentForMgn [write] => *
mgn:RetryDataReplication [write] => SourceServerResource*
mgn:SendAgentLogsForMgn [write] => SourceServerResource*
mgn:SendAgentMetricsForMgn [write] => SourceServerResource*
mgn:SendChannelCommandResultForMgn [write] => *
mgn:SendClientLogsForMgn [write] => *
mgn:SendClientMetricsForMgn [write] => *
mgn:SendVcenterClientCommandResultForMgn [write] => VcenterClientResource*
mgn:SendVcenterClientLogsForMgn [write] => VcenterClientResource*
mgn:SendVcenterClientMetricsForMgn [write] => VcenterClientResource*
mgn:StartCutover [write] => *,SourceServerResource*
mgn:StartReplication [write] => SourceServerResource*
mgn:StartTest [write] => *,SourceServerResource*
mgn:TagResource [tagging] => *,JobResource,LaunchConfigurationTemplateResource,ReplicationConfigurationTemplateResource,SourceServerResource,VcenterClientResource
mgn:TerminateTargetInstances [write] => *,SourceServerResource*
mgn:UntagResource [tagging] => *,JobResource,LaunchConfigurationTemplateResource,ReplicationConfigurationTemplateResource,SourceServerResource,VcenterClientResource
mgn:UpdateAgentBacklogForMgn [write] => SourceServerResource*
mgn:UpdateAgentConversionInfoForMgn [write] => SourceServerResource*
mgn:UpdateAgentReplicationInfoForMgn [write] => SourceServerResource*
mgn:UpdateAgentReplicationProcessStateForMgn [write] => SourceServerResource*
mgn:UpdateAgentSourcePropertiesForMgn [write] => SourceServerResource*
mgn:UpdateLaunchConfiguration [write] => SourceServerResource*
mgn:UpdateLaunchConfigurationTemplate [write] => LaunchConfigurationTemplateResource*
mgn:UpdateReplicationConfiguration [write] => SourceServerResource*
mgn:UpdateReplicationConfigurationTemplate [write] => ReplicationConfigurationTemplateResource*
mgn:UpdateSourceServerReplicationType [write] => SourceServerResource*
mgn:VerifyClientRoleForMgn [read] => *
migrationhub-orchestrator:CreateWorkflow [write] => *
migrationhub-orchestrator:CreateWorkflowStep [write] => workflow*
migrationhub-orchestrator:CreateWorkflowStepGroup [write] => workflow*
migrationhub-orchestrator:DeleteWorkflow [write] => workflow*
migrationhub-orchestrator:DeleteWorkflowStep [write] => workflow*
migrationhub-orchestrator:DeleteWorkflowStepGroup [write] => workflow*
migrationhub-orchestrator:GetMessage [read] => *
migrationhub-orchestrator:GetTemplate [read] => *
migrationhub-orchestrator:GetTemplateStep [read] => *
migrationhub-orchestrator:GetTemplateStepGroup [read] => *
migrationhub-orchestrator:GetWorkflow [read] => workflow*
migrationhub-orchestrator:GetWorkflowStep [read] => workflow*
migrationhub-orchestrator:GetWorkflowStepGroup [read] => workflow*
migrationhub-orchestrator:ListPlugins [list] => *
migrationhub-orchestrator:ListTagsForResource [read] => workflow*
migrationhub-orchestrator:ListTemplateStepGroups [list] => *
migrationhub-orchestrator:ListTemplateSteps [list] => *
migrationhub-orchestrator:ListTemplates [list] => *
migrationhub-orchestrator:ListWorkflowStepGroups [list] => workflow*
migrationhub-orchestrator:ListWorkflowSteps [list] => workflow*
migrationhub-orchestrator:ListWorkflows [list] => *
migrationhub-orchestrator:RegisterPlugin [write] => *
migrationhub-orchestrator:RetryWorkflowStep [write] => workflow*
migrationhub-orchestrator:SendMessage [write] => *
migrationhub-orchestrator:StartWorkflow [write] => workflow*
migrationhub-orchestrator:StopWorkflow [write] => workflow*
migrationhub-orchestrator:TagResource [tagging] => *,workflow*
migrationhub-orchestrator:UntagResource [tagging] => *,workflow*
migrationhub-orchestrator:UpdateWorkflow [write] => workflow*
migrationhub-orchestrator:UpdateWorkflowStep [write] => workflow*
migrationhub-orchestrator:UpdateWorkflowStepGroup [write] => workflow*
migrationhub-strategy:GetAntiPattern [read] => *
migrationhub-strategy:GetApplicationComponentDetails [read] => *
migrationhub-strategy:GetApplicationComponentStrategies [read] => *
migrationhub-strategy:GetAssessment [read] => *
migrationhub-strategy:GetImportFileTask [read] => *
migrationhub-strategy:GetLatestAssessmentId [read] => *
migrationhub-strategy:GetMessage [read] => *
migrationhub-strategy:GetPortfolioPreferences [read] => *
migrationhub-strategy:GetPortfolioSummary [read] => *
migrationhub-strategy:GetRecommendationReportDetails [read] => *
migrationhub-strategy:GetServerDetails [read] => *
migrationhub-strategy:GetServerStrategies [read] => *
migrationhub-strategy:ListAntiPatterns [list] => *
migrationhub-strategy:ListApplicationComponents [list] => *
migrationhub-strategy:ListCollectors [list] => *
migrationhub-strategy:ListImportFileTask [list] => *
migrationhub-strategy:ListJarArtifacts [list] => *
migrationhub-strategy:ListServers [list] => *
migrationhub-strategy:PutPortfolioPreferences [write] => *
migrationhub-strategy:RegisterCollector [write] => *
migrationhub-strategy:SendMessage [write] => *
migrationhub-strategy:StartAssessment [write] => *
migrationhub-strategy:StartImportFileTask [write] => *
migrationhub-strategy:StartRecommendationReportGeneration [write] => *
migrationhub-strategy:StopAssessment [write] => *
migrationhub-strategy:UpdateApplicationComponentConfig [write] => *
migrationhub-strategy:UpdateCollectorConfiguration [write] => *
migrationhub-strategy:UpdateServerConfig [write] => *
mobileanalytics:GetFinancialReports [read] => *
mobileanalytics:GetReports [read] => *
mobileanalytics:PutEvents [write] => *
mobilehub:CreateProject [write] => *
mobilehub:CreateServiceRole [write] => *
mobilehub:DeleteProject [write] => project*
mobilehub:DeleteProjectSnapshot [write] => *
mobilehub:DeployToStage [write] => *
mobilehub:DescribeBundle [read] => *
mobilehub:ExportBundle [read] => *
mobilehub:ExportProject [read] => project*
mobilehub:GenerateProjectParameters [read] => project*
mobilehub:GetProject [read] => project*
mobilehub:GetProjectSnapshot [read] => *
mobilehub:ImportProject [write] => *
mobilehub:InstallBundle [write] => *
mobilehub:ListAvailableConnectors [list] => *
mobilehub:ListAvailableFeatures [list] => *
mobilehub:ListAvailableRegions [list] => *
mobilehub:ListBundles [list] => *
mobilehub:ListProjectSnapshots [list] => *
mobilehub:ListProjects [list] => *
mobilehub:SynchronizeProject [write] => project*
mobilehub:UpdateProject [write] => project*
mobilehub:ValidateProject [read] => *
mobilehub:VerifyServiceRole [read] => *
mobiletargeting:CreateApp [write] => *
mobiletargeting:CreateCampaign [write] => *,apps*
mobiletargeting:CreateEmailTemplate [write] => *
mobiletargeting:CreateExportJob [write] => apps*
mobiletargeting:CreateImportJob [write] => apps*
mobiletargeting:CreateInAppTemplate [write] => *
mobiletargeting:CreateJourney [write] => *,apps*
mobiletargeting:CreatePushTemplate [write] => *
mobiletargeting:CreateRecommenderConfiguration [write] => *
mobiletargeting:CreateSegment [write] => *,apps*
mobiletargeting:CreateSmsTemplate [write] => *
mobiletargeting:CreateVoiceTemplate [write] => *
mobiletargeting:DeleteAdmChannel [write] => apps*
mobiletargeting:DeleteApnsChannel [write] => apps*
mobiletargeting:DeleteApnsSandboxChannel [write] => apps*
mobiletargeting:DeleteApnsVoipChannel [write] => apps*
mobiletargeting:DeleteApnsVoipSandboxChannel [write] => apps*
mobiletargeting:DeleteApp [write] => apps*
mobiletargeting:DeleteBaiduChannel [write] => apps*
mobiletargeting:DeleteCampaign [write] => apps*,campaigns*
mobiletargeting:DeleteEmailChannel [write] => apps*
mobiletargeting:DeleteEmailTemplate [write] => templates*
mobiletargeting:DeleteEndpoint [write] => apps*
mobiletargeting:DeleteEventStream [write] => apps*
mobiletargeting:DeleteGcmChannel [write] => apps*
mobiletargeting:DeleteInAppTemplate [write] => templates*
mobiletargeting:DeleteJourney [write] => apps*,journeys*
mobiletargeting:DeletePushTemplate [write] => templates*
mobiletargeting:DeleteRecommenderConfiguration [write] => recommenders*
mobiletargeting:DeleteSegment [write] => apps*,segments*
mobiletargeting:DeleteSmsChannel [write] => apps*
mobiletargeting:DeleteSmsTemplate [write] => templates*
mobiletargeting:DeleteUserEndpoints [write] => apps*
mobiletargeting:DeleteVoiceChannel [write] => apps*
mobiletargeting:DeleteVoiceTemplate [write] => templates*
mobiletargeting:GetAdmChannel [read] => apps*
mobiletargeting:GetApnsChannel [read] => apps*
mobiletargeting:GetApnsSandboxChannel [read] => apps*
mobiletargeting:GetApnsVoipChannel [read] => apps*
mobiletargeting:GetApnsVoipSandboxChannel [read] => apps*
mobiletargeting:GetApp [read] => apps*
mobiletargeting:GetApplicationDateRangeKpi [read] => apps*
mobiletargeting:GetApplicationSettings [list] => apps*
mobiletargeting:GetApps [read] => apps*
mobiletargeting:GetBaiduChannel [read] => apps*
mobiletargeting:GetCampaign [read] => apps*,campaigns*
mobiletargeting:GetCampaignActivities [list] => apps*,campaigns*
mobiletargeting:GetCampaignDateRangeKpi [read] => apps*,campaigns*
mobiletargeting:GetCampaignVersion [read] => apps*,campaigns*
mobiletargeting:GetCampaignVersions [list] => apps*,campaigns*
mobiletargeting:GetCampaigns [list] => apps*
mobiletargeting:GetChannels [list] => apps*
mobiletargeting:GetEmailChannel [read] => apps*
mobiletargeting:GetEmailTemplate [read] => templates*
mobiletargeting:GetEndpoint [read] => apps*
mobiletargeting:GetEventStream [read] => apps*
mobiletargeting:GetExportJob [read] => apps*
mobiletargeting:GetExportJobs [list] => apps*
mobiletargeting:GetGcmChannel [read] => apps*
mobiletargeting:GetImportJob [read] => apps*
mobiletargeting:GetImportJobs [list] => apps*
mobiletargeting:GetInAppMessages [read] => apps*
mobiletargeting:GetInAppTemplate [read] => templates*
mobiletargeting:GetJourney [read] => apps*,journeys*
mobiletargeting:GetJourneyDateRangeKpi [read] => apps*,journeys*
mobiletargeting:GetJourneyExecutionActivityMetrics [read] => apps*,journeys*
mobiletargeting:GetJourneyExecutionMetrics [read] => apps*,journeys*
mobiletargeting:GetPushTemplate [read] => templates*
mobiletargeting:GetRecommenderConfiguration [read] => recommenders*
mobiletargeting:GetRecommenderConfigurations [list] => *
mobiletargeting:GetReports [read] => *
mobiletargeting:GetSegment [read] => apps*,segments*
mobiletargeting:GetSegmentExportJobs [list] => apps*,segments*
mobiletargeting:GetSegmentImportJobs [list] => apps*,segments*
mobiletargeting:GetSegmentVersion [read] => apps*,segments*
mobiletargeting:GetSegmentVersions [list] => apps*,segments*
mobiletargeting:GetSegments [list] => apps*
mobiletargeting:GetSmsChannel [read] => apps*
mobiletargeting:GetSmsTemplate [read] => templates*
mobiletargeting:GetUserEndpoints [read] => apps*
mobiletargeting:GetVoiceChannel [read] => apps*
mobiletargeting:GetVoiceTemplate [read] => templates*
mobiletargeting:ListJourneys [list] => apps*
mobiletargeting:ListTagsForResource [read] => apps,campaigns,segments
mobiletargeting:ListTemplateVersions [list] => templates*
mobiletargeting:ListTemplates [list] => templates*
mobiletargeting:PhoneNumberValidate [read] => phone-number-validate*
mobiletargeting:PutEventStream [write] => apps*
mobiletargeting:PutEvents [write] => apps*
mobiletargeting:RemoveAttributes [write] => apps*
mobiletargeting:SendMessages [write] => apps*
mobiletargeting:SendOTPMessage [write] => apps*
mobiletargeting:SendUsersMessages [write] => apps*
mobiletargeting:TagResource [tagging] => *,apps,campaigns,segments
mobiletargeting:UntagResource [tagging] => *,apps,campaigns,segments
mobiletargeting:UpdateAdmChannel [write] => apps*
mobiletargeting:UpdateApnsChannel [write] => apps*
mobiletargeting:UpdateApnsSandboxChannel [write] => apps*
mobiletargeting:UpdateApnsVoipChannel [write] => apps*
mobiletargeting:UpdateApnsVoipSandboxChannel [write] => apps*
mobiletargeting:UpdateApplicationSettings [write] => apps*
mobiletargeting:UpdateBaiduChannel [write] => apps*
mobiletargeting:UpdateCampaign [write] => *,apps*,campaigns*
mobiletargeting:UpdateEmailChannel [write] => apps*
mobiletargeting:UpdateEmailTemplate [write] => *,templates*
mobiletargeting:UpdateEndpoint [write] => apps*
mobiletargeting:UpdateEndpointsBatch [write] => apps*
mobiletargeting:UpdateGcmChannel [write] => apps*
mobiletargeting:UpdateInAppTemplate [write] => *,templates*
mobiletargeting:UpdateJourney [write] => *,apps*,journeys*
mobiletargeting:UpdateJourneyState [write] => *,apps*,journeys*
mobiletargeting:UpdatePushTemplate [write] => *,templates*
mobiletargeting:UpdateRecommenderConfiguration [write] => recommenders*
mobiletargeting:UpdateSegment [write] => *,apps*,segments*
mobiletargeting:UpdateSmsChannel [write] => apps*
mobiletargeting:UpdateSmsTemplate [write] => *,templates*
mobiletargeting:UpdateTemplateActiveVersion [write] => templates*
mobiletargeting:UpdateVoiceChannel [write] => apps*
mobiletargeting:UpdateVoiceTemplate [write] => *,templates*
mobiletargeting:VerifyOTPMessage [write] => apps*
monitron:AssociateProjectAdminUser [permissions-management] => project*
monitron:CreateProject [write] => *
monitron:DeleteProject [write] => project*
monitron:DisassociateProjectAdminUser [permissions-management] => project*
monitron:GetProject [read] => project*
monitron:GetProjectAdminUser [read] => project*
monitron:ListProjectAdminUsers [permissions-management] => project*
monitron:ListProjects [list] => *
monitron:ListTagsForResource [read] => *,project
monitron:TagResource [tagging] => *,project
monitron:UntagResource [tagging] => *,project
monitron:UpdateProject [write] => *,project*
mq:CreateBroker [write] => *
mq:CreateConfiguration [write] => *
mq:CreateTags [tagging] => *,brokers,configurations
mq:CreateUser [write] => brokers*
mq:DeleteBroker [write] => brokers*
mq:DeleteTags [tagging] => *,brokers,configurations
mq:DeleteUser [write] => brokers*
mq:DescribeBroker [read] => brokers*
mq:DescribeBrokerEngineTypes [read] => *
mq:DescribeBrokerInstanceOptions [read] => *
mq:DescribeConfiguration [read] => configurations*
mq:DescribeConfigurationRevision [read] => configurations*
mq:DescribeUser [read] => brokers*
mq:ListBrokers [list] => *
mq:ListConfigurationRevisions [list] => configurations*
mq:ListConfigurations [list] => *
mq:ListTags [list] => brokers,configurations
mq:ListUsers [list] => brokers*
mq:RebootBroker [write] => brokers*
mq:UpdateBroker [write] => brokers*
mq:UpdateConfiguration [write] => configurations*
mq:UpdateUser [write] => brokers*
neptune-db:CancelLoaderJob [write] => database*
neptune-db:CancelMLDataProcessingJob [write] => database*
neptune-db:CancelMLModelTrainingJob [write] => database*
neptune-db:CancelMLModelTransformJob [write] => database*
neptune-db:CancelQuery [write] => database*
neptune-db:CreateMLEndpoint [write] => database*
neptune-db:DeleteDataViaQuery [write] => *,database*
neptune-db:DeleteMLEndpoint [write] => database*
neptune-db:DeleteStatistics [write] => database*
neptune-db:GetEngineStatus [read] => database*
neptune-db:GetLoaderJobStatus [read] => database*
neptune-db:GetMLDataProcessingJobStatus [read] => database*
neptune-db:GetMLEndpointStatus [read] => database*
neptune-db:GetMLModelTrainingJobStatus [read] => database*
neptune-db:GetMLModelTransformJobStatus [read] => database*
neptune-db:GetQueryStatus [read] => *,database*
neptune-db:GetStatisticsStatus [read] => database*
neptune-db:GetStreamRecords [read] => *,database*
neptune-db:ListLoaderJobs [list] => database*
neptune-db:ListMLDataProcessingJobs [list] => database*
neptune-db:ListMLEndpoints [list] => database*
neptune-db:ListMLModelTrainingJobs [list] => database*
neptune-db:ListMLModelTransformJobs [list] => database*
neptune-db:ManageStatistics [write] => database*
neptune-db:ReadDataViaQuery [read] => *,database*
neptune-db:ResetDatabase [write] => database*
neptune-db:StartLoaderJob [write] => database*
neptune-db:StartMLDataProcessingJob [write] => database*
neptune-db:StartMLModelTrainingJob [write] => database*
neptune-db:StartMLModelTransformJob [write] => database*
neptune-db:WriteDataViaQuery [write] => *,database*
neptune-db:connect [write] => database*
network-firewall:AssociateFirewallPolicy [write] => Firewall*,FirewallPolicy*
network-firewall:AssociateSubnets [write] => Firewall*
network-firewall:CreateFirewall [write] => *,Firewall*,FirewallPolicy*
network-firewall:CreateFirewallPolicy [write] => *,FirewallPolicy*,StatefulRuleGroup,StatelessRuleGroup
network-firewall:CreateRuleGroup [write] => *,StatefulRuleGroup,StatelessRuleGroup
network-firewall:DeleteFirewall [write] => Firewall*
network-firewall:DeleteFirewallPolicy [write] => FirewallPolicy*
network-firewall:DeleteResourcePolicy [write] => FirewallPolicy,StatefulRuleGroup,StatelessRuleGroup
network-firewall:DeleteRuleGroup [write] => StatefulRuleGroup*,StatelessRuleGroup*
network-firewall:DescribeFirewall [read] => Firewall*
network-firewall:DescribeFirewallPolicy [read] => FirewallPolicy*,StatefulRuleGroup,StatelessRuleGroup
network-firewall:DescribeLoggingConfiguration [read] => Firewall*
network-firewall:DescribeResourcePolicy [read] => FirewallPolicy,StatefulRuleGroup,StatelessRuleGroup
network-firewall:DescribeRuleGroup [read] => StatefulRuleGroup,StatelessRuleGroup
network-firewall:DescribeRuleGroupMetadata [read] => StatefulRuleGroup,StatelessRuleGroup
network-firewall:DisassociateSubnets [write] => Firewall*
network-firewall:ListFirewallPolicies [list] => FirewallPolicy*
network-firewall:ListFirewalls [list] => Firewall*
network-firewall:ListRuleGroups [list] => *
network-firewall:ListTagsForResource [list] => Firewall*,FirewallPolicy*,StatefulRuleGroup,StatelessRuleGroup
network-firewall:PutResourcePolicy [write] => FirewallPolicy,StatefulRuleGroup,StatelessRuleGroup
network-firewall:TagResource [tagging] => *,Firewall,FirewallPolicy,StatefulRuleGroup,StatelessRuleGroup
network-firewall:UntagResource [tagging] => *,Firewall,FirewallPolicy,StatefulRuleGroup,StatelessRuleGroup
network-firewall:UpdateFirewallDeleteProtection [write] => Firewall*
network-firewall:UpdateFirewallDescription [write] => Firewall*
network-firewall:UpdateFirewallEncryptionConfiguration [write] => Firewall*
network-firewall:UpdateFirewallPolicy [write] => FirewallPolicy*,StatefulRuleGroup,StatelessRuleGroup
network-firewall:UpdateFirewallPolicyChangeProtection [write] => Firewall*
network-firewall:UpdateLoggingConfiguration [write] => Firewall*
network-firewall:UpdateRuleGroup [write] => StatefulRuleGroup,StatelessRuleGroup
network-firewall:UpdateSubnetChangeProtection [write] => Firewall*
networkmanager:AcceptAttachment [write] => attachment*
networkmanager:AssociateConnectPeer [write] => device*,global-network*
networkmanager:AssociateCustomerGateway [write] => *,device*,global-network*,link
networkmanager:AssociateLink [write] => device*,global-network*,link*
networkmanager:AssociateTransitGatewayConnectPeer [write] => *,device*,global-network*,link
networkmanager:CreateConnectAttachment [write] => *,attachment*,core-network*
networkmanager:CreateConnectPeer [write] => *,attachment*
networkmanager:CreateConnection [write] => *,global-network*
networkmanager:CreateCoreNetwork [write] => *,global-network*
networkmanager:CreateDevice [write] => *,global-network*
networkmanager:CreateGlobalNetwork [write] => *
networkmanager:CreateLink [write] => *,global-network*,site
networkmanager:CreateSite [write] => *,global-network*
networkmanager:CreateSiteToSiteVpnAttachment [write] => *,core-network*
networkmanager:CreateTransitGatewayPeering [write] => *,core-network*
networkmanager:CreateTransitGatewayRouteTableAttachment [write] => *,peering*
networkmanager:CreateVpcAttachment [write] => *,core-network*
networkmanager:DeleteAttachment [write] => attachment*
networkmanager:DeleteConnectPeer [write] => connect-peer*
networkmanager:DeleteConnection [write] => connection*,global-network*
networkmanager:DeleteCoreNetwork [write] => core-network*
networkmanager:DeleteCoreNetworkPolicyVersion [write] => core-network*
networkmanager:DeleteDevice [write] => device*,global-network*
networkmanager:DeleteGlobalNetwork [write] => global-network*
networkmanager:DeleteLink [write] => global-network*,link*
networkmanager:DeletePeering [write] => peering*
networkmanager:DeleteResourcePolicy [write] => core-network*
networkmanager:DeleteSite [write] => global-network*,site*
networkmanager:DeregisterTransitGateway [write] => *,global-network*
networkmanager:DescribeGlobalNetworks [list] => global-network
networkmanager:DisassociateConnectPeer [write] => global-network*
networkmanager:DisassociateCustomerGateway [write] => *,global-network*
networkmanager:DisassociateLink [write] => device*,global-network*,link*
networkmanager:DisassociateTransitGatewayConnectPeer [write] => *,global-network*
networkmanager:ExecuteCoreNetworkChangeSet [write] => core-network*
networkmanager:GetConnectAttachment [read] => attachment*
networkmanager:GetConnectPeer [read] => connect-peer*
networkmanager:GetConnectPeerAssociations [read] => global-network*
networkmanager:GetConnections [list] => connection,global-network*
networkmanager:GetCoreNetwork [read] => core-network*
networkmanager:GetCoreNetworkChangeEvents [read] => core-network*
networkmanager:GetCoreNetworkChangeSet [read] => core-network*
networkmanager:GetCoreNetworkPolicy [read] => core-network*
networkmanager:GetCustomerGatewayAssociations [list] => global-network*
networkmanager:GetDevices [list] => device,global-network*
networkmanager:GetLinkAssociations [list] => device,global-network*,link
networkmanager:GetLinks [list] => global-network*,link
networkmanager:GetNetworkResourceCounts [read] => global-network*
networkmanager:GetNetworkResourceRelationships [read] => global-network*
networkmanager:GetNetworkResources [read] => global-network*
networkmanager:GetNetworkRoutes [read] => global-network*
networkmanager:GetNetworkTelemetry [read] => global-network*
networkmanager:GetResourcePolicy [read] => core-network*
networkmanager:GetRouteAnalysis [read] => global-network*
networkmanager:GetSiteToSiteVpnAttachment [read] => attachment*
networkmanager:GetSites [list] => global-network*,site
networkmanager:GetTransitGatewayConnectPeerAssociations [list] => global-network*
networkmanager:GetTransitGatewayPeering [read] => peering*
networkmanager:GetTransitGatewayRegistrations [list] => global-network*
networkmanager:GetTransitGatewayRouteTableAttachment [read] => attachment*
networkmanager:GetVpcAttachment [read] => attachment*
networkmanager:ListAttachments [list] => attachment*
networkmanager:ListConnectPeers [list] => connect-peer*
networkmanager:ListCoreNetworkPolicyVersions [list] => core-network*
networkmanager:ListCoreNetworks [list] => *
networkmanager:ListOrganizationServiceAccessStatus [list] => *
networkmanager:ListPeerings [list] => *
networkmanager:ListTagsForResource [read] => *,attachment,connect-peer,connection,core-network,device,global-network,link,peering,site
networkmanager:PutCoreNetworkPolicy [write] => core-network*
networkmanager:PutResourcePolicy [write] => core-network*
networkmanager:RegisterTransitGateway [write] => *,global-network*
networkmanager:RejectAttachment [write] => attachment*
networkmanager:RestoreCoreNetworkPolicyVersion [write] => core-network*
networkmanager:StartOrganizationServiceAccessUpdate [write] => *
networkmanager:StartRouteAnalysis [write] => global-network*
networkmanager:TagResource [tagging] => *,attachment,connect-peer,connection,core-network,device,global-network,link,peering,site
networkmanager:UntagResource [tagging] => *,attachment,connect-peer,connection,core-network,device,global-network,link,peering,site
networkmanager:UpdateConnection [write] => connection*,global-network*
networkmanager:UpdateCoreNetwork [write] => core-network*
networkmanager:UpdateDevice [write] => device*,global-network*
networkmanager:UpdateGlobalNetwork [write] => global-network*
networkmanager:UpdateLink [write] => global-network*,link*
networkmanager:UpdateNetworkResourceMetadata [write] => global-network*
networkmanager:UpdateSite [write] => global-network*,site*
networkmanager:UpdateVpcAttachment [write] => *,attachment*
nimble:AcceptEulas [write] => eula*
nimble:CreateLaunchProfile [write] => *,studio*
nimble:CreateStreamingImage [write] => *,studio*
nimble:CreateStreamingSession [write] => *,launch-profile*
nimble:CreateStreamingSessionStream [write] => *,streaming-session*
nimble:CreateStudio [write] => *,studio*
nimble:CreateStudioComponent [write] => *,studio*
nimble:DeleteLaunchProfile [write] => launch-profile*
nimble:DeleteLaunchProfileMember [write] => launch-profile*
nimble:DeleteStreamingImage [write] => streaming-image*
nimble:DeleteStreamingSession [write] => *,streaming-session*
nimble:DeleteStudio [write] => studio*
nimble:DeleteStudioComponent [write] => studio-component*
nimble:DeleteStudioMember [write] => studio*
nimble:GetEula [read] => eula*
nimble:GetFeatureMap [read] => *
nimble:GetLaunchProfile [read] => launch-profile*
nimble:GetLaunchProfileDetails [read] => launch-profile*
nimble:GetLaunchProfileInitialization [read] => launch-profile*
nimble:GetLaunchProfileMember [read] => launch-profile*
nimble:GetStreamingImage [read] => streaming-image*
nimble:GetStreamingSession [read] => *,streaming-session*
nimble:GetStreamingSessionStream [read] => *,streaming-session*
nimble:GetStudio [read] => studio*
nimble:GetStudioComponent [read] => studio-component*
nimble:GetStudioMember [read] => studio*
nimble:ListEulaAcceptances [read] => eula-acceptance*
nimble:ListEulas [read] => eula*
nimble:ListLaunchProfileMembers [read] => launch-profile*
nimble:ListLaunchProfiles [read] => *,studio*
nimble:ListStreamingImages [read] => studio*
nimble:ListStreamingSessions [read] => *,studio*
nimble:ListStudioComponents [read] => studio*
nimble:ListStudioMembers [read] => studio*
nimble:ListStudios [read] => *
nimble:ListTagsForResource [read] => launch-profile,streaming-image,streaming-session,studio,studio-component
nimble:PutLaunchProfileMembers [write] => launch-profile*
nimble:PutStudioLogEvents [write] => studio*
nimble:PutStudioMembers [write] => studio*
nimble:StartStreamingSession [write] => *,streaming-session*
nimble:StartStudioSSOConfigurationRepair [write] => studio*
nimble:StopStreamingSession [write] => *,streaming-session*
nimble:TagResource [tagging] => *,launch-profile,streaming-image,streaming-session,studio,studio-component
nimble:UntagResource [tagging] => *,launch-profile,streaming-image,streaming-session,studio,studio-component
nimble:UpdateLaunchProfile [write] => launch-profile*
nimble:UpdateLaunchProfileMember [write] => launch-profile*
nimble:UpdateStreamingImage [write] => streaming-image*
nimble:UpdateStudio [write] => studio*
nimble:UpdateStudioComponent [write] => studio-component*
opsworks:AssignInstance [write] => stack
opsworks:AssignVolume [write] => stack
opsworks:AssociateElasticIp [write] => stack
opsworks:AttachElasticLoadBalancer [write] => stack
opsworks:CloneStack [write] => stack
opsworks:CreateApp [write] => stack
opsworks:CreateDeployment [write] => stack
opsworks:CreateInstance [write] => stack
opsworks:CreateLayer [write] => stack
opsworks:CreateStack [write] => *
opsworks:CreateUserProfile [write] => *
opsworks:DeleteApp [write] => stack
opsworks:DeleteInstance [write] => stack
opsworks:DeleteLayer [write] => stack
opsworks:DeleteStack [write] => stack
opsworks:DeleteUserProfile [write] => *
opsworks:DeregisterEcsCluster [write] => stack
opsworks:DeregisterElasticIp [write] => stack
opsworks:DeregisterInstance [write] => stack
opsworks:DeregisterRdsDbInstance [write] => stack
opsworks:DeregisterVolume [write] => stack
opsworks:DescribeAgentVersions [list] => stack
opsworks:DescribeApps [list] => stack
opsworks:DescribeCommands [list] => stack
opsworks:DescribeDeployments [list] => stack
opsworks:DescribeEcsClusters [list] => stack
opsworks:DescribeElasticIps [list] => stack
opsworks:DescribeElasticLoadBalancers [list] => stack
opsworks:DescribeInstances [list] => stack
opsworks:DescribeLayers [list] => stack
opsworks:DescribeLoadBasedAutoScaling [list] => stack
opsworks:DescribeMyUserProfile [list] => *
opsworks:DescribeOperatingSystems [list] => *
opsworks:DescribePermissions [list] => stack
opsworks:DescribeRaidArrays [list] => stack
opsworks:DescribeRdsDbInstances [list] => stack
opsworks:DescribeServiceErrors [list] => stack
opsworks:DescribeStackProvisioningParameters [list] => stack
opsworks:DescribeStackSummary [list] => stack
opsworks:DescribeStacks [list] => stack
opsworks:DescribeTimeBasedAutoScaling [list] => stack
opsworks:DescribeUserProfiles [list] => *
opsworks:DescribeVolumes [list] => stack
opsworks:DetachElasticLoadBalancer [write] => stack
opsworks:DisassociateElasticIp [write] => stack
opsworks:GetHostnameSuggestion [read] => stack
opsworks:GrantAccess [write] => stack
opsworks:ListTags [list] => stack
opsworks:RebootInstance [write] => stack
opsworks:RegisterEcsCluster [write] => stack
opsworks:RegisterElasticIp [write] => stack
opsworks:RegisterInstance [write] => stack
opsworks:RegisterRdsDbInstance [write] => stack
opsworks:RegisterVolume [write] => stack
opsworks:SetLoadBasedAutoScaling [write] => stack
opsworks:SetPermission [permissions-management] => stack
opsworks:SetTimeBasedAutoScaling [write] => stack
opsworks:StartInstance [write] => stack
opsworks:StartStack [write] => stack
opsworks:StopInstance [write] => stack
opsworks:StopStack [write] => stack
opsworks:TagResource [tagging] => stack
opsworks:UnassignInstance [write] => stack
opsworks:UnassignVolume [write] => stack
opsworks:UntagResource [tagging] => stack
opsworks:UpdateApp [write] => stack
opsworks:UpdateElasticIp [write] => stack
opsworks:UpdateInstance [write] => stack
opsworks:UpdateLayer [write] => stack
opsworks:UpdateMyUserProfile [write] => *
opsworks:UpdateRdsDbInstance [write] => stack
opsworks:UpdateStack [write] => stack
opsworks:UpdateUserProfile [permissions-management] => *
opsworks:UpdateVolume [write] => stack
opsworks-cm:AssociateNode [write] => *
opsworks-cm:CreateBackup [write] => *
opsworks-cm:CreateServer [write] => *
opsworks-cm:DeleteBackup [write] => *
opsworks-cm:DeleteServer [write] => *
opsworks-cm:DescribeAccountAttributes [list] => *
opsworks-cm:DescribeBackups [list] => *
opsworks-cm:DescribeEvents [list] => *
opsworks-cm:DescribeNodeAssociationStatus [list] => *
opsworks-cm:DescribeServers [list] => *
opsworks-cm:DisassociateNode [write] => *
opsworks-cm:ExportServerEngineAttribute [read] => *
opsworks-cm:ListTagsForResource [read] => *
opsworks-cm:RestoreServer [write] => *
opsworks-cm:StartMaintenance [write] => *
opsworks-cm:TagResource [tagging] => *
opsworks-cm:UntagResource [tagging] => *
opsworks-cm:UpdateServer [write] => *
opsworks-cm:UpdateServerEngineAttributes [write] => *
organizations:AcceptHandshake [write] => handshake*
organizations:AttachPolicy [write] => *,account,organizationalunit,policy*,root
organizations:CancelHandshake [write] => handshake*
organizations:CloseAccount [write] => account*
organizations:CreateAccount [write] => *
organizations:CreateGovCloudAccount [write] => *
organizations:CreateOrganization [write] => *
organizations:CreateOrganizationalUnit [write] => *,organizationalunit,root
organizations:CreatePolicy [write] => *
organizations:DeclineHandshake [write] => handshake*
organizations:DeleteOrganization [write] => *
organizations:DeleteOrganizationalUnit [write] => organizationalunit*
organizations:DeletePolicy [write] => *,policy*
organizations:DeregisterDelegatedAdministrator [write] => *,account*
organizations:DescribeAccount [read] => account*
organizations:DescribeCreateAccountStatus [read] => *
organizations:DescribeEffectivePolicy [read] => *,account*
organizations:DescribeHandshake [read] => handshake*
organizations:DescribeOrganization [read] => *
organizations:DescribeOrganizationalUnit [read] => organizationalunit*
organizations:DescribePolicy [read] => *,policy*
organizations:DetachPolicy [write] => *,account,organizationalunit,policy*,root
organizations:DisableAWSServiceAccess [write] => *
organizations:DisablePolicyType [write] => *,root*
organizations:EnableAWSServiceAccess [write] => *
organizations:EnableAllFeatures [write] => *
organizations:EnablePolicyType [write] => *,root*
organizations:InviteAccountToOrganization [write] => *,account
organizations:LeaveOrganization [write] => *
organizations:ListAWSServiceAccessForOrganization [list] => *
organizations:ListAccounts [list] => *
organizations:ListAccountsForParent [list] => organizationalunit,root
organizations:ListChildren [list] => organizationalunit,root
organizations:ListCreateAccountStatus [list] => *
organizations:ListDelegatedAdministrators [list] => *
organizations:ListDelegatedServicesForAccount [list] => account*
organizations:ListHandshakesForAccount [list] => *
organizations:ListHandshakesForOrganization [list] => *
organizations:ListOrganizationalUnitsForParent [list] => organizationalunit,root
organizations:ListParents [list] => account,organizationalunit
organizations:ListPolicies [list] => *
organizations:ListPoliciesForTarget [list] => *,account,organizationalunit,root
organizations:ListRoots [list] => *
organizations:ListTagsForResource [list] => account,organizationalunit,policy,root
organizations:ListTargetsForPolicy [list] => *,policy*
organizations:MoveAccount [write] => account*,organizationalunit,root
organizations:RegisterDelegatedAdministrator [write] => *,account*
organizations:RemoveAccountFromOrganization [write] => account*
organizations:TagResource [tagging] => *,account,organizationalunit,policy,root
organizations:UntagResource [tagging] => *,account,organizationalunit,policy,root
organizations:UpdateOrganizationalUnit [write] => organizationalunit*
organizations:UpdatePolicy [write] => *,policy*
outposts:CancelOrder [write] => *
outposts:CreateOrder [write] => *
outposts:CreateOutpost [write] => *
outposts:CreatePrivateConnectivityConfig [write] => *
outposts:CreateSite [write] => *
outposts:DeleteOutpost [write] => *
outposts:DeleteSite [write] => *
outposts:GetCatalogItem [read] => *
outposts:GetConnection [read] => *
outposts:GetOrder [read] => *
outposts:GetOutpost [read] => *
outposts:GetOutpostInstanceTypes [read] => *
outposts:GetPrivateConnectivityConfig [read] => *
outposts:GetSite [read] => *
outposts:GetSiteAddress [read] => *
outposts:ListAssets [list] => *
outposts:ListCatalogItems [list] => *
outposts:ListOrders [list] => *
outposts:ListOutposts [list] => *
outposts:ListSites [list] => *
outposts:ListTagsForResource [read] => *
outposts:StartConnection [write] => *
outposts:TagResource [tagging] => *
outposts:UntagResource [tagging] => *
outposts:UpdateOutpost [write] => *
outposts:UpdateSite [write] => *
outposts:UpdateSiteAddress [write] => *
outposts:UpdateSiteRackPhysicalProperties [write] => *
panorama:CreateApp [write] => *
panorama:CreateAppDeployment [write] => *
panorama:CreateAppVersion [write] => appVersion*
panorama:CreateApplicationInstance [write] => *
panorama:CreateDataSource [write] => *,device*
panorama:CreateDeploymentConfiguration [write] => *
panorama:CreateInputs [write] => device*
panorama:CreateJobForDevices [write] => *
panorama:CreateModel [write] => *
panorama:CreateNodeFromTemplateJob [write] => *
panorama:CreatePackage [write] => *
panorama:CreatePackageImportJob [write] => *
panorama:CreateStreams [write] => device*
panorama:DeleteApp [write] => app*
panorama:DeleteAppVersion [write] => app*
panorama:DeleteDataSource [write] => dataSource*
panorama:DeleteDevice [write] => device*
panorama:DeleteModel [write] => model*
panorama:DeletePackage [write] => package*
panorama:DeregisterPackageVersion [write] => *
panorama:DescribeApp [read] => app*
panorama:DescribeAppDeployment [read] => *
panorama:DescribeAppVersion [read] => app*
panorama:DescribeApplicationInstance [read] => applicationInstance*
panorama:DescribeApplicationInstanceDetails [read] => applicationInstance*
panorama:DescribeDataSource [read] => dataSource*
panorama:DescribeDevice [read] => device*
panorama:DescribeDeviceJob [read] => *
panorama:DescribeModel [read] => model*
panorama:DescribeNode [read] => *
panorama:DescribeNodeFromTemplateJob [read] => *
panorama:DescribePackage [read] => package*
panorama:DescribePackageImportJob [read] => *
panorama:DescribePackageVersion [read] => *
panorama:DescribeSoftware [read] => *
panorama:GetDeploymentConfiguration [read] => *
panorama:GetInputs [read] => device*
panorama:GetStreams [read] => device*
panorama:GetWebSocketURL [read] => *
panorama:ListAppDeploymentOperations [list] => *
panorama:ListAppVersions [list] => app*
panorama:ListApplicationInstanceDependencies [list] => *
panorama:ListApplicationInstanceNodeInstances [list] => *
panorama:ListApplicationInstances [list] => *
panorama:ListApps [list] => *
panorama:ListDataSources [list] => device*
panorama:ListDeploymentConfigurations [list] => *
panorama:ListDevices [list] => *
panorama:ListDevicesJobs [list] => *
panorama:ListModels [list] => *
panorama:ListNodeFromTemplateJobs [list] => *
panorama:ListNodes [list] => *
panorama:ListPackageImportJobs [list] => *
panorama:ListPackages [list] => *
panorama:ListTagsForResource [read] => app,dataSource,device,model
panorama:ProvisionDevice [write] => *
panorama:RegisterPackageVersion [write] => *
panorama:RemoveApplicationInstance [write] => applicationInstance*
panorama:TagResource [tagging] => *,app,dataSource,device,model
panorama:UntagResource [tagging] => *,app,dataSource,device,model
panorama:UpdateApp [write] => app*
panorama:UpdateAppConfiguration [write] => app*
panorama:UpdateDataSource [write] => dataSource*
panorama:UpdateDeviceMetadata [write] => *
personalize:CreateBatchInferenceJob [write] => batchInferenceJob*
personalize:CreateBatchSegmentJob [write] => batchSegmentJob*
personalize:CreateCampaign [write] => campaign*
personalize:CreateDataset [write] => dataset*
personalize:CreateDatasetExportJob [write] => datasetExportJob*
personalize:CreateDatasetGroup [write] => datasetGroup*
personalize:CreateDatasetImportJob [write] => datasetImportJob*
personalize:CreateEventTracker [write] => eventTracker*
personalize:CreateFilter [write] => filter*
personalize:CreateRecommender [write] => recommender*
personalize:CreateSchema [write] => schema*
personalize:CreateSolution [write] => solution*
personalize:CreateSolutionVersion [write] => solution*
personalize:DeleteCampaign [write] => campaign*
personalize:DeleteDataset [write] => dataset*
personalize:DeleteDatasetGroup [write] => datasetGroup*
personalize:DeleteEventTracker [write] => eventTracker*
personalize:DeleteFilter [write] => filter*
personalize:DeleteRecommender [write] => recommender*
personalize:DeleteSchema [write] => schema*
personalize:DeleteSolution [write] => solution*
personalize:DescribeAlgorithm [read] => algorithm*
personalize:DescribeBatchInferenceJob [read] => batchInferenceJob*
personalize:DescribeBatchSegmentJob [read] => batchSegmentJob*
personalize:DescribeCampaign [read] => campaign*
personalize:DescribeDataset [read] => dataset*
personalize:DescribeDatasetExportJob [read] => datasetExportJob*
personalize:DescribeDatasetGroup [read] => datasetGroup*
personalize:DescribeDatasetImportJob [read] => datasetImportJob*
personalize:DescribeEventTracker [read] => eventTracker*
personalize:DescribeFeatureTransformation [read] => featureTransformation*
personalize:DescribeFilter [read] => filter*
personalize:DescribeRecipe [read] => recipe*
personalize:DescribeRecommender [read] => recommender*
personalize:DescribeSchema [read] => schema*
personalize:DescribeSolution [read] => solution*
personalize:DescribeSolutionVersion [read] => solution*
personalize:GetPersonalizedRanking [read] => campaign*
personalize:GetRecommendations [read] => campaign*
personalize:GetSolutionMetrics [read] => solution*
personalize:ListBatchInferenceJobs [list] => *
personalize:ListBatchSegmentJobs [list] => *
personalize:ListCampaigns [list] => *
personalize:ListDatasetExportJobs [list] => *
personalize:ListDatasetGroups [list] => *
personalize:ListDatasetImportJobs [list] => *
personalize:ListDatasets [list] => *
personalize:ListEventTrackers [list] => *
personalize:ListFilters [list] => *
personalize:ListRecipes [list] => *
personalize:ListRecommenders [list] => *
personalize:ListSchemas [list] => *
personalize:ListSolutionVersions [list] => *
personalize:ListSolutions [list] => *
personalize:ListTagsForResource [list] => *
personalize:PutEvents [write] => eventTracker*
personalize:PutItems [write] => dataset*
personalize:PutUsers [write] => dataset*
personalize:StartRecommender [write] => recommender*
personalize:StopRecommender [write] => recommender*
personalize:StopSolutionVersionCreation [write] => solution*
personalize:TagResource [tagging] => *
personalize:UntagResource [tagging] => *
personalize:UpdateCampaign [write] => campaign*
personalize:UpdateRecommender [write] => recommender*
pi:DescribeDimensionKeys [read] => metric-resource*
pi:GetDimensionKeyDetails [read] => metric-resource*
pi:GetResourceMetadata [read] => metric-resource*
pi:GetResourceMetrics [read] => metric-resource*
pi:ListAvailableResourceDimensions [read] => metric-resource*
pi:ListAvailableResourceMetrics [read] => metric-resource*
polly:DeleteLexicon [write] => lexicon*
polly:DescribeVoices [list] => *
polly:GetLexicon [read] => lexicon*
polly:GetSpeechSynthesisTask [read] => *
polly:ListLexicons [list] => *
polly:ListSpeechSynthesisTasks [list] => *
polly:PutLexicon [write] => lexicon*
polly:StartSpeechSynthesisTask [write] => lexicon
polly:SynthesizeSpeech [read] => lexicon
pricing:DescribeServices [read] => *
pricing:GetAttributeValues [read] => *
pricing:GetProducts [read] => *
private-networks:AcknowledgeOrderReceipt [write] => order*
private-networks:ActivateDeviceIdentifier [write] => device-identifier*
private-networks:ActivateNetworkSite [write] => network-site*,order*
private-networks:ConfigureAccessPoint [write] => network-resource*
private-networks:CreateNetwork [write] => network*
private-networks:CreateNetworkSite [write] => network*
private-networks:DeactivateDeviceIdentifier [write] => device-identifier*
private-networks:DeleteNetwork [write] => network*
private-networks:DeleteNetworkSite [write] => network-site*
private-networks:GetDeviceIdentifier [read] => device-identifier*
private-networks:GetNetwork [read] => network*
private-networks:GetNetworkResource [read] => network-resource*
private-networks:GetNetworkSite [read] => network-site*
private-networks:GetOrder [read] => order*
private-networks:ListDeviceIdentifiers [list] => network*
private-networks:ListNetworkResources [list] => network*
private-networks:ListNetworkSites [list] => network*
private-networks:ListNetworks [list] => *
private-networks:ListOrders [list] => network*
private-networks:UpdateNetworkSite [write] => network-site*
private-networks:UpdateNetworkSitePlan [write] => network-site*
profile:AddProfileKey [write] => domains*
profile:CreateDomain [write] => *
profile:CreateIntegrationWorkflow [write] => *,domains*
profile:CreateProfile [write] => domains*
profile:DeleteDomain [write] => domains*
profile:DeleteIntegration [write] => domains*,integrations*
profile:DeleteProfile [write] => domains*
profile:DeleteProfileKey [write] => domains*
profile:DeleteProfileObject [write] => domains*,object-types*
profile:DeleteProfileObjectType [write] => domains*,object-types*
profile:DeleteWorkflow [write] => domains*
profile:GetAutoMergingPreview [read] => domains*
profile:GetDomain [read] => domains*
profile:GetIdentityResolutionJob [read] => domains*
profile:GetIntegration [read] => domains*,integrations*
profile:GetMatches [list] => domains*
profile:GetProfileObjectType [read] => domains*,object-types*
profile:GetProfileObjectTypeTemplate [read] => *
profile:GetWorkflow [read] => domains*
profile:GetWorkflowSteps [read] => domains*
profile:ListAccountIntegrations [list] => *
profile:ListDomains [list] => *
profile:ListIdentityResolutionJobs [list] => domains*
profile:ListIntegrations [list] => domains*
profile:ListProfileObjectTypeTemplates [list] => *
profile:ListProfileObjectTypes [list] => domains*
profile:ListProfileObjects [list] => domains*,object-types*
profile:ListTagsForResource [read] => *
profile:ListWorkflows [list] => domains*
profile:MergeProfiles [write] => domains*
profile:PutIntegration [write] => *,domains*,integrations*
profile:PutProfileObject [write] => domains*,object-types*
profile:PutProfileObjectType [write] => *,domains*,object-types*
profile:SearchProfiles [read] => domains*
profile:TagResource [tagging] => *
profile:UntagResource [tagging] => *
profile:UpdateDomain [write] => domains*
profile:UpdateProfile [write] => domains*
proton:AcceptEnvironmentAccountConnection [write] => environment-account-connection*
proton:CancelComponentDeployment [write] => component*
proton:CancelEnvironmentDeployment [write] => *,environment*
proton:CancelServiceInstanceDeployment [write] => *,service-instance*
proton:CancelServicePipelineDeployment [write] => *,service*
proton:CreateComponent [write] => *,component*
proton:CreateEnvironment [write] => *,environment*
proton:CreateEnvironmentAccountConnection [write] => *
proton:CreateEnvironmentTemplate [write] => *,environment-template*
proton:CreateEnvironmentTemplateMajorVersion [write] => *,environment-template*
proton:CreateEnvironmentTemplateMinorVersion [write] => *,environment-template*
proton:CreateEnvironmentTemplateVersion [write] => *,environment-template*
proton:CreateRepository [write] => *,repository*
proton:CreateService [write] => *,service*
proton:CreateServiceTemplate [write] => *,service-template*
proton:CreateServiceTemplateMajorVersion [write] => *,service-template*
proton:CreateServiceTemplateMinorVersion [write] => *,service-template*
proton:CreateServiceTemplateVersion [write] => *,service-template*
proton:CreateTemplateSyncConfig [write] => *
proton:DeleteAccountRoles [write] => *
proton:DeleteComponent [write] => component*
proton:DeleteEnvironment [write] => *,environment*
proton:DeleteEnvironmentAccountConnection [write] => environment-account-connection*
proton:DeleteEnvironmentTemplate [write] => environment-template*
proton:DeleteEnvironmentTemplateMajorVersion [write] => environment-template*
proton:DeleteEnvironmentTemplateMinorVersion [write] => environment-template*
proton:DeleteEnvironmentTemplateVersion [write] => environment-template*
proton:DeleteRepository [write] => repository*
proton:DeleteService [write] => *,service*
proton:DeleteServiceTemplate [write] => service-template*
proton:DeleteServiceTemplateMajorVersion [write] => service-template*
proton:DeleteServiceTemplateMinorVersion [write] => service-template*
proton:DeleteServiceTemplateVersion [write] => service-template*
proton:DeleteTemplateSyncConfig [write] => *
proton:GetAccountRoles [read] => *
proton:GetAccountSettings [read] => *
proton:GetComponent [read] => component*
proton:GetEnvironment [read] => environment*
proton:GetEnvironmentAccountConnection [read] => environment-account-connection*
proton:GetEnvironmentTemplate [read] => environment-template*
proton:GetEnvironmentTemplateMajorVersion [read] => environment-template*
proton:GetEnvironmentTemplateMinorVersion [read] => environment-template*
proton:GetEnvironmentTemplateVersion [read] => environment-template*
proton:GetRepository [read] => repository*
proton:GetRepositorySyncStatus [read] => *
proton:GetService [read] => service*
proton:GetServiceInstance [read] => service-instance*
proton:GetServiceTemplate [read] => service-template*
proton:GetServiceTemplateMajorVersion [read] => service-template*
proton:GetServiceTemplateMinorVersion [read] => service-template*
proton:GetServiceTemplateVersion [read] => service-template*
proton:GetTemplateSyncConfig [read] => *
proton:GetTemplateSyncStatus [read] => *
proton:ListComponentOutputs [list] => component*
proton:ListComponentProvisionedResources [list] => component*
proton:ListComponents [list] => environment,service,service-instance
proton:ListEnvironmentAccountConnections [list] => environment-account-connection*
proton:ListEnvironmentOutputs [list] => environment*
proton:ListEnvironmentProvisionedResources [list] => environment*
proton:ListEnvironmentTemplateMajorVersions [list] => environment-template*
proton:ListEnvironmentTemplateMinorVersions [list] => environment-template*
proton:ListEnvironmentTemplateVersions [list] => environment-template*
proton:ListEnvironmentTemplates [list] => *
proton:ListEnvironments [list] => *
proton:ListRepositories [list] => *
proton:ListRepositorySyncDefinitions [list] => *
proton:ListServiceInstanceOutputs [list] => service*,service-instance*
proton:ListServiceInstanceProvisionedResources [list] => service*,service-instance*
proton:ListServiceInstances [list] => *
proton:ListServicePipelineOutputs [list] => service*
proton:ListServicePipelineProvisionedResources [list] => service*
proton:ListServiceTemplateMajorVersions [list] => service-template*
proton:ListServiceTemplateMinorVersions [list] => service-template*
proton:ListServiceTemplateVersions [list] => service-template*
proton:ListServiceTemplates [list] => *
proton:ListServices [list] => *
proton:ListTagsForResource [read] => component,environment,environment-account-connection,environment-template,environment-template-major-version,environment-template-minor-version,environment-template-version,repository,service,service-instance,service-template,service-template-major-version,service-template-minor-version,service-template-version
proton:NotifyResourceDeploymentStatusChange [write] => environment,service-instance
proton:RejectEnvironmentAccountConnection [write] => environment-account-connection*
proton:TagResource [tagging] => *,component,environment,environment-account-connection,environment-template,environment-template-major-version,environment-template-minor-version,environment-template-version,repository,service,service-instance,service-template,service-template-major-version,service-template-minor-version,service-template-version
proton:UntagResource [tagging] => *,component,environment,environment-account-connection,environment-template,environment-template-major-version,environment-template-minor-version,environment-template-version,repository,service,service-instance,service-template,service-template-major-version,service-template-minor-version,service-template-version
proton:UpdateAccountRoles [write] => *
proton:UpdateAccountSettings [write] => *
proton:UpdateComponent [write] => component*
proton:UpdateEnvironment [write] => *,environment*
proton:UpdateEnvironmentAccountConnection [write] => environment-account-connection*
proton:UpdateEnvironmentTemplate [write] => environment-template*
proton:UpdateEnvironmentTemplateMajorVersion [write] => environment-template*
proton:UpdateEnvironmentTemplateMinorVersion [write] => environment-template*
proton:UpdateEnvironmentTemplateVersion [write] => environment-template*
proton:UpdateService [write] => *,service*
proton:UpdateServiceInstance [write] => *,service-instance*
proton:UpdateServicePipeline [write] => *,service*
proton:UpdateServiceTemplate [write] => service-template*
proton:UpdateServiceTemplateMajorVersion [write] => service-template*
proton:UpdateServiceTemplateMinorVersion [write] => service-template*
proton:UpdateServiceTemplateVersion [write] => service-template*
proton:UpdateTemplateSyncConfig [write] => *
purchase-orders:ModifyPurchaseOrders [write] => *
purchase-orders:ViewPurchaseOrders [read] => *
qldb:CancelJournalKinesisStream [write] => stream*
qldb:CreateLedger [write] => *,ledger*
qldb:DeleteLedger [write] => ledger*
qldb:DescribeJournalKinesisStream [read] => stream*
qldb:DescribeJournalS3Export [read] => ledger*
qldb:DescribeLedger [read] => ledger*
qldb:ExecuteStatement [write] => ledger*
qldb:ExportJournalToS3 [write] => ledger*
qldb:GetBlock [read] => ledger*
qldb:GetDigest [read] => ledger*
qldb:GetRevision [read] => ledger*
qldb:InsertSampleData [write] => ledger*
qldb:ListJournalKinesisStreamsForLedger [list] => stream*
qldb:ListJournalS3Exports [list] => *
qldb:ListJournalS3ExportsForLedger [list] => ledger*
qldb:ListLedgers [list] => *
qldb:ListTagsForResource [read] => catalog,ledger,stream,table
qldb:PartiQLCreateIndex [write] => table*
qldb:PartiQLCreateTable [write] => *,table*
qldb:PartiQLDelete [write] => table*
qldb:PartiQLDropIndex [write] => *,table*
qldb:PartiQLDropTable [write] => *,table*
qldb:PartiQLHistoryFunction [read] => table*
qldb:PartiQLInsert [write] => table*
qldb:PartiQLSelect [read] => catalog,table
qldb:PartiQLUndropTable [write] => table*
qldb:PartiQLUpdate [write] => table*
qldb:SendCommand [write] => ledger*
qldb:ShowCatalog [write] => ledger*
qldb:StreamJournalToKinesis [write] => *,stream*
qldb:TagResource [tagging] => *,catalog,ledger,stream,table
qldb:UntagResource [tagging] => *,catalog,ledger,stream,table
qldb:UpdateLedger [write] => ledger*
qldb:UpdateLedgerPermissionsMode [write] => ledger*
quicksight:AccountConfigurations [write] => *
quicksight:CancelIngestion [write] => *,ingestion*
quicksight:CreateAccountCustomization [write] => *
quicksight:CreateAccountSubscription [write] => *
quicksight:CreateAdmin [write] => user*
quicksight:CreateAnalysis [write] => *,analysis*
quicksight:CreateCustomPermissions [permissions-management] => *
quicksight:CreateDashboard [write] => *,dashboard*
quicksight:CreateDataSet [write] => *,datasource*
quicksight:CreateDataSource [write] => *
quicksight:CreateEmailCustomizationTemplate [write] => emailCustomizationTemplate*
quicksight:CreateFolder [write] => *,folder*
quicksight:CreateFolderMembership [write] => analysis,dashboard,dataset,folder*
quicksight:CreateGroup [write] => group*
quicksight:CreateGroupMembership [write] => *,group*
quicksight:CreateIAMPolicyAssignment [write] => assignment*
quicksight:CreateIngestion [write] => *,ingestion*
quicksight:CreateNamespace [write] => namespace*
quicksight:CreateReader [write] => user*
quicksight:CreateTemplate [write] => *,template*
quicksight:CreateTemplateAlias [write] => *,template*
quicksight:CreateTheme [write] => *,theme*
quicksight:CreateThemeAlias [write] => *,theme*
quicksight:CreateUser [write] => user*
quicksight:CreateVPCConnection [write] => *
quicksight:DeleteAccountCustomization [write] => customization*
quicksight:DeleteAnalysis [write] => analysis*
quicksight:DeleteCustomPermissions [permissions-management] => *
quicksight:DeleteDashboard [write] => dashboard*
quicksight:DeleteDataSet [write] => *,dataset*
quicksight:DeleteDataSource [write] => *,datasource*
quicksight:DeleteEmailCustomizationTemplate [write] => emailCustomizationTemplate*
quicksight:DeleteFolder [write] => folder*
quicksight:DeleteFolderMembership [write] => analysis,dashboard,dataset,folder*
quicksight:DeleteGroup [write] => group*
quicksight:DeleteGroupMembership [write] => group*
quicksight:DeleteIAMPolicyAssignment [write] => assignment*
quicksight:DeleteNamespace [write] => namespace*
quicksight:DeleteTemplate [write] => template*
quicksight:DeleteTemplateAlias [write] => template*
quicksight:DeleteTheme [write] => theme*
quicksight:DeleteThemeAlias [write] => theme*
quicksight:DeleteUser [write] => user*
quicksight:DeleteUserByPrincipalId [write] => user*
quicksight:DeleteVPCConnection [write] => *
quicksight:DescribeAccountCustomization [read] => customization*
quicksight:DescribeAccountSettings [read] => *
quicksight:DescribeAccountSubscription [read] => account*
quicksight:DescribeAnalysis [read] => analysis*
quicksight:DescribeAnalysisPermissions [read] => analysis*
quicksight:DescribeCustomPermissions [write] => *
quicksight:DescribeDashboard [read] => dashboard*
quicksight:DescribeDashboardPermissions [read] => dashboard*
quicksight:DescribeDataSet [read] => *,dataset*
quicksight:DescribeDataSetPermissions [permissions-management] => *,dataset*
quicksight:DescribeDataSource [read] => *,datasource*
quicksight:DescribeDataSourcePermissions [permissions-management] => *,datasource*
quicksight:DescribeEmailCustomizationTemplate [read] => emailCustomizationTemplate*
quicksight:DescribeFolder [read] => folder*
quicksight:DescribeFolderPermissions [read] => folder*
quicksight:DescribeFolderResolvedPermissions [read] => folder*
quicksight:DescribeGroup [read] => group*
quicksight:DescribeGroupMembership [read] => group*
quicksight:DescribeIAMPolicyAssignment [read] => assignment*
quicksight:DescribeIngestion [read] => *,ingestion*
quicksight:DescribeIpRestriction [read] => *
quicksight:DescribeNamespace [read] => namespace*
quicksight:DescribeTemplate [read] => template*
quicksight:DescribeTemplateAlias [read] => template*
quicksight:DescribeTemplatePermissions [read] => template*
quicksight:DescribeTheme [read] => theme*
quicksight:DescribeThemeAlias [read] => theme*
quicksight:DescribeThemePermissions [read] => theme*
quicksight:DescribeUser [read] => user*
quicksight:GenerateEmbedUrlForAnonymousUser [write] => *,dashboard*,namespace*
quicksight:GenerateEmbedUrlForRegisteredUser [write] => *,user*
quicksight:GetAnonymousUserEmbedUrl [read] => *
quicksight:GetAuthCode [read] => user*
quicksight:GetDashboardEmbedUrl [read] => dashboard*
quicksight:GetGroupMapping [read] => *
quicksight:GetSessionEmbedUrl [read] => *
quicksight:ListAnalyses [list] => analysis*
quicksight:ListCustomPermissions [write] => *
quicksight:ListDashboardVersions [list] => dashboard*
quicksight:ListDashboards [list] => dashboard*
quicksight:ListDataSets [list] => *
quicksight:ListDataSources [list] => *
quicksight:ListFolderMembers [read] => folder*
quicksight:ListFolders [list] => folder*
quicksight:ListGroupMemberships [list] => group*
quicksight:ListGroups [list] => group*
quicksight:ListIAMPolicyAssignments [list] => assignment*
quicksight:ListIAMPolicyAssignmentsForUser [list] => assignment*
quicksight:ListIngestions [list] => *
quicksight:ListNamespaces [list] => *
quicksight:ListTagsForResource [read] => customization,dashboard,folder,template,theme
quicksight:ListTemplateAliases [list] => template*
quicksight:ListTemplateVersions [list] => template*
quicksight:ListTemplates [list] => template*
quicksight:ListThemeAliases [list] => theme*
quicksight:ListThemeVersions [list] => theme*
quicksight:ListThemes [list] => theme*
quicksight:ListUserGroups [list] => user*
quicksight:ListUsers [list] => user*
quicksight:PassDataSet [read] => *,dataset*
quicksight:PassDataSource [read] => *,datasource*
quicksight:RegisterUser [write] => user*
quicksight:RestoreAnalysis [write] => analysis*
quicksight:ScopeDownPolicy [write] => *
quicksight:SearchAnalyses [list] => analysis*
quicksight:SearchDashboards [list] => dashboard*
quicksight:SearchDirectoryGroups [list] => *
quicksight:SearchFolders [read] => folder*
quicksight:SearchGroups [list] => group*
quicksight:SetGroupMapping [write] => *
quicksight:Subscribe [write] => *
quicksight:TagResource [tagging] => *,analysis,customization,dashboard,dataset,datasource,folder,ingestion,template,theme
quicksight:Unsubscribe [write] => *
quicksight:UntagResource [tagging] => *,analysis,customization,dashboard,dataset,datasource,folder,ingestion,template,theme
quicksight:UpdateAccountCustomization [write] => customization*
quicksight:UpdateAccountSettings [write] => *
quicksight:UpdateAnalysis [write] => analysis*
quicksight:UpdateAnalysisPermissions [permissions-management] => analysis*
quicksight:UpdateCustomPermissions [permissions-management] => *
quicksight:UpdateDashboard [write] => dashboard*
quicksight:UpdateDashboardPermissions [permissions-management] => dashboard*
quicksight:UpdateDashboardPublishedVersion [write] => dashboard*
quicksight:UpdateDataSet [write] => *,dataset*,datasource
quicksight:UpdateDataSetPermissions [permissions-management] => *,dataset*
quicksight:UpdateDataSource [write] => *,datasource*
quicksight:UpdateDataSourcePermissions [permissions-management] => *,datasource*
quicksight:UpdateEmailCustomizationTemplate [write] => emailCustomizationTemplate*
quicksight:UpdateFolder [write] => folder*
quicksight:UpdateFolderPermissions [permissions-management] => folder*
quicksight:UpdateGroup [write] => group*
quicksight:UpdateIAMPolicyAssignment [write] => assignment*
quicksight:UpdateIpRestriction [write] => *
quicksight:UpdatePublicSharingSettings [write] => *
quicksight:UpdateResourcePermissions [write] => *
quicksight:UpdateTemplate [write] => template*
quicksight:UpdateTemplateAlias [write] => template*
quicksight:UpdateTemplatePermissions [permissions-management] => template*
quicksight:UpdateTheme [write] => theme*
quicksight:UpdateThemeAlias [write] => theme*
quicksight:UpdateThemePermissions [permissions-management] => theme*
quicksight:UpdateUser [write] => user*
ram:AcceptResourceShareInvitation [write] => *,resource-share-invitation*
ram:AssociateResourceShare [write] => *,resource-share*
ram:AssociateResourceSharePermission [write] => permission*,resource-share*
ram:CreateResourceShare [write] => *
ram:DeleteResourceShare [write] => *,resource-share*
ram:DisassociateResourceShare [write] => *,resource-share*
ram:DisassociateResourceSharePermission [write] => permission*,resource-share*
ram:EnableSharingWithAwsOrganization [permissions-management] => *
ram:GetPermission [read] => *,permission*
ram:GetResourcePolicies [read] => *
ram:GetResourceShareAssociations [read] => *
ram:GetResourceShareInvitations [read] => *
ram:GetResourceShares [read] => *
ram:ListPendingInvitationResources [read] => resource-share-invitation*
ram:ListPermissionVersions [list] => *
ram:ListPermissions [list] => *
ram:ListPrincipals [list] => *
ram:ListResourceSharePermissions [list] => *,resource-share*
ram:ListResourceTypes [list] => *
ram:ListResources [list] => *
ram:PromoteResourceShareCreatedFromPolicy [write] => resource-share*
ram:RejectResourceShareInvitation [write] => *,resource-share-invitation*
ram:TagResource [tagging] => *,resource-share*
ram:UntagResource [tagging] => *,resource-share*
ram:UpdateResourceShare [write] => *,resource-share*
rbin:CreateRule [write] => *,rule*
rbin:DeleteRule [write] => *,rule*
rbin:GetRule [read] => *,rule*
rbin:ListRules [read] => *
rbin:ListTagsForResource [read] => *,rule*
rbin:TagResource [tagging] => *,rule*
rbin:UntagResource [tagging] => *,rule*
rbin:UpdateRule [write] => *,rule*
rds:AddRoleToDBCluster [write] => cluster*
rds:AddRoleToDBInstance [write] => db*
rds:AddSourceIdentifierToSubscription [write] => es*
rds:AddTagsToResource [tagging] => *,cev,cluster,cluster-endpoint,cluster-pg,cluster-snapshot,db,es,og,pg,proxy,proxy-endpoint,ri,secgrp,snapshot,subgrp,target-group
rds:ApplyPendingMaintenanceAction [write] => cluster,db
rds:AuthorizeDBSecurityGroupIngress [permissions-management] => secgrp*
rds:BacktrackDBCluster [write] => cluster*
rds:CancelExportTask [write] => *
rds:CopyDBClusterParameterGroup [write] => *,cluster-pg*
rds:CopyDBClusterSnapshot [write] => *,cluster-snapshot*
rds:CopyDBParameterGroup [write] => *,pg*
rds:CopyDBSnapshot [write] => *,snapshot*
rds:CopyOptionGroup [write] => *,og*
rds:CreateCustomDBEngineVersion [write] => *,cev*
rds:CreateDBCluster [write] => *,cluster*,cluster-pg*,db,global-cluster,og*,subgrp*
rds:CreateDBClusterEndpoint [write] => *,cluster*,cluster-endpoint*
rds:CreateDBClusterParameterGroup [write] => *,cluster-pg*
rds:CreateDBClusterSnapshot [write] => *,cluster*,cluster-snapshot*
rds:CreateDBInstance [write] => *,cluster,db*,og,pg,secgrp,subgrp
rds:CreateDBInstanceReadReplica [write] => *,db*,og*,subgrp*
rds:CreateDBParameterGroup [write] => *,pg*
rds:CreateDBProxy [write] => *
rds:CreateDBProxyEndpoint [write] => *,proxy*,proxy-endpoint*
rds:CreateDBSecurityGroup [write] => *,secgrp*
rds:CreateDBSnapshot [write] => *,db*,snapshot*
rds:CreateDBSubnetGroup [write] => *,subgrp*
rds:CreateEventSubscription [write] => *,es*
rds:CreateGlobalCluster [write] => cluster*,global-cluster*
rds:CreateOptionGroup [write] => *,og*
rds:CrossRegionCommunication [write] => *
rds:DeleteCustomDBEngineVersion [write] => cev*
rds:DeleteDBCluster [write] => cluster*,cluster-snapshot*
rds:DeleteDBClusterEndpoint [write] => cluster-endpoint*
rds:DeleteDBClusterParameterGroup [write] => cluster-pg*
rds:DeleteDBClusterSnapshot [write] => cluster-snapshot*
rds:DeleteDBInstance [write] => db*
rds:DeleteDBInstanceAutomatedBackup [write] => *
rds:DeleteDBParameterGroup [write] => pg*
rds:DeleteDBProxy [write] => proxy*
rds:DeleteDBProxyEndpoint [write] => proxy-endpoint*
rds:DeleteDBSecurityGroup [write] => secgrp*
rds:DeleteDBSnapshot [write] => snapshot*
rds:DeleteDBSubnetGroup [write] => subgrp*
rds:DeleteEventSubscription [write] => es*
rds:DeleteGlobalCluster [write] => global-cluster*
rds:DeleteOptionGroup [write] => og*
rds:DeregisterDBProxyTargets [write] => cluster*,db*,proxy*,target-group*
rds:DescribeAccountAttributes [list] => *
rds:DescribeCertificates [list] => *
rds:DescribeDBClusterBacktracks [list] => cluster*
rds:DescribeDBClusterEndpoints [list] => cluster,cluster-endpoint*
rds:DescribeDBClusterParameterGroups [list] => cluster-pg*
rds:DescribeDBClusterParameters [list] => cluster-pg*
rds:DescribeDBClusterSnapshotAttributes [list] => cluster-snapshot*
rds:DescribeDBClusterSnapshots [list] => cluster-snapshot*
rds:DescribeDBClusters [list] => cluster*
rds:DescribeDBEngineVersions [list] => *
rds:DescribeDBInstanceAutomatedBackups [list] => db
rds:DescribeDBInstances [list] => db*
rds:DescribeDBLogFiles [list] => db*
rds:DescribeDBParameterGroups [list] => pg*
rds:DescribeDBParameters [list] => pg*
rds:DescribeDBProxies [list] => proxy*
rds:DescribeDBProxyEndpoints [list] => proxy*,proxy-endpoint*
rds:DescribeDBProxyTargetGroups [list] => proxy*
rds:DescribeDBProxyTargets [list] => cluster*,db*,proxy*,target-group*
rds:DescribeDBSecurityGroups [list] => secgrp*
rds:DescribeDBSnapshotAttributes [list] => snapshot*
rds:DescribeDBSnapshots [list] => db,snapshot*
rds:DescribeDBSubnetGroups [list] => subgrp*
rds:DescribeEngineDefaultClusterParameters [list] => *
rds:DescribeEngineDefaultParameters [list] => *
rds:DescribeEventCategories [list] => *
rds:DescribeEventSubscriptions [list] => es*
rds:DescribeEvents [list] => *
rds:DescribeExportTasks [list] => *
rds:DescribeGlobalClusters [list] => global-cluster*
rds:DescribeOptionGroupOptions [list] => og*
rds:DescribeOptionGroups [list] => og*
rds:DescribeOrderableDBInstanceOptions [list] => *
rds:DescribePendingMaintenanceActions [list] => cluster,db
rds:DescribeRecommendationGroups [read] => *
rds:DescribeRecommendations [read] => *
rds:DescribeReservedDBInstances [list] => ri*
rds:DescribeReservedDBInstancesOfferings [list] => *
rds:DescribeSourceRegions [list] => *
rds:DescribeValidDBInstanceModifications [list] => db*
rds:DownloadCompleteDBLogFile [read] => db*
rds:DownloadDBLogFilePortion [read] => db*
rds:FailoverDBCluster [write] => cluster*
rds:FailoverGlobalCluster [write] => cluster*,global-cluster*
rds:ListTagsForResource [read] => cev,cluster,cluster-endpoint,cluster-pg,cluster-snapshot,db,es,og,pg,proxy,proxy-endpoint,ri,secgrp,snapshot,subgrp,target-group
rds:ModifyActivityStream [write] => db*
rds:ModifyCertificates [write] => *
rds:ModifyCurrentDBClusterCapacity [write] => cluster*
rds:ModifyCustomDBEngineVersion [write] => cev*
rds:ModifyDBCluster [write] => *,cluster*,cluster-pg*,og*
rds:ModifyDBClusterEndpoint [write] => cluster-endpoint*
rds:ModifyDBClusterParameterGroup [write] => cluster-pg*
rds:ModifyDBClusterSnapshotAttribute [write] => cluster-snapshot*
rds:ModifyDBInstance [write] => db*,og*,pg*,secgrp*
rds:ModifyDBParameterGroup [write] => pg*
rds:ModifyDBProxy [write] => proxy*
rds:ModifyDBProxyEndpoint [write] => proxy-endpoint*
rds:ModifyDBProxyTargetGroup [write] => target-group*
rds:ModifyDBSnapshot [write] => snapshot*
rds:ModifyDBSnapshotAttribute [write] => snapshot*
rds:ModifyDBSubnetGroup [write] => subgrp*
rds:ModifyEventSubscription [write] => es*
rds:ModifyGlobalCluster [write] => global-cluster*
rds:ModifyOptionGroup [write] => og*
rds:ModifyRecommendation [write] => *
rds:PromoteReadReplica [write] => db*
rds:PromoteReadReplicaDBCluster [write] => cluster*
rds:PurchaseReservedDBInstancesOffering [write] => *,ri*
rds:RebootDBCluster [write] => cluster*
rds:RebootDBInstance [write] => db*
rds:RegisterDBProxyTargets [write] => target-group*
rds:RemoveFromGlobalCluster [write] => cluster*,global-cluster*
rds:RemoveRoleFromDBCluster [write] => cluster*
rds:RemoveRoleFromDBInstance [write] => db*
rds:RemoveSourceIdentifierFromSubscription [write] => es*
rds:RemoveTagsFromResource [tagging] => *,cev,cluster,cluster-endpoint,cluster-pg,cluster-snapshot,db,es,og,pg,proxy,proxy-endpoint,ri,secgrp,snapshot,subgrp,target-group
rds:ResetDBClusterParameterGroup [write] => cluster-pg*
rds:ResetDBParameterGroup [write] => pg*
rds:RestoreDBClusterFromS3 [write] => *,cluster*,cluster-pg*,og*,subgrp*
rds:RestoreDBClusterFromSnapshot [write] => *,cluster*,cluster-pg*,cluster-snapshot*,og*,subgrp*
rds:RestoreDBClusterToPointInTime [write] => *,cluster*,cluster-pg*,og*,subgrp*
rds:RestoreDBInstanceFromDBSnapshot [write] => *,db*,og*,pg*,snapshot*,subgrp*
rds:RestoreDBInstanceFromS3 [write] => *,db*,og*,pg*,subgrp*
rds:RestoreDBInstanceToPointInTime [write] => *,db*,og*,pg*,subgrp*
rds:RevokeDBSecurityGroupIngress [write] => secgrp*
rds:StartActivityStream [write] => cluster,db
rds:StartDBCluster [write] => cluster*
rds:StartDBInstance [write] => db*
rds:StartDBInstanceAutomatedBackupsReplication [write] => db*
rds:StartExportTask [write] => *
rds:StopActivityStream [write] => cluster,db
rds:StopDBCluster [write] => cluster*
rds:StopDBInstance [write] => db*
rds:StopDBInstanceAutomatedBackupsReplication [write] => db*
rds:SwitchoverReadReplica [write] => db*
rds-data:BatchExecuteStatement [write] => *,cluster*
rds-data:BeginTransaction [write] => *,cluster*
rds-data:CommitTransaction [write] => *,cluster*
rds-data:ExecuteSql [write] => *,cluster*
rds-data:ExecuteStatement [write] => *,cluster*
rds-data:RollbackTransaction [write] => *,cluster*
rds-db:connect [permissions-management] => db-user*
redshift:AcceptReservedNodeExchange [write] => *
redshift:AddPartner [write] => *
redshift:AssociateDataShareConsumer [write] => *,datashare*
redshift:AuthorizeClusterSecurityGroupIngress [write] => securitygroup*,securitygroupingress-ec2securitygroup*
redshift:AuthorizeDataShare [permissions-management] => *,datashare*
redshift:AuthorizeEndpointAccess [permissions-management] => *
redshift:AuthorizeSnapshotAccess [permissions-management] => snapshot*
redshift:BatchDeleteClusterSnapshots [write] => snapshot*
redshift:BatchModifyClusterSnapshots [write] => snapshot*
redshift:CancelQuery [write] => *
redshift:CancelQuerySession [write] => *
redshift:CancelResize [write] => cluster*
redshift:CopyClusterSnapshot [write] => *,snapshot*
redshift:CreateAuthenticationProfile [write] => *
redshift:CreateCluster [write] => *,cluster*
redshift:CreateClusterParameterGroup [write] => *,parametergroup*
redshift:CreateClusterSecurityGroup [write] => *,securitygroup*
redshift:CreateClusterSnapshot [write] => *,snapshot*
redshift:CreateClusterSubnetGroup [write] => *,subnetgroup*
redshift:CreateClusterUser [permissions-management] => *,dbuser*
redshift:CreateEndpointAccess [write] => *
redshift:CreateEventSubscription [write] => *,eventsubscription*
redshift:CreateHsmClientCertificate [write] => *,hsmclientcertificate*
redshift:CreateHsmConfiguration [write] => *,hsmconfiguration*
redshift:CreateSavedQuery [write] => *
redshift:CreateScheduledAction [write] => *
redshift:CreateSnapshotCopyGrant [permissions-management] => *,snapshotcopygrant*
redshift:CreateSnapshotSchedule [write] => *,snapshotschedule*
redshift:CreateTags [tagging] => *,cluster,dbgroup,dbname,dbuser,eventsubscription,hsmclientcertificate,hsmconfiguration,parametergroup,securitygroup,securitygroupingress-cidr,securitygroupingress-ec2securitygroup,snapshot,snapshotcopygrant,snapshotschedule,subnetgroup,usagelimit
redshift:CreateUsageLimit [write] => *,usagelimit*
redshift:DeauthorizeDataShare [permissions-management] => *,datashare*
redshift:DeleteAuthenticationProfile [write] => *
redshift:DeleteCluster [write] => cluster*
redshift:DeleteClusterParameterGroup [write] => parametergroup*
redshift:DeleteClusterSecurityGroup [write] => securitygroup*
redshift:DeleteClusterSnapshot [write] => snapshot*
redshift:DeleteClusterSubnetGroup [write] => subnetgroup*
redshift:DeleteEndpointAccess [write] => *
redshift:DeleteEventSubscription [write] => eventsubscription*
redshift:DeleteHsmClientCertificate [write] => hsmclientcertificate*
redshift:DeleteHsmConfiguration [write] => hsmconfiguration*
redshift:DeletePartner [write] => *
redshift:DeleteSavedQueries [write] => *
redshift:DeleteScheduledAction [write] => *
redshift:DeleteSnapshotCopyGrant [write] => snapshotcopygrant*
redshift:DeleteSnapshotSchedule [write] => snapshotschedule*
redshift:DeleteTags [tagging] => *,cluster,dbgroup,dbname,dbuser,eventsubscription,hsmclientcertificate,hsmconfiguration,parametergroup,securitygroup,securitygroupingress-cidr,securitygroupingress-ec2securitygroup,snapshot,snapshotcopygrant,snapshotschedule,subnetgroup,usagelimit
redshift:DeleteUsageLimit [write] => usagelimit*
redshift:DescribeAccountAttributes [read] => *
redshift:DescribeAuthenticationProfiles [read] => *
redshift:DescribeClusterDbRevisions [list] => *
redshift:DescribeClusterParameterGroups [read] => *
redshift:DescribeClusterParameters [read] => parametergroup*
redshift:DescribeClusterSecurityGroups [read] => *
redshift:DescribeClusterSnapshots [read] => *
redshift:DescribeClusterSubnetGroups [read] => *
redshift:DescribeClusterTracks [list] => *
redshift:DescribeClusterVersions [read] => *
redshift:DescribeClusters [list] => *
redshift:DescribeDataShares [read] => *
redshift:DescribeDataSharesForConsumer [read] => *
redshift:DescribeDataSharesForProducer [read] => *
redshift:DescribeDefaultClusterParameters [read] => *
redshift:DescribeEndpointAccess [read] => *
redshift:DescribeEndpointAuthorization [permissions-management] => *
redshift:DescribeEventCategories [read] => *
redshift:DescribeEventSubscriptions [read] => *
redshift:DescribeEvents [list] => *
redshift:DescribeHsmClientCertificates [read] => *
redshift:DescribeHsmConfigurations [read] => *
redshift:DescribeLoggingStatus [read] => cluster*
redshift:DescribeNodeConfigurationOptions [list] => *
redshift:DescribeOrderableClusterOptions [read] => *
redshift:DescribePartners [read] => *
redshift:DescribeQuery [read] => *
redshift:DescribeReservedNodeExchangeStatus [read] => *
redshift:DescribeReservedNodeOfferings [read] => *
redshift:DescribeReservedNodes [read] => *
redshift:DescribeResize [read] => cluster*
redshift:DescribeSavedQueries [read] => *
redshift:DescribeScheduledActions [read] => *
redshift:DescribeSnapshotCopyGrants [read] => *
redshift:DescribeSnapshotSchedules [read] => snapshotschedule*
redshift:DescribeStorage [read] => *
redshift:DescribeTable [read] => *
redshift:DescribeTableRestoreStatus [read] => *
redshift:DescribeTags [read] => cluster,dbgroup,dbname,dbuser,eventsubscription,hsmclientcertificate,hsmconfiguration,parametergroup,securitygroup,securitygroupingress-cidr,securitygroupingress-ec2securitygroup,snapshot,snapshotcopygrant,snapshotschedule,subnetgroup,usagelimit
redshift:DescribeUsageLimits [read] => usagelimit*
redshift:DisableLogging [write] => cluster*
redshift:DisableSnapshotCopy [write] => cluster*
redshift:DisassociateDataShareConsumer [write] => *,datashare*
redshift:EnableLogging [write] => cluster*
redshift:EnableSnapshotCopy [write] => cluster*
redshift:ExecuteQuery [write] => *
redshift:FetchResults [read] => *
redshift:GetClusterCredentials [write] => *,dbgroup,dbname,dbuser*
redshift:GetReservedNodeExchangeConfigurationOptions [read] => *
redshift:GetReservedNodeExchangeOfferings [read] => *
redshift:JoinGroup [permissions-management] => dbgroup*
redshift:ListDatabases [list] => *
redshift:ListSavedQueries [list] => *
redshift:ListSchemas [list] => *
redshift:ListTables [list] => *
redshift:ModifyAquaConfiguration [write] => cluster*
redshift:ModifyAuthenticationProfile [write] => *
redshift:ModifyCluster [write] => cluster*
redshift:ModifyClusterDbRevision [write] => cluster*
redshift:ModifyClusterIamRoles [permissions-management] => cluster*
redshift:ModifyClusterMaintenance [write] => *
redshift:ModifyClusterParameterGroup [write] => parametergroup*
redshift:ModifyClusterSnapshot [write] => snapshot*
redshift:ModifyClusterSnapshotSchedule [write] => cluster*
redshift:ModifyClusterSubnetGroup [write] => subnetgroup*
redshift:ModifyEndpointAccess [write] => *
redshift:ModifyEventSubscription [write] => eventsubscription*
redshift:ModifySavedQuery [write] => *
redshift:ModifyScheduledAction [write] => *
redshift:ModifySnapshotCopyRetentionPeriod [write] => cluster*
redshift:ModifySnapshotSchedule [write] => snapshotschedule*
redshift:ModifyUsageLimit [write] => usagelimit*
redshift:PauseCluster [write] => cluster*
redshift:PurchaseReservedNodeOffering [write] => *
redshift:RebootCluster [write] => cluster*
redshift:RejectDataShare [permissions-management] => datashare*
redshift:ResetClusterParameterGroup [write] => parametergroup*
redshift:ResizeCluster [write] => cluster*
redshift:RestoreFromClusterSnapshot [write] => *,cluster*,snapshot*
redshift:RestoreTableFromClusterSnapshot [write] => cluster*,snapshot*
redshift:ResumeCluster [write] => cluster*
redshift:RevokeClusterSecurityGroupIngress [write] => securitygroup*,securitygroupingress-ec2securitygroup*
redshift:RevokeEndpointAccess [permissions-management] => *
redshift:RevokeSnapshotAccess [permissions-management] => snapshot*
redshift:RotateEncryptionKey [write] => cluster*
redshift:UpdatePartnerStatus [write] => *
redshift:ViewQueriesFromConsole [list] => *
redshift:ViewQueriesInConsole [list] => *
redshift-data:BatchExecuteStatement [write] => cluster*
redshift-data:CancelStatement [write] => *
redshift-data:DescribeStatement [read] => *
redshift-data:DescribeTable [read] => cluster*
redshift-data:ExecuteStatement [write] => cluster*
redshift-data:GetStatementResult [read] => *
redshift-data:ListDatabases [read] => cluster*
redshift-data:ListSchemas [read] => cluster*
redshift-data:ListStatements [list] => *
redshift-data:ListTables [list] => cluster*
redshift-serverless:ConvertRecoveryPointToSnapshot [write] => recoveryPoint*,snapshot*
redshift-serverless:CreateEndpointAccess [write] => endpointAccess*
redshift-serverless:CreateNamespace [write] => *,namespace*
redshift-serverless:CreateSnapshot [write] => snapshot*
redshift-serverless:CreateUsageLimit [write] => *
redshift-serverless:CreateWorkgroup [write] => *,workgroup*
redshift-serverless:DeleteEndpointAccess [write] => endpointAccess*
redshift-serverless:DeleteNamespace [write] => namespace*
redshift-serverless:DeleteResourcePolicy [write] => *
redshift-serverless:DeleteSnapshot [write] => snapshot*
redshift-serverless:DeleteUsageLimit [write] => *
redshift-serverless:DeleteWorkgroup [write] => workgroup*
redshift-serverless:GetCredentials [write] => workgroup*
redshift-serverless:GetEndpointAccess [read] => endpointAccess*
redshift-serverless:GetNamespace [read] => namespace*
redshift-serverless:GetRecoveryPoint [read] => recoveryPoint*
redshift-serverless:GetResourcePolicy [read] => *
redshift-serverless:GetSnapshot [read] => snapshot*
redshift-serverless:GetUsageLimit [read] => *
redshift-serverless:GetWorkgroup [read] => workgroup*
redshift-serverless:ListEndpointAccess [list] => endpointAccess*
redshift-serverless:ListNamespaces [list] => *
redshift-serverless:ListRecoveryPoints [list] => namespace
redshift-serverless:ListSnapshots [list] => snapshot*
redshift-serverless:ListTagsForResource [list] => *,namespace,workgroup
redshift-serverless:ListUsageLimits [list] => *
redshift-serverless:ListWorkgroups [list] => *
redshift-serverless:PutResourcePolicy [write] => *
redshift-serverless:RestoreFromRecoveryPoint [write] => recoveryPoint*
redshift-serverless:RestoreFromSnapshot [write] => snapshot*
redshift-serverless:TagResource [tagging] => *,namespace,workgroup
redshift-serverless:UntagResource [tagging] => *,namespace,workgroup
redshift-serverless:UpdateEndpointAccess [write] => endpointAccess*
redshift-serverless:UpdateNamespace [write] => namespace*
redshift-serverless:UpdateSnapshot [write] => snapshot*
redshift-serverless:UpdateUsageLimit [write] => *
redshift-serverless:UpdateWorkgroup [write] => workgroup*
refactor-spaces:CreateApplication [write] => *
refactor-spaces:CreateEnvironment [write] => *
refactor-spaces:CreateRoute [write] => *
refactor-spaces:CreateService [write] => *
refactor-spaces:DeleteApplication [write] => *,application*
refactor-spaces:DeleteEnvironment [write] => *,environment*
refactor-spaces:DeleteResourcePolicy [write] => *
refactor-spaces:DeleteRoute [write] => *,route*
refactor-spaces:DeleteService [write] => *,service*
refactor-spaces:GetApplication [read] => *,application*
refactor-spaces:GetEnvironment [read] => *,environment*
refactor-spaces:GetResourcePolicy [read] => *
refactor-spaces:GetRoute [read] => *,route*
refactor-spaces:GetService [read] => *,service*
refactor-spaces:ListApplications [read] => environment*
refactor-spaces:ListEnvironmentVpcs [read] => environment*
refactor-spaces:ListEnvironments [read] => *
refactor-spaces:ListRoutes [read] => environment*
refactor-spaces:ListServices [read] => environment*
refactor-spaces:ListTagsForResource [read] => *
refactor-spaces:PutResourcePolicy [write] => *
refactor-spaces:TagResource [tagging] => *,application,environment,route,service
refactor-spaces:UntagResource [tagging] => *,application,environment,route,service
refactor-spaces:UpdateRoute [write] => *,route*
rekognition:CompareFaces [read] => *
rekognition:CopyProjectVersion [write] => *,project*,projectversion*
rekognition:CreateCollection [write] => *
rekognition:CreateDataset [write] => project*
rekognition:CreateProject [write] => project*
rekognition:CreateProjectVersion [write] => *,project*
rekognition:CreateStreamProcessor [write] => *,collection*
rekognition:DeleteCollection [write] => collection*
rekognition:DeleteDataset [write] => dataset*
rekognition:DeleteFaces [write] => collection*
rekognition:DeleteProject [write] => project*
rekognition:DeleteProjectPolicy [write] => project*
rekognition:DeleteProjectVersion [write] => projectversion*
rekognition:DeleteStreamProcessor [write] => streamprocessor*
rekognition:DescribeCollection [read] => collection*
rekognition:DescribeDataset [read] => dataset*
rekognition:DescribeProjectVersions [read] => project*
rekognition:DescribeProjects [read] => *
rekognition:DescribeStreamProcessor [read] => streamprocessor*
rekognition:DetectCustomLabels [read] => projectversion*
rekognition:DetectFaces [read] => *
rekognition:DetectLabels [read] => *
rekognition:DetectModerationLabels [read] => *
rekognition:DetectProtectiveEquipment [read] => *
rekognition:DetectText [read] => *
rekognition:DistributeDatasetEntries [write] => dataset*
rekognition:GetCelebrityInfo [read] => *
rekognition:GetCelebrityRecognition [read] => *
rekognition:GetContentModeration [read] => *
rekognition:GetFaceDetection [read] => *
rekognition:GetFaceSearch [read] => *
rekognition:GetLabelDetection [read] => *
rekognition:GetPersonTracking [read] => *
rekognition:GetSegmentDetection [read] => *
rekognition:GetTextDetection [read] => *
rekognition:IndexFaces [write] => collection*
rekognition:ListCollections [read] => collection*
rekognition:ListDatasetEntries [read] => dataset*
rekognition:ListDatasetLabels [read] => dataset*
rekognition:ListFaces [read] => collection*
rekognition:ListProjectPolicies [read] => project*
rekognition:ListStreamProcessors [list] => streamprocessor*
rekognition:ListTagsForResource [read] => projectversion*
rekognition:PutProjectPolicy [write] => project*
rekognition:RecognizeCelebrities [read] => *
rekognition:SearchFaces [read] => collection*
rekognition:SearchFacesByImage [read] => collection*
rekognition:StartCelebrityRecognition [write] => *
rekognition:StartContentModeration [write] => *
rekognition:StartFaceDetection [write] => *
rekognition:StartFaceSearch [write] => collection*
rekognition:StartLabelDetection [write] => *
rekognition:StartPersonTracking [write] => *
rekognition:StartProjectVersion [write] => projectversion*
rekognition:StartSegmentDetection [write] => *
rekognition:StartStreamProcessor [write] => streamprocessor*
rekognition:StartTextDetection [write] => *
rekognition:StopProjectVersion [write] => projectversion*
rekognition:StopStreamProcessor [write] => streamprocessor*
rekognition:TagResource [tagging] => *,collection,projectversion,streamprocessor
rekognition:UntagResource [tagging] => *,collection,projectversion,streamprocessor
rekognition:UpdateDatasetEntries [write] => dataset*
rekognition:UpdateStreamProcessor [write] => streamprocessor*
resiliencehub:AddDraftAppVersionResourceMappings [write] => application*
resiliencehub:CreateApp [write] => *
resiliencehub:CreateRecommendationTemplate [write] => *,application*
resiliencehub:CreateResiliencyPolicy [write] => *
resiliencehub:DeleteApp [write] => application*
resiliencehub:DeleteAppAssessment [write] => application*
resiliencehub:DeleteRecommendationTemplate [write] => application*
resiliencehub:DeleteResiliencyPolicy [write] => resiliency-policy*
resiliencehub:DescribeApp [read] => application*
resiliencehub:DescribeAppAssessment [read] => application*
resiliencehub:DescribeAppVersionResourcesResolutionStatus [read] => application*
resiliencehub:DescribeAppVersionTemplate [read] => application*
resiliencehub:DescribeDraftAppVersionResourcesImportStatus [read] => application*
resiliencehub:DescribeResiliencyPolicy [read] => resiliency-policy*
resiliencehub:ImportResourcesToDraftAppVersion [write] => application*
resiliencehub:ListAlarmRecommendations [list] => application*
resiliencehub:ListAppAssessments [list] => *
resiliencehub:ListAppComponentCompliances [list] => application*
resiliencehub:ListAppComponentRecommendations [list] => application*
resiliencehub:ListAppVersionResourceMappings [list] => application*
resiliencehub:ListAppVersionResources [list] => application*
resiliencehub:ListAppVersions [list] => application*
resiliencehub:ListApps [list] => *
resiliencehub:ListRecommendationTemplates [list] => application*
resiliencehub:ListResiliencyPolicies [list] => *
resiliencehub:ListSopRecommendations [list] => application*
resiliencehub:ListSuggestedResiliencyPolicies [list] => *
resiliencehub:ListTagsForResource [read] => *
resiliencehub:ListTestRecommendations [list] => application*
resiliencehub:ListUnsupportedAppVersionResources [list] => application*
resiliencehub:PublishAppVersion [write] => application*
resiliencehub:PutDraftAppVersionTemplate [write] => application*
resiliencehub:RemoveDraftAppVersionResourceMappings [write] => application*
resiliencehub:ResolveAppVersionResources [write] => application*
resiliencehub:StartAppAssessment [write] => *,application*
resiliencehub:TagResource [tagging] => *,app-assessment,application,recommendation-template,resiliency-policy
resiliencehub:UntagResource [tagging] => *,app-assessment,application,recommendation-template,resiliency-policy
resiliencehub:UpdateApp [write] => application*
resiliencehub:UpdateResiliencyPolicy [write] => resiliency-policy*
resource-explorer:ListResourceTypes [list] => *
resource-explorer:ListResources [list] => *
resource-explorer:ListTags [read] => *
resource-groups:CreateGroup [write] => *
resource-groups:DeleteGroup [write] => group*
resource-groups:GetGroup [read] => group*
resource-groups:GetGroupConfiguration [read] => group*
resource-groups:GetGroupQuery [read] => group*
resource-groups:GetTags [read] => group*
resource-groups:GroupResources [write] => group*
resource-groups:ListGroupResources [list] => group*
resource-groups:ListGroups [list] => *
resource-groups:PutGroupConfiguration [write] => group*
resource-groups:PutGroupPolicy [write] => group*
resource-groups:SearchResources [list] => *
resource-groups:Tag [tagging] => *,group*
resource-groups:UngroupResources [write] => group*
resource-groups:Untag [tagging] => *,group*
resource-groups:UpdateGroup [write] => group*
resource-groups:UpdateGroupQuery [write] => group*
rhelkb:GetRhelURL [read] => *
robomaker:BatchDeleteWorlds [write] => *
robomaker:BatchDescribeSimulationJob [read] => *
robomaker:CancelDeploymentJob [write] => deploymentJob*
robomaker:CancelSimulationJob [write] => simulationJob*
robomaker:CancelSimulationJobBatch [write] => simulationJobBatch*
robomaker:CancelWorldExportJob [write] => worldExportJob*
robomaker:CancelWorldGenerationJob [write] => worldGenerationJob*
robomaker:CreateDeploymentJob [write] => *
robomaker:CreateFleet [write] => *
robomaker:CreateRobot [write] => *
robomaker:CreateRobotApplication [write] => *
robomaker:CreateRobotApplicationVersion [write] => robotApplication*
robomaker:CreateSimulationApplication [write] => *
robomaker:CreateSimulationApplicationVersion [write] => simulationApplication*
robomaker:CreateSimulationJob [write] => *
robomaker:CreateWorldExportJob [write] => *,world*
robomaker:CreateWorldGenerationJob [write] => *,worldTemplate*
robomaker:CreateWorldTemplate [write] => *
robomaker:DeleteFleet [write] => deploymentFleet*
robomaker:DeleteRobot [write] => robot*
robomaker:DeleteRobotApplication [write] => robotApplication*
robomaker:DeleteSimulationApplication [write] => simulationApplication*
robomaker:DeleteWorldTemplate [write] => worldTemplate*
robomaker:DeregisterRobot [write] => deploymentFleet*,robot*
robomaker:DescribeDeploymentJob [read] => deploymentJob*
robomaker:DescribeFleet [read] => deploymentFleet*
robomaker:DescribeRobot [read] => robot*
robomaker:DescribeRobotApplication [read] => robotApplication*
robomaker:DescribeSimulationApplication [read] => simulationApplication*
robomaker:DescribeSimulationJob [read] => simulationJob*
robomaker:DescribeSimulationJobBatch [read] => simulationJobBatch*
robomaker:DescribeWorld [read] => world*
robomaker:DescribeWorldExportJob [read] => worldExportJob*
robomaker:DescribeWorldGenerationJob [read] => worldGenerationJob*
robomaker:DescribeWorldTemplate [read] => worldTemplate*
robomaker:GetWorldTemplateBody [read] => worldTemplate*
robomaker:ListDeploymentJobs [list] => *
robomaker:ListFleets [list] => *
robomaker:ListRobotApplications [list] => *
robomaker:ListRobots [list] => *
robomaker:ListSimulationApplications [list] => *
robomaker:ListSimulationJobBatches [list] => *
robomaker:ListSimulationJobs [list] => *
robomaker:ListSupportedAvailabilityZones [list] => *
robomaker:ListTagsForResource [list] => deploymentFleet,deploymentJob,robot,robotApplication,simulationApplication,simulationJob,simulationJobBatch,world,worldExportJob,worldGenerationJob,worldTemplate
robomaker:ListWorldExportJobs [list] => *
robomaker:ListWorldGenerationJobs [list] => *
robomaker:ListWorldTemplates [list] => *
robomaker:ListWorlds [list] => *
robomaker:RegisterRobot [write] => deploymentFleet*,robot*
robomaker:RestartSimulationJob [write] => simulationJob*
robomaker:StartSimulationJobBatch [write] => *
robomaker:SyncDeploymentJob [write] => deploymentFleet*
robomaker:TagResource [tagging] => *,deploymentFleet,deploymentJob,robot,robotApplication,simulationApplication,simulationJob,simulationJobBatch,world,worldExportJob,worldGenerationJob,worldTemplate
robomaker:UntagResource [tagging] => *,deploymentFleet,deploymentJob,robot,robotApplication,simulationApplication,simulationJob,simulationJobBatch,world,worldExportJob,worldGenerationJob,worldTemplate
robomaker:UpdateRobotApplication [write] => robotApplication*
robomaker:UpdateRobotDeployment [write] => *
robomaker:UpdateSimulationApplication [write] => simulationApplication*
robomaker:UpdateWorldTemplate [write] => worldTemplate*
rolesanywhere:CreateProfile [write] => *
rolesanywhere:CreateTrustAnchor [write] => *
rolesanywhere:DeleteCrl [write] => *
rolesanywhere:DeleteProfile [write] => *
rolesanywhere:DeleteTrustAnchor [write] => *
rolesanywhere:DisableCrl [write] => *
rolesanywhere:DisableProfile [write] => *
rolesanywhere:DisableTrustAnchor [write] => *
rolesanywhere:EnableCrl [write] => *
rolesanywhere:EnableProfile [write] => *
rolesanywhere:EnableTrustAnchor [write] => *
rolesanywhere:GetCrl [read] => *
rolesanywhere:GetProfile [read] => *
rolesanywhere:GetSubject [read] => *
rolesanywhere:GetTrustAnchor [read] => *
rolesanywhere:ImportCrl [write] => *
rolesanywhere:ListCrls [list] => *
rolesanywhere:ListProfiles [list] => *
rolesanywhere:ListSubjects [list] => *
rolesanywhere:ListTagsForResource [list] => *
rolesanywhere:ListTrustAnchors [list] => *
rolesanywhere:TagResource [tagging] => *,crl,profile,subject,trust-anchor
rolesanywhere:UntagResource [tagging] => *,crl,profile,subject,trust-anchor
rolesanywhere:UpdateCrl [write] => *
rolesanywhere:UpdateProfile [write] => *
rolesanywhere:UpdateTrustAnchor [write] => *
route53:ActivateKeySigningKey [write] => hostedzone*
route53:AssociateVPCWithHostedZone [write] => hostedzone
route53:ChangeCidrCollection [write] => cidrcollection*
route53:ChangeResourceRecordSets [write] => *,hostedzone*
route53:ChangeTagsForResource [tagging] => healthcheck*,hostedzone*
route53:CreateCidrCollection [write] => *
route53:CreateHealthCheck [write] => *
route53:CreateHostedZone [write] => *
route53:CreateKeySigningKey [write] => hostedzone*
route53:CreateQueryLoggingConfig [write] => hostedzone*
route53:CreateReusableDelegationSet [write] => *
route53:CreateTrafficPolicy [write] => *
route53:CreateTrafficPolicyInstance [write] => hostedzone*,trafficpolicy*
route53:CreateTrafficPolicyVersion [write] => trafficpolicy*
route53:CreateVPCAssociationAuthorization [write] => hostedzone*
route53:DeactivateKeySigningKey [write] => hostedzone*
route53:DeleteCidrCollection [write] => cidrcollection*
route53:DeleteHealthCheck [write] => healthcheck*
route53:DeleteHostedZone [write] => hostedzone*
route53:DeleteKeySigningKey [write] => hostedzone*
route53:DeleteQueryLoggingConfig [write] => queryloggingconfig*
route53:DeleteReusableDelegationSet [write] => delegationset*
route53:DeleteTrafficPolicy [write] => trafficpolicy*
route53:DeleteTrafficPolicyInstance [write] => trafficpolicyinstance*
route53:DeleteVPCAssociationAuthorization [write] => hostedzone*
route53:DisableHostedZoneDNSSEC [write] => hostedzone*
route53:DisassociateVPCFromHostedZone [write] => hostedzone
route53:EnableHostedZoneDNSSEC [write] => hostedzone*
route53:GetAccountLimit [read] => *
route53:GetChange [list] => change*
route53:GetCheckerIpRanges [list] => *
route53:GetDNSSEC [read] => hostedzone*
route53:GetGeoLocation [list] => *
route53:GetHealthCheck [read] => healthcheck*
route53:GetHealthCheckCount [list] => *
route53:GetHealthCheckLastFailureReason [list] => healthcheck*
route53:GetHealthCheckStatus [list] => healthcheck*
route53:GetHostedZone [list] => hostedzone*
route53:GetHostedZoneCount [list] => *
route53:GetHostedZoneLimit [read] => hostedzone*
route53:GetQueryLoggingConfig [read] => queryloggingconfig*
route53:GetReusableDelegationSet [list] => delegationset*
route53:GetReusableDelegationSetLimit [read] => delegationset*
route53:GetTrafficPolicy [read] => trafficpolicy*
route53:GetTrafficPolicyInstance [read] => trafficpolicyinstance*
route53:GetTrafficPolicyInstanceCount [read] => *
route53:ListCidrBlocks [list] => cidrcollection*
route53:ListCidrCollections [list] => *
route53:ListCidrLocations [list] => cidrcollection*
route53:ListGeoLocations [read] => *
route53:ListHealthChecks [read] => *
route53:ListHostedZones [list] => *
route53:ListHostedZonesByName [list] => *
route53:ListHostedZonesByVPC [list] => *
route53:ListQueryLoggingConfigs [list] => hostedzone
route53:ListResourceRecordSets [list] => hostedzone*
route53:ListReusableDelegationSets [read] => *
route53:ListTagsForResource [read] => healthcheck,hostedzone
route53:ListTagsForResources [read] => healthcheck,hostedzone
route53:ListTrafficPolicies [list] => *
route53:ListTrafficPolicyInstances [read] => *
route53:ListTrafficPolicyInstancesByHostedZone [list] => hostedzone*
route53:ListTrafficPolicyInstancesByPolicy [list] => trafficpolicy*
route53:ListTrafficPolicyVersions [list] => trafficpolicy*
route53:ListVPCAssociationAuthorizations [list] => hostedzone*
route53:TestDNSAnswer [read] => *
route53:UpdateHealthCheck [write] => healthcheck*
route53:UpdateHostedZoneComment [write] => hostedzone*
route53:UpdateTrafficPolicyComment [write] => trafficpolicy*
route53:UpdateTrafficPolicyInstance [write] => trafficpolicyinstance*
route53-recovery-cluster:GetRoutingControlState [read] => routingcontrol*
route53-recovery-cluster:ListRoutingControls [read] => *
route53-recovery-cluster:UpdateRoutingControlState [write] => *,routingcontrol*
route53-recovery-cluster:UpdateRoutingControlStates [write] => *,routingcontrol*
route53-recovery-control-config:CreateCluster [write] => *,cluster*
route53-recovery-control-config:CreateControlPanel [write] => *,controlpanel*
route53-recovery-control-config:CreateRoutingControl [write] => routingcontrol*
route53-recovery-control-config:CreateSafetyRule [write] => *,safetyrule*
route53-recovery-control-config:DeleteCluster [write] => cluster*
route53-recovery-control-config:DeleteControlPanel [write] => controlpanel*
route53-recovery-control-config:DeleteRoutingControl [write] => routingcontrol*
route53-recovery-control-config:DeleteSafetyRule [write] => safetyrule*
route53-recovery-control-config:DescribeCluster [read] => cluster*
route53-recovery-control-config:DescribeControlPanel [read] => controlpanel*
route53-recovery-control-config:DescribeRoutingControl [read] => routingcontrol*
route53-recovery-control-config:DescribeRoutingControlByName [read] => routingcontrol*
route53-recovery-control-config:DescribeSafetyRule [read] => safetyrule*
route53-recovery-control-config:ListAssociatedRoute53HealthChecks [list] => *
route53-recovery-control-config:ListClusters [read] => *
route53-recovery-control-config:ListControlPanels [read] => *
route53-recovery-control-config:ListRoutingControls [read] => *
route53-recovery-control-config:ListSafetyRules [read] => controlpanel*
route53-recovery-control-config:ListTagsForResource [read] => *
route53-recovery-control-config:TagResource [tagging] => *,cluster,controlpanel,safetyrule
route53-recovery-control-config:UntagResource [tagging] => *,cluster,controlpanel,safetyrule
route53-recovery-control-config:UpdateControlPanel [write] => controlpanel*
route53-recovery-control-config:UpdateRoutingControl [write] => routingcontrol*
route53-recovery-control-config:UpdateSafetyRule [write] => safetyrule*
route53-recovery-readiness:CreateCell [write] => *,cell*
route53-recovery-readiness:CreateCrossAccountAuthorization [write] => *
route53-recovery-readiness:CreateReadinessCheck [write] => *,readinesscheck*
route53-recovery-readiness:CreateRecoveryGroup [write] => *,recoverygroup*
route53-recovery-readiness:CreateResourceSet [write] => *,resourceset*
route53-recovery-readiness:DeleteCell [write] => cell*
route53-recovery-readiness:DeleteCrossAccountAuthorization [write] => *
route53-recovery-readiness:DeleteReadinessCheck [write] => readinesscheck*
route53-recovery-readiness:DeleteRecoveryGroup [write] => recoverygroup*
route53-recovery-readiness:DeleteResourceSet [write] => resourceset*
route53-recovery-readiness:GetArchitectureRecommendations [read] => recoverygroup*
route53-recovery-readiness:GetCell [read] => cell*
route53-recovery-readiness:GetCellReadinessSummary [read] => cell*
route53-recovery-readiness:GetReadinessCheck [read] => readinesscheck*
route53-recovery-readiness:GetReadinessCheckResourceStatus [read] => readinesscheck*
route53-recovery-readiness:GetReadinessCheckStatus [read] => readinesscheck*
route53-recovery-readiness:GetRecoveryGroup [read] => recoverygroup*
route53-recovery-readiness:GetRecoveryGroupReadinessSummary [read] => recoverygroup*
route53-recovery-readiness:GetResourceSet [read] => resourceset*
route53-recovery-readiness:ListCells [read] => *
route53-recovery-readiness:ListCrossAccountAuthorizations [read] => *
route53-recovery-readiness:ListReadinessChecks [read] => *
route53-recovery-readiness:ListRecoveryGroups [read] => *
route53-recovery-readiness:ListResourceSets [read] => *
route53-recovery-readiness:ListRules [read] => *
route53-recovery-readiness:ListTagsForResources [read] => *
route53-recovery-readiness:TagResource [tagging] => *,cell,readinesscheck,recoverygroup,resourceset
route53-recovery-readiness:UntagResource [tagging] => *,cell,readinesscheck,recoverygroup,resourceset
route53-recovery-readiness:UpdateCell [write] => *,cell*
route53-recovery-readiness:UpdateReadinessCheck [write] => *,readinesscheck*
route53-recovery-readiness:UpdateRecoveryGroup [write] => *,recoverygroup*
route53-recovery-readiness:UpdateResourceSet [write] => *,resourceset*
route53domains:AcceptDomainTransferFromAnotherAwsAccount [write] => *
route53domains:CancelDomainTransferToAnotherAwsAccount [write] => *
route53domains:CheckDomainAvailability [read] => *
route53domains:CheckDomainTransferability [read] => *
route53domains:DeleteDomain [write] => *
route53domains:DeleteTagsForDomain [tagging] => *
route53domains:DisableDomainAutoRenew [write] => *
route53domains:DisableDomainTransferLock [write] => *
route53domains:EnableDomainAutoRenew [write] => *
route53domains:EnableDomainTransferLock [write] => *
route53domains:GetContactReachabilityStatus [read] => *
route53domains:GetDomainDetail [read] => *
route53domains:GetDomainSuggestions [read] => *
route53domains:GetOperationDetail [read] => *
route53domains:ListDomains [list] => *
route53domains:ListOperations [list] => *
route53domains:ListPrices [list] => *
route53domains:ListTagsForDomain [read] => *
route53domains:RegisterDomain [write] => *
route53domains:RejectDomainTransferFromAnotherAwsAccount [write] => *
route53domains:RenewDomain [write] => *
route53domains:ResendContactReachabilityEmail [write] => *
route53domains:RetrieveDomainAuthCode [write] => *
route53domains:TransferDomain [write] => *
route53domains:TransferDomainToAnotherAwsAccount [write] => *
route53domains:UpdateDomainContact [write] => *
route53domains:UpdateDomainContactPrivacy [write] => *
route53domains:UpdateDomainNameservers [write] => *
route53domains:UpdateTagsForDomain [tagging] => *
route53domains:ViewBilling [read] => *
route53resolver:AssociateFirewallRuleGroup [write] => *,firewall-rule-group-association*
route53resolver:AssociateResolverEndpointIpAddress [write] => resolver-endpoint*
route53resolver:AssociateResolverQueryLogConfig [write] => resolver-query-log-config*
route53resolver:AssociateResolverRule [write] => resolver-rule*
route53resolver:CreateFirewallDomainList [write] => *,firewall-domain-list*
route53resolver:CreateFirewallRule [write] => firewall-rule-group*
route53resolver:CreateFirewallRuleGroup [write] => *,firewall-rule-group*
route53resolver:CreateResolverEndpoint [write] => *,resolver-endpoint*
route53resolver:CreateResolverQueryLogConfig [write] => *,resolver-query-log-config*
route53resolver:CreateResolverRule [write] => *,resolver-rule*
route53resolver:DeleteFirewallDomainList [write] => firewall-domain-list*
route53resolver:DeleteFirewallRule [write] => firewall-rule-group*
route53resolver:DeleteFirewallRuleGroup [write] => firewall-rule-group*
route53resolver:DeleteResolverEndpoint [write] => resolver-endpoint*
route53resolver:DeleteResolverQueryLogConfig [write] => resolver-query-log-config*
route53resolver:DeleteResolverRule [write] => resolver-rule*
route53resolver:DisassociateFirewallRuleGroup [write] => firewall-rule-group-association*
route53resolver:DisassociateResolverEndpointIpAddress [write] => resolver-endpoint*
route53resolver:DisassociateResolverQueryLogConfig [write] => resolver-query-log-config*
route53resolver:DisassociateResolverRule [write] => resolver-rule*
route53resolver:GetFirewallConfig [read] => firewall-config*
route53resolver:GetFirewallDomainList [read] => firewall-domain-list*
route53resolver:GetFirewallRuleGroup [read] => firewall-rule-group*
route53resolver:GetFirewallRuleGroupAssociation [read] => firewall-rule-group-association*
route53resolver:GetFirewallRuleGroupPolicy [read] => firewall-rule-group*
route53resolver:GetResolverConfig [read] => resolver-config*
route53resolver:GetResolverDnssecConfig [read] => resolver-dnssec-config*
route53resolver:GetResolverEndpoint [read] => resolver-endpoint*
route53resolver:GetResolverQueryLogConfig [read] => resolver-query-log-config*
route53resolver:GetResolverQueryLogConfigAssociation [read] => resolver-query-log-config*
route53resolver:GetResolverQueryLogConfigPolicy [read] => resolver-query-log-config*
route53resolver:GetResolverRule [read] => resolver-rule*
route53resolver:GetResolverRuleAssociation [read] => resolver-rule*
route53resolver:GetResolverRulePolicy [read] => resolver-rule*
route53resolver:ImportFirewallDomains [write] => firewall-domain-list*
route53resolver:ListFirewallConfigs [list] => firewall-config*
route53resolver:ListFirewallDomainLists [list] => *
route53resolver:ListFirewallDomains [list] => firewall-domain-list*
route53resolver:ListFirewallRuleGroupAssociations [list] => *
route53resolver:ListFirewallRuleGroups [list] => *
route53resolver:ListFirewallRules [list] => firewall-rule-group*
route53resolver:ListResolverConfigs [list] => resolver-config*
route53resolver:ListResolverDnssecConfigs [list] => resolver-dnssec-config*
route53resolver:ListResolverEndpointIpAddresses [list] => resolver-endpoint*
route53resolver:ListResolverEndpoints [list] => *
route53resolver:ListResolverQueryLogConfigAssociations [list] => resolver-query-log-config*
route53resolver:ListResolverQueryLogConfigs [list] => resolver-query-log-config*
route53resolver:ListResolverRuleAssociations [list] => *
route53resolver:ListResolverRules [list] => *
route53resolver:ListTagsForResource [read] => firewall-domain-list,firewall-rule-group,firewall-rule-group-association,resolver-endpoint,resolver-query-log-config,resolver-rule
route53resolver:PutFirewallRuleGroupPolicy [permissions-management] => firewall-rule-group*
route53resolver:PutResolverQueryLogConfigPolicy [permissions-management] => resolver-query-log-config*
route53resolver:PutResolverRulePolicy [permissions-management] => resolver-rule*
route53resolver:TagResource [tagging] => *,firewall-config,firewall-domain-list,firewall-rule-group,firewall-rule-group-association,resolver-dnssec-config,resolver-endpoint,resolver-query-log-config,resolver-rule
route53resolver:UntagResource [tagging] => *,firewall-config,firewall-domain-list,firewall-rule-group,firewall-rule-group-association,resolver-dnssec-config,resolver-endpoint,resolver-query-log-config,resolver-rule
route53resolver:UpdateFirewallConfig [write] => firewall-config*
route53resolver:UpdateFirewallDomains [write] => firewall-domain-list*
route53resolver:UpdateFirewallRule [write] => firewall-rule-group*
route53resolver:UpdateFirewallRuleGroupAssociation [write] => firewall-rule-group-association*
route53resolver:UpdateResolverConfig [write] => resolver-config*
route53resolver:UpdateResolverDnssecConfig [write] => resolver-dnssec-config*
route53resolver:UpdateResolverEndpoint [write] => resolver-endpoint*
route53resolver:UpdateResolverRule [write] => resolver-rule*
rum:CreateAppMonitor [write] => *,AppMonitorResource*
rum:DeleteAppMonitor [write] => AppMonitorResource*
rum:GetAppMonitor [read] => AppMonitorResource*
rum:GetAppMonitorData [read] => AppMonitorResource*
rum:ListAppMonitors [list] => *
rum:ListTagsForResource [read] => *
rum:PutRumEvents [write] => AppMonitorResource*
rum:TagResource [tagging] => *
rum:UntagResource [tagging] => *
rum:UpdateAppMonitor [write] => AppMonitorResource*
s3:AbortMultipartUpload [write] => *,object*
s3:BypassGovernanceRetention [permissions-management] => *,object*
s3:CreateAccessPoint [write] => *,accesspoint*
s3:CreateAccessPointForObjectLambda [write] => *,objectlambdaaccesspoint*
s3:CreateBucket [write] => *,bucket*
s3:CreateJob [write] => *
s3:CreateMultiRegionAccessPoint [write] => *,multiregionaccesspoint*
s3:DeleteAccessPoint [write] => *,accesspoint*
s3:DeleteAccessPointForObjectLambda [write] => *,objectlambdaaccesspoint*
s3:DeleteAccessPointPolicy [permissions-management] => *,accesspoint*
s3:DeleteAccessPointPolicyForObjectLambda [permissions-management] => *,objectlambdaaccesspoint*
s3:DeleteBucket [write] => *,bucket*
s3:DeleteBucketPolicy [permissions-management] => *,bucket*
s3:DeleteBucketWebsite [write] => *,bucket*
s3:DeleteJobTagging [tagging] => *,job*
s3:DeleteMultiRegionAccessPoint [write] => *,multiregionaccesspoint*
s3:DeleteObject [write] => *,object*
s3:DeleteObjectTagging [tagging] => *,object*
s3:DeleteObjectVersion [write] => *,object*
s3:DeleteObjectVersionTagging [tagging] => *,object*
s3:DeleteStorageLensConfiguration [write] => *,storagelensconfiguration*
s3:DeleteStorageLensConfigurationTagging [tagging] => *,storagelensconfiguration*
s3:DescribeJob [read] => *,job*
s3:DescribeMultiRegionAccessPointOperation [read] => *,multiregionaccesspointrequestarn*
s3:GetAccelerateConfiguration [read] => *,bucket*
s3:GetAccessPoint [read] => *
s3:GetAccessPointConfigurationForObjectLambda [read] => *,objectlambdaaccesspoint*
s3:GetAccessPointForObjectLambda [read] => *,objectlambdaaccesspoint*
s3:GetAccessPointPolicy [read] => *,accesspoint*
s3:GetAccessPointPolicyForObjectLambda [read] => *,objectlambdaaccesspoint*
s3:GetAccessPointPolicyStatus [read] => *,accesspoint*
s3:GetAccessPointPolicyStatusForObjectLambda [read] => *,objectlambdaaccesspoint*
s3:GetAccountPublicAccessBlock [read] => *
s3:GetAnalyticsConfiguration [read] => *,bucket*
s3:GetBucketAcl [read] => *,bucket*
s3:GetBucketCORS [read] => *,bucket*
s3:GetBucketLocation [read] => *,bucket*
s3:GetBucketLogging [read] => *,bucket*
s3:GetBucketNotification [read] => *,bucket*
s3:GetBucketObjectLockConfiguration [read] => *,bucket*
s3:GetBucketOwnershipControls [read] => *,bucket*
s3:GetBucketPolicy [read] => *,bucket*
s3:GetBucketPolicyStatus [read] => *,bucket*
s3:GetBucketPublicAccessBlock [read] => *,bucket*
s3:GetBucketRequestPayment [read] => *,bucket*
s3:GetBucketTagging [read] => *,bucket*
s3:GetBucketVersioning [read] => *,bucket*
s3:GetBucketWebsite [read] => *,bucket*
s3:GetEncryptionConfiguration [read] => *,bucket*
s3:GetIntelligentTieringConfiguration [read] => *,bucket*
s3:GetInventoryConfiguration [read] => *,bucket*
s3:GetJobTagging [read] => *,job*
s3:GetLifecycleConfiguration [read] => *,bucket*
s3:GetMetricsConfiguration [read] => *,bucket*
s3:GetMultiRegionAccessPoint [read] => *,multiregionaccesspoint*
s3:GetMultiRegionAccessPointPolicy [read] => *,multiregionaccesspoint*
s3:GetMultiRegionAccessPointPolicyStatus [read] => *,multiregionaccesspoint*
s3:GetObject [read] => *,object*
s3:GetObjectAcl [read] => *,object*
s3:GetObjectAttributes [read] => *,object*
s3:GetObjectLegalHold [read] => *,object*
s3:GetObjectRetention [read] => *,object*
s3:GetObjectTagging [read] => *,object*
s3:GetObjectTorrent [read] => *,object*
s3:GetObjectVersion [read] => *,object*
s3:GetObjectVersionAcl [read] => *,object*
s3:GetObjectVersionAttributes [read] => *,object*
s3:GetObjectVersionForReplication [read] => *,object*
s3:GetObjectVersionTagging [read] => *,object*
s3:GetObjectVersionTorrent [read] => *,object*
s3:GetReplicationConfiguration [read] => *,bucket*
s3:GetStorageLensConfiguration [read] => *,storagelensconfiguration*
s3:GetStorageLensConfigurationTagging [read] => *,storagelensconfiguration*
s3:GetStorageLensDashboard [read] => *,storagelensconfiguration*
s3:InitiateReplication [write] => *,object*
s3:ListAccessPoints [list] => *
s3:ListAccessPointsForObjectLambda [list] => *
s3:ListAllMyBuckets [list] => *
s3:ListBucket [list] => *,bucket*
s3:ListBucketMultipartUploads [list] => *,bucket*
s3:ListBucketVersions [list] => *,bucket*
s3:ListJobs [list] => *
s3:ListMultiRegionAccessPoints [list] => *
s3:ListMultipartUploadParts [list] => *,object*
s3:ListStorageLensConfigurations [list] => *
s3:ObjectOwnerOverrideToBucketOwner [permissions-management] => *,object*
s3:PutAccelerateConfiguration [write] => *,bucket*
s3:PutAccessPointConfigurationForObjectLambda [write] => *,objectlambdaaccesspoint*
s3:PutAccessPointPolicy [permissions-management] => *,accesspoint*
s3:PutAccessPointPolicyForObjectLambda [permissions-management] => *,objectlambdaaccesspoint*
s3:PutAccessPointPublicAccessBlock [permissions-management] => *
s3:PutAccountPublicAccessBlock [permissions-management] => *
s3:PutAnalyticsConfiguration [write] => *,bucket*
s3:PutBucketAcl [permissions-management] => *,bucket*
s3:PutBucketCORS [write] => *,bucket*
s3:PutBucketLogging [write] => *,bucket*
s3:PutBucketNotification [write] => *,bucket*
s3:PutBucketObjectLockConfiguration [write] => *,bucket*
s3:PutBucketOwnershipControls [write] => *,bucket*
s3:PutBucketPolicy [permissions-management] => *,bucket*
s3:PutBucketPublicAccessBlock [permissions-management] => *,bucket*
s3:PutBucketRequestPayment [write] => *,bucket*
s3:PutBucketTagging [tagging] => *,bucket*
s3:PutBucketVersioning [write] => *,bucket*
s3:PutBucketWebsite [write] => *,bucket*
s3:PutEncryptionConfiguration [write] => *,bucket*
s3:PutIntelligentTieringConfiguration [write] => *,bucket*
s3:PutInventoryConfiguration [write] => *,bucket*
s3:PutJobTagging [tagging] => *,job*
s3:PutLifecycleConfiguration [write] => *,bucket*
s3:PutMetricsConfiguration [write] => *,bucket*
s3:PutMultiRegionAccessPointPolicy [permissions-management] => *,multiregionaccesspoint*
s3:PutObject [write] => *,object*
s3:PutObjectAcl [permissions-management] => *,object*
s3:PutObjectLegalHold [write] => *,object*
s3:PutObjectRetention [write] => *,object*
s3:PutObjectTagging [tagging] => *,object*
s3:PutObjectVersionAcl [permissions-management] => *,object*
s3:PutObjectVersionTagging [tagging] => *,object*
s3:PutReplicationConfiguration [write] => *,bucket*
s3:PutStorageLensConfiguration [write] => *
s3:PutStorageLensConfigurationTagging [tagging] => *,storagelensconfiguration*
s3:ReplicateDelete [write] => *,object*
s3:ReplicateObject [write] => *,object*
s3:ReplicateTags [tagging] => *,object*
s3:RestoreObject [write] => *,object*
s3:UpdateJobPriority [write] => *,job*
s3:UpdateJobStatus [write] => *,job*
s3-object-lambda:AbortMultipartUpload [write] => *,objectlambdaaccesspoint*
s3-object-lambda:DeleteObject [write] => *,objectlambdaaccesspoint*
s3-object-lambda:DeleteObjectTagging [tagging] => *,objectlambdaaccesspoint*
s3-object-lambda:DeleteObjectVersion [write] => *,objectlambdaaccesspoint*
s3-object-lambda:DeleteObjectVersionTagging [tagging] => *,objectlambdaaccesspoint*
s3-object-lambda:GetObject [read] => *,objectlambdaaccesspoint*
s3-object-lambda:GetObjectAcl [read] => *,objectlambdaaccesspoint*
s3-object-lambda:GetObjectLegalHold [read] => *,objectlambdaaccesspoint*
s3-object-lambda:GetObjectRetention [read] => *,objectlambdaaccesspoint*
s3-object-lambda:GetObjectTagging [read] => *,objectlambdaaccesspoint*
s3-object-lambda:GetObjectVersion [read] => *,objectlambdaaccesspoint*
s3-object-lambda:GetObjectVersionAcl [read] => *,objectlambdaaccesspoint*
s3-object-lambda:GetObjectVersionTagging [read] => *,objectlambdaaccesspoint*
s3-object-lambda:ListBucket [list] => *,objectlambdaaccesspoint*
s3-object-lambda:ListBucketMultipartUploads [list] => *,objectlambdaaccesspoint*
s3-object-lambda:ListBucketVersions [list] => *,objectlambdaaccesspoint*
s3-object-lambda:ListMultipartUploadParts [list] => *,objectlambdaaccesspoint*
s3-object-lambda:PutObject [write] => *,objectlambdaaccesspoint*
s3-object-lambda:PutObjectAcl [permissions-management] => *,objectlambdaaccesspoint*
s3-object-lambda:PutObjectLegalHold [write] => *,objectlambdaaccesspoint*
s3-object-lambda:PutObjectRetention [write] => *,objectlambdaaccesspoint*
s3-object-lambda:PutObjectTagging [tagging] => *,objectlambdaaccesspoint*
s3-object-lambda:PutObjectVersionAcl [permissions-management] => *,objectlambdaaccesspoint*
s3-object-lambda:PutObjectVersionTagging [tagging] => *,objectlambdaaccesspoint*
s3-object-lambda:RestoreObject [write] => *,objectlambdaaccesspoint*
s3-object-lambda:WriteGetObjectResponse [write] => *,objectlambdaaccesspoint*
s3-outposts:AbortMultipartUpload [write] => *,object*
s3-outposts:CreateAccessPoint [write] => *,accesspoint*
s3-outposts:CreateBucket [write] => *,bucket*
s3-outposts:CreateEndpoint [write] => endpoint*
s3-outposts:DeleteAccessPoint [write] => *,accesspoint*
s3-outposts:DeleteAccessPointPolicy [permissions-management] => *,accesspoint*
s3-outposts:DeleteBucket [write] => *,bucket*
s3-outposts:DeleteBucketPolicy [permissions-management] => *,bucket*
s3-outposts:DeleteEndpoint [write] => endpoint*
s3-outposts:DeleteObject [write] => *,object*
s3-outposts:DeleteObjectTagging [tagging] => *,object*
s3-outposts:GetAccessPoint [read] => *
s3-outposts:GetAccessPointPolicy [read] => *,accesspoint*
s3-outposts:GetBucket [read] => *,bucket*
s3-outposts:GetBucketPolicy [read] => *,bucket*
s3-outposts:GetBucketTagging [read] => *,bucket*
s3-outposts:GetLifecycleConfiguration [read] => *,bucket*
s3-outposts:GetObject [read] => *,object*
s3-outposts:GetObjectTagging [read] => *,object*
s3-outposts:ListAccessPoints [list] => *
s3-outposts:ListBucket [list] => *,accesspoint*,bucket*
s3-outposts:ListBucketMultipartUploads [list] => *,accesspoint*,bucket*
s3-outposts:ListEndpoints [list] => *
s3-outposts:ListMultipartUploadParts [list] => *,object*
s3-outposts:ListRegionalBuckets [list] => *
s3-outposts:ListSharedEndpoints [list] => *
s3-outposts:PutAccessPointPolicy [permissions-management] => *,accesspoint*
s3-outposts:PutBucketPolicy [permissions-management] => *,bucket*
s3-outposts:PutBucketTagging [tagging] => *,bucket*
s3-outposts:PutLifecycleConfiguration [write] => *,bucket*
s3-outposts:PutObject [write] => *,object*
s3-outposts:PutObjectAcl [permissions-management] => *,object*
s3-outposts:PutObjectTagging [tagging] => *,object*
sagemaker:AddAssociation [write] => action*,artifact*,context*,experiment*,experiment-trial-component*
sagemaker:AddTags [tagging] => *,action,algorithm,app,app-image-config,artifact,automl-job,code-repository,compilation-job,context,data-quality-job-definition,device,device-fleet,domain,edge-deployment-plan,edge-packaging-job,endpoint,endpoint-config,experiment,experiment-trial,experiment-trial-component,feature-group,flow-definition,human-task-ui,hyper-parameter-tuning-job,image,inference-recommendations-job,labeling-job,model,model-bias-job-definition,model-explainability-job-definition,model-package,model-package-group,model-quality-job-definition,monitoring-schedule,notebook-instance,pipeline,processing-job,project,studio-lifecycle-config,training-job,transform-job,user-profile,workteam
sagemaker:AssociateTrialComponent [write] => experiment-trial*,experiment-trial-component*
sagemaker:BatchDescribeModelPackage [read] => model-package*
sagemaker:BatchGetMetrics [read] => training-job*
sagemaker:BatchGetRecord [read] => feature-group*
sagemaker:BatchPutMetrics [write] => training-job*
sagemaker:CreateAction [write] => *,action*
sagemaker:CreateAlgorithm [write] => *,algorithm*
sagemaker:CreateApp [write] => *,app*
sagemaker:CreateAppImageConfig [write] => *,app-image-config*
sagemaker:CreateArtifact [write] => *,artifact*
sagemaker:CreateAutoMLJob [write] => *,automl-job*
sagemaker:CreateCodeRepository [write] => *,code-repository*
sagemaker:CreateCompilationJob [write] => *,compilation-job*
sagemaker:CreateContext [write] => *,context*
sagemaker:CreateDataQualityJobDefinition [write] => *,data-quality-job-definition*
sagemaker:CreateDeviceFleet [write] => *,device-fleet*
sagemaker:CreateDomain [write] => *,domain*
sagemaker:CreateEdgeDeploymentPlan [write] => *,edge-deployment-plan*
sagemaker:CreateEdgeDeploymentStage [write] => *,edge-deployment-plan*
sagemaker:CreateEdgePackagingJob [write] => *,edge-packaging-job*
sagemaker:CreateEndpoint [write] => *,endpoint*
sagemaker:CreateEndpointConfig [write] => *,endpoint-config*
sagemaker:CreateExperiment [write] => *,experiment*
sagemaker:CreateFeatureGroup [write] => *,feature-group*
sagemaker:CreateFlowDefinition [write] => *,flow-definition*
sagemaker:CreateHumanTaskUi [write] => *,human-task-ui*
sagemaker:CreateHyperParameterTuningJob [write] => *,hyper-parameter-tuning-job*
sagemaker:CreateImage [write] => *,image*
sagemaker:CreateImageVersion [write] => image*
sagemaker:CreateInferenceRecommendationsJob [write] => *,inference-recommendations-job*
sagemaker:CreateLabelingJob [write] => *,labeling-job*
sagemaker:CreateLineageGroupPolicy [write] => *
sagemaker:CreateModel [write] => *,model*
sagemaker:CreateModelBiasJobDefinition [write] => *,model-bias-job-definition*
sagemaker:CreateModelExplainabilityJobDefinition [write] => *,model-explainability-job-definition*
sagemaker:CreateModelPackage [write] => *,model-package,model-package-group
sagemaker:CreateModelPackageGroup [write] => *,model-package-group*
sagemaker:CreateModelQualityJobDefinition [write] => *,model-quality-job-definition*
sagemaker:CreateMonitoringSchedule [write] => *,monitoring-schedule*
sagemaker:CreateNotebookInstance [write] => *,notebook-instance*
sagemaker:CreateNotebookInstanceLifecycleConfig [write] => notebook-instance-lifecycle-config*
sagemaker:CreatePipeline [write] => *,pipeline*
sagemaker:CreatePresignedDomainUrl [write] => user-profile*
sagemaker:CreatePresignedNotebookInstanceUrl [write] => notebook-instance*
sagemaker:CreateProcessingJob [write] => *,processing-job*
sagemaker:CreateProject [write] => *,project*
sagemaker:CreateStudioLifecycleConfig [write] => *,studio-lifecycle-config*
sagemaker:CreateTrainingJob [write] => *,training-job*
sagemaker:CreateTransformJob [write] => *,transform-job*
sagemaker:CreateTrial [write] => *,experiment-trial*
sagemaker:CreateTrialComponent [write] => *,experiment-trial-component*
sagemaker:CreateUserProfile [write] => *,user-profile*
sagemaker:CreateWorkforce [write] => *,workforce*
sagemaker:CreateWorkteam [write] => *,workteam*
sagemaker:DeleteAction [write] => action*
sagemaker:DeleteAlgorithm [write] => algorithm*
sagemaker:DeleteApp [write] => app*
sagemaker:DeleteAppImageConfig [write] => app-image-config*
sagemaker:DeleteArtifact [write] => artifact*
sagemaker:DeleteAssociation [write] => action*,artifact*,context*,experiment*,experiment-trial-component*
sagemaker:DeleteCodeRepository [write] => code-repository*
sagemaker:DeleteContext [write] => context*
sagemaker:DeleteDataQualityJobDefinition [write] => data-quality-job-definition*
sagemaker:DeleteDeviceFleet [write] => device-fleet*
sagemaker:DeleteDomain [write] => domain*
sagemaker:DeleteEdgeDeploymentPlan [write] => edge-deployment-plan*
sagemaker:DeleteEdgeDeploymentStage [write] => edge-deployment-plan*
sagemaker:DeleteEndpoint [write] => endpoint*
sagemaker:DeleteEndpointConfig [write] => endpoint-config*
sagemaker:DeleteExperiment [write] => experiment*
sagemaker:DeleteFeatureGroup [write] => *,feature-group*
sagemaker:DeleteFlowDefinition [write] => flow-definition*
sagemaker:DeleteHumanLoop [write] => human-loop*
sagemaker:DeleteHumanTaskUi [write] => human-task-ui*
sagemaker:DeleteImage [write] => image*
sagemaker:DeleteImageVersion [write] => image-version*
sagemaker:DeleteLineageGroupPolicy [write] => *
sagemaker:DeleteModel [write] => model*
sagemaker:DeleteModelBiasJobDefinition [write] => model-bias-job-definition*
sagemaker:DeleteModelExplainabilityJobDefinition [write] => model-explainability-job-definition*
sagemaker:DeleteModelPackage [write] => model-package*
sagemaker:DeleteModelPackageGroup [write] => model-package-group*
sagemaker:DeleteModelPackageGroupPolicy [write] => model-package-group*
sagemaker:DeleteModelQualityJobDefinition [write] => model-quality-job-definition*
sagemaker:DeleteMonitoringSchedule [write] => monitoring-schedule*
sagemaker:DeleteNotebookInstance [write] => notebook-instance*
sagemaker:DeleteNotebookInstanceLifecycleConfig [write] => notebook-instance-lifecycle-config*
sagemaker:DeletePipeline [write] => pipeline*
sagemaker:DeleteProject [write] => project*
sagemaker:DeleteRecord [write] => feature-group*
sagemaker:DeleteStudioLifecycleConfig [write] => studio-lifecycle-config*
sagemaker:DeleteTags [tagging] => *,action,algorithm,app,app-image-config,artifact,automl-job,code-repository,compilation-job,context,data-quality-job-definition,device,device-fleet,domain,edge-deployment-plan,edge-packaging-job,endpoint,endpoint-config,experiment,experiment-trial,experiment-trial-component,feature-group,flow-definition,human-task-ui,hyper-parameter-tuning-job,image,inference-recommendations-job,labeling-job,model,model-bias-job-definition,model-explainability-job-definition,model-package,model-package-group,model-quality-job-definition,monitoring-schedule,notebook-instance,pipeline,processing-job,project,studio-lifecycle-config,training-job,transform-job,user-profile,workteam
sagemaker:DeleteTrial [write] => experiment-trial*
sagemaker:DeleteTrialComponent [write] => experiment-trial-component*
sagemaker:DeleteUserProfile [write] => user-profile*
sagemaker:DeleteWorkforce [write] => workforce*
sagemaker:DeleteWorkteam [write] => workteam*
sagemaker:DeregisterDevices [write] => device*
sagemaker:DescribeAction [read] => action*
sagemaker:DescribeAlgorithm [read] => algorithm*
sagemaker:DescribeApp [read] => app*
sagemaker:DescribeAppImageConfig [read] => app-image-config*
sagemaker:DescribeArtifact [read] => artifact*
sagemaker:DescribeAutoMLJob [read] => automl-job*
sagemaker:DescribeCodeRepository [read] => code-repository*
sagemaker:DescribeCompilationJob [read] => compilation-job*
sagemaker:DescribeContext [read] => context*
sagemaker:DescribeDataQualityJobDefinition [read] => data-quality-job-definition*
sagemaker:DescribeDevice [read] => device*
sagemaker:DescribeDeviceFleet [read] => device-fleet*
sagemaker:DescribeDomain [read] => domain*
sagemaker:DescribeEdgeDeploymentPlan [read] => edge-deployment-plan*
sagemaker:DescribeEdgePackagingJob [read] => edge-packaging-job*
sagemaker:DescribeEndpoint [read] => endpoint*
sagemaker:DescribeEndpointConfig [read] => endpoint-config*
sagemaker:DescribeExperiment [read] => experiment*
sagemaker:DescribeFeatureGroup [read] => feature-group*
sagemaker:DescribeFeatureMetadata [read] => feature-group*
sagemaker:DescribeFlowDefinition [read] => flow-definition*
sagemaker:DescribeHumanLoop [read] => human-loop*
sagemaker:DescribeHumanTaskUi [read] => human-task-ui*
sagemaker:DescribeHyperParameterTuningJob [read] => hyper-parameter-tuning-job*
sagemaker:DescribeImage [read] => image*
sagemaker:DescribeImageVersion [read] => image-version*
sagemaker:DescribeInferenceRecommendationsJob [read] => inference-recommendations-job*
sagemaker:DescribeLabelingJob [read] => labeling-job*
sagemaker:DescribeLineageGroup [read] => *
sagemaker:DescribeModel [read] => model*
sagemaker:DescribeModelBiasJobDefinition [read] => model-bias-job-definition*
sagemaker:DescribeModelExplainabilityJobDefinition [read] => model-explainability-job-definition*
sagemaker:DescribeModelPackage [read] => model-package*
sagemaker:DescribeModelPackageGroup [read] => model-package-group*
sagemaker:DescribeModelQualityJobDefinition [read] => model-quality-job-definition*
sagemaker:DescribeMonitoringSchedule [read] => monitoring-schedule*
sagemaker:DescribeNotebookInstance [read] => notebook-instance*
sagemaker:DescribeNotebookInstanceLifecycleConfig [read] => notebook-instance-lifecycle-config*
sagemaker:DescribePipeline [read] => pipeline*
sagemaker:DescribePipelineDefinitionForExecution [read] => pipeline-execution*
sagemaker:DescribePipelineExecution [read] => pipeline-execution*
sagemaker:DescribeProcessingJob [read] => processing-job*
sagemaker:DescribeProject [read] => project*
sagemaker:DescribeStudioLifecycleConfig [read] => studio-lifecycle-config*
sagemaker:DescribeSubscribedWorkteam [read] => workteam*
sagemaker:DescribeTrainingJob [read] => training-job*
sagemaker:DescribeTransformJob [read] => transform-job*
sagemaker:DescribeTrial [read] => experiment-trial*
sagemaker:DescribeTrialComponent [read] => experiment-trial-component*
sagemaker:DescribeUserProfile [read] => user-profile*
sagemaker:DescribeWorkforce [read] => workforce*
sagemaker:DescribeWorkteam [read] => workteam*
sagemaker:DisableSagemakerServicecatalogPortfolio [write] => *
sagemaker:DisassociateTrialComponent [write] => experiment-trial*,experiment-trial-component*,processing-job*
sagemaker:EnableSagemakerServicecatalogPortfolio [write] => *
sagemaker:GetDeviceFleetReport [read] => device-fleet*
sagemaker:GetDeviceRegistration [read] => device*
sagemaker:GetLineageGroupPolicy [read] => *
sagemaker:GetModelPackageGroupPolicy [read] => model-package-group*
sagemaker:GetRecord [read] => feature-group*
sagemaker:GetSagemakerServicecatalogPortfolioStatus [read] => *
sagemaker:GetSearchSuggestions [read] => *
sagemaker:InvokeEndpoint [read] => *,endpoint*
sagemaker:InvokeEndpointAsync [read] => endpoint*
sagemaker:ListActions [list] => *
sagemaker:ListAlgorithms [list] => *
sagemaker:ListAppImageConfigs [list] => *
sagemaker:ListApps [list] => *
sagemaker:ListArtifacts [list] => *
sagemaker:ListAssociations [list] => *
sagemaker:ListAutoMLJobs [list] => *
sagemaker:ListCandidatesForAutoMLJob [list] => *
sagemaker:ListCodeRepositories [list] => *
sagemaker:ListCompilationJobs [list] => *
sagemaker:ListContexts [list] => *
sagemaker:ListDataQualityJobDefinitions [list] => *
sagemaker:ListDeviceFleets [list] => *
sagemaker:ListDevices [list] => *
sagemaker:ListDomains [list] => *
sagemaker:ListEdgeDeploymentPlans [list] => *
sagemaker:ListEdgePackagingJobs [list] => *
sagemaker:ListEndpointConfigs [list] => *
sagemaker:ListEndpoints [list] => *
sagemaker:ListExperiments [list] => *
sagemaker:ListFeatureGroups [list] => *
sagemaker:ListFlowDefinitions [list] => *
sagemaker:ListHumanLoops [list] => *
sagemaker:ListHumanTaskUis [list] => *
sagemaker:ListHyperParameterTuningJobs [list] => *
sagemaker:ListImageVersions [list] => image*
sagemaker:ListImages [list] => *
sagemaker:ListInferenceRecommendationsJobs [list] => *
sagemaker:ListLabelingJobs [list] => *
sagemaker:ListLabelingJobsForWorkteam [list] => workteam*
sagemaker:ListLineageGroups [list] => *
sagemaker:ListModelBiasJobDefinitions [list] => *
sagemaker:ListModelExplainabilityJobDefinitions [list] => *
sagemaker:ListModelMetadata [list] => *
sagemaker:ListModelPackageGroups [list] => *
sagemaker:ListModelPackages [list] => model-package-group
sagemaker:ListModelQualityJobDefinitions [list] => *
sagemaker:ListModels [list] => *
sagemaker:ListMonitoringExecutions [list] => *
sagemaker:ListMonitoringSchedules [list] => *
sagemaker:ListNotebookInstanceLifecycleConfigs [list] => *
sagemaker:ListNotebookInstances [list] => *
sagemaker:ListPipelineExecutionSteps [list] => pipeline-execution*
sagemaker:ListPipelineExecutions [list] => pipeline*
sagemaker:ListPipelineParametersForExecution [list] => pipeline-execution*
sagemaker:ListPipelines [list] => *
sagemaker:ListProcessingJobs [list] => *
sagemaker:ListProjects [list] => *
sagemaker:ListStageDevices [list] => *
sagemaker:ListStudioLifecycleConfigs [list] => *
sagemaker:ListSubscribedWorkteams [list] => *
sagemaker:ListTags [list] => action,algorithm,app,app-image-config,artifact,automl-job,code-repository,compilation-job,context,data-quality-job-definition,device,device-fleet,domain,edge-deployment-plan,edge-packaging-job,endpoint,endpoint-config,experiment,experiment-trial,experiment-trial-component,feature-group,flow-definition,human-task-ui,hyper-parameter-tuning-job,image,inference-recommendations-job,labeling-job,model,model-bias-job-definition,model-explainability-job-definition,model-package,model-package-group,model-quality-job-definition,monitoring-schedule,notebook-instance,pipeline,processing-job,project,studio-lifecycle-config,training-job,transform-job,user-profile,workteam
sagemaker:ListTrainingJobs [list] => *
sagemaker:ListTrainingJobsForHyperParameterTuningJob [list] => hyper-parameter-tuning-job*
sagemaker:ListTransformJobs [list] => *
sagemaker:ListTrialComponents [list] => *
sagemaker:ListTrials [list] => *
sagemaker:ListUserProfiles [list] => *
sagemaker:ListWorkforces [list] => *
sagemaker:ListWorkteams [list] => *
sagemaker:PutLineageGroupPolicy [write] => *
sagemaker:PutModelPackageGroupPolicy [write] => model-package-group*
sagemaker:PutRecord [write] => feature-group*
sagemaker:QueryLineage [list] => *
sagemaker:RegisterDevices [write] => *,device*
sagemaker:RenderUiTemplate [read] => *
sagemaker:RetryPipelineExecution [write] => pipeline-execution*
sagemaker:Search [read] => *
sagemaker:SendHeartbeat [write] => device*
sagemaker:SendPipelineExecutionStepFailure [write] => pipeline-execution*
sagemaker:SendPipelineExecutionStepSuccess [write] => pipeline-execution*
sagemaker:StartEdgeDeploymentStage [write] => edge-deployment-plan*
sagemaker:StartHumanLoop [write] => flow-definition*
sagemaker:StartMonitoringSchedule [write] => monitoring-schedule*
sagemaker:StartNotebookInstance [write] => notebook-instance*
sagemaker:StartPipelineExecution [write] => pipeline*
sagemaker:StopAutoMLJob [write] => automl-job*
sagemaker:StopCompilationJob [write] => compilation-job*
sagemaker:StopEdgeDeploymentStage [write] => edge-deployment-plan*
sagemaker:StopEdgePackagingJob [write] => edge-packaging-job*
sagemaker:StopHumanLoop [write] => human-loop*
sagemaker:StopHyperParameterTuningJob [write] => hyper-parameter-tuning-job*
sagemaker:StopInferenceRecommendationsJob [write] => inference-recommendations-job*
sagemaker:StopLabelingJob [write] => labeling-job*
sagemaker:StopMonitoringSchedule [write] => monitoring-schedule*
sagemaker:StopNotebookInstance [write] => notebook-instance*
sagemaker:StopPipelineExecution [write] => pipeline-execution*
sagemaker:StopProcessingJob [write] => processing-job*
sagemaker:StopTrainingJob [write] => training-job*
sagemaker:StopTransformJob [write] => transform-job*
sagemaker:UpdateAction [write] => action*
sagemaker:UpdateAppImageConfig [write] => app-image-config*
sagemaker:UpdateArtifact [write] => artifact*
sagemaker:UpdateCodeRepository [write] => code-repository*
sagemaker:UpdateContext [write] => context*
sagemaker:UpdateDeviceFleet [write] => device-fleet*
sagemaker:UpdateDevices [write] => device*
sagemaker:UpdateDomain [write] => *,domain*
sagemaker:UpdateEndpoint [write] => endpoint*
sagemaker:UpdateEndpointWeightsAndCapacities [write] => endpoint*
sagemaker:UpdateExperiment [write] => experiment*
sagemaker:UpdateFeatureGroup [write] => feature-group*
sagemaker:UpdateFeatureMetadata [write] => feature-group*
sagemaker:UpdateImage [write] => image*
sagemaker:UpdateModelPackage [write] => *,model-package*
sagemaker:UpdateMonitoringSchedule [write] => *,monitoring-schedule*
sagemaker:UpdateNotebookInstance [write] => *,notebook-instance*
sagemaker:UpdateNotebookInstanceLifecycleConfig [write] => notebook-instance-lifecycle-config*
sagemaker:UpdatePipeline [write] => pipeline*
sagemaker:UpdatePipelineExecution [write] => pipeline-execution*
sagemaker:UpdateProject [write] => *,project*
sagemaker:UpdateTrainingJob [write] => *,training-job*
sagemaker:UpdateTrial [write] => experiment-trial*
sagemaker:UpdateTrialComponent [write] => experiment-trial-component*
sagemaker:UpdateUserProfile [write] => *,user-profile*
sagemaker:UpdateWorkforce [write] => workforce*
sagemaker:UpdateWorkteam [write] => workteam*
sagemaker-groundtruth-synthetic:CreateProject [write] => *
sagemaker-groundtruth-synthetic:DeleteProject [write] => *
sagemaker-groundtruth-synthetic:GetBatch [read] => *
sagemaker-groundtruth-synthetic:GetProject [read] => *
sagemaker-groundtruth-synthetic:ListBatchDataTransfers [list] => *
sagemaker-groundtruth-synthetic:ListBatchSummaries [list] => *
sagemaker-groundtruth-synthetic:ListProjectDataTransfers [list] => *
sagemaker-groundtruth-synthetic:ListProjectSummaries [list] => *
sagemaker-groundtruth-synthetic:StartBatchDataTransfer [write] => *
sagemaker-groundtruth-synthetic:StartProjectDataTransfer [write] => *
sagemaker-groundtruth-synthetic:UpdateBatch [write] => *
savingsplans:CreateSavingsPlan [write] => *
savingsplans:DeleteQueuedSavingsPlan [write] => *,savingsplan*
savingsplans:DescribeSavingsPlanRates [read] => *,savingsplan*
savingsplans:DescribeSavingsPlans [read] => *,savingsplan*
savingsplans:DescribeSavingsPlansOfferingRates [read] => *
savingsplans:DescribeSavingsPlansOfferings [read] => *
savingsplans:ListTagsForResource [list] => savingsplan*
savingsplans:TagResource [tagging] => *,savingsplan*
savingsplans:UntagResource [tagging] => *,savingsplan*
schemas:CreateDiscoverer [write] => *,discoverer*
schemas:CreateRegistry [write] => *,registry*
schemas:CreateSchema [write] => *,schema*
schemas:DeleteDiscoverer [write] => discoverer*
schemas:DeleteRegistry [write] => registry*
schemas:DeleteResourcePolicy [write] => registry*
schemas:DeleteSchema [write] => schema*
schemas:DeleteSchemaVersion [write] => schema*
schemas:DescribeCodeBinding [read] => schema*
schemas:DescribeDiscoverer [read] => discoverer*
schemas:DescribeRegistry [read] => registry*
schemas:DescribeSchema [read] => schema*
schemas:ExportSchema [read] => registry*,schema*
schemas:GetCodeBindingSource [read] => schema*
schemas:GetDiscoveredSchema [read] => *
schemas:GetResourcePolicy [read] => registry*
schemas:ListDiscoverers [list] => discoverer*
schemas:ListRegistries [list] => registry*
schemas:ListSchemaVersions [list] => schema*
schemas:ListSchemas [list] => schema*
schemas:ListTagsForResource [read] => discoverer,registry,schema
schemas:PutCodeBinding [write] => schema*
schemas:PutResourcePolicy [write] => registry*
schemas:SearchSchemas [list] => schema*
schemas:StartDiscoverer [write] => discoverer*
schemas:StopDiscoverer [write] => discoverer*
schemas:TagResource [tagging] => *,discoverer,registry,schema
schemas:UntagResource [tagging] => *,discoverer,registry,schema
schemas:UpdateDiscoverer [write] => discoverer*
schemas:UpdateRegistry [write] => registry*
schemas:UpdateSchema [write] => schema*
sdb:BatchDeleteAttributes [write] => domain*
sdb:BatchPutAttributes [write] => domain*
sdb:CreateDomain [write] => domain*
sdb:DeleteAttributes [write] => domain*
sdb:DeleteDomain [write] => domain*
sdb:DomainMetadata [read] => domain*
sdb:GetAttributes [read] => domain*
sdb:ListDomains [list] => *
sdb:PutAttributes [write] => domain*
sdb:Select [read] => domain*
secretsmanager:CancelRotateSecret [write] => *,Secret*
secretsmanager:CreateSecret [write] => *,Secret*
secretsmanager:DeleteResourcePolicy [permissions-management] => *,Secret*
secretsmanager:DeleteSecret [write] => *,Secret*
secretsmanager:DescribeSecret [read] => *,Secret*
secretsmanager:GetRandomPassword [read] => *
secretsmanager:GetResourcePolicy [read] => *,Secret*
secretsmanager:GetSecretValue [read] => *,Secret*
secretsmanager:ListSecretVersionIds [read] => *,Secret*
secretsmanager:ListSecrets [list] => *
secretsmanager:PutResourcePolicy [permissions-management] => *,Secret*
secretsmanager:PutSecretValue [write] => *,Secret*
secretsmanager:RemoveRegionsFromReplication [write] => *,Secret*
secretsmanager:ReplicateSecretToRegions [write] => *,Secret*
secretsmanager:RestoreSecret [write] => *,Secret*
secretsmanager:RotateSecret [write] => *,Secret*
secretsmanager:StopReplicationToReplica [write] => *,Secret*
secretsmanager:TagResource [tagging] => *,Secret*
secretsmanager:UntagResource [tagging] => *,Secret*
secretsmanager:UpdateSecret [write] => *,Secret*
secretsmanager:UpdateSecretVersionStage [write] => *,Secret*
secretsmanager:ValidateResourcePolicy [permissions-management] => *,Secret*
securityhub:AcceptAdministratorInvitation [write] => hub
securityhub:AcceptInvitation [write] => hub
securityhub:BatchDisableStandards [write] => hub
securityhub:BatchEnableStandards [write] => hub
securityhub:BatchGetStandardsControlAssociations [read] => *
securityhub:BatchImportFindings [write] => *,product*
securityhub:BatchUpdateFindings [write] => *,hub
securityhub:BatchUpdateStandardsControlAssociations [write] => *
securityhub:CreateActionTarget [write] => hub
securityhub:CreateFindingAggregator [write] => *
securityhub:CreateInsight [write] => hub
securityhub:CreateMembers [write] => hub
securityhub:DeclineInvitations [write] => hub
securityhub:DeleteActionTarget [write] => hub
securityhub:DeleteFindingAggregator [write] => finding-aggregator*
securityhub:DeleteInsight [write] => hub
securityhub:DeleteInvitations [write] => hub
securityhub:DeleteMembers [write] => hub
securityhub:DescribeActionTargets [read] => hub
securityhub:DescribeHub [read] => hub
securityhub:DescribeOrganizationConfiguration [read] => hub
securityhub:DescribeProducts [read] => hub
securityhub:DescribeStandards [read] => hub
securityhub:DescribeStandardsControls [read] => hub
securityhub:DisableImportFindingsForProduct [write] => hub
securityhub:DisableOrganizationAdminAccount [write] => hub
securityhub:DisableSecurityHub [write] => hub
securityhub:DisassociateFromAdministratorAccount [write] => hub
securityhub:DisassociateFromMasterAccount [write] => hub
securityhub:DisassociateMembers [write] => hub
securityhub:EnableImportFindingsForProduct [write] => hub
securityhub:EnableOrganizationAdminAccount [write] => hub
securityhub:EnableSecurityHub [write] => *,hub
securityhub:GetAdhocInsightResults [read] => hub
securityhub:GetAdministratorAccount [read] => hub
securityhub:GetControlFindingSummary [read] => hub
securityhub:GetEnabledStandards [list] => hub
securityhub:GetFindingAggregator [read] => finding-aggregator*
securityhub:GetFindings [read] => hub
securityhub:GetFreeTrialEndDate [read] => hub
securityhub:GetFreeTrialUsage [read] => hub
securityhub:GetInsightFindingTrend [read] => hub
securityhub:GetInsightResults [read] => hub
securityhub:GetInsights [list] => hub
securityhub:GetInvitationsCount [read] => hub
securityhub:GetMasterAccount [read] => hub
securityhub:GetMembers [read] => hub
securityhub:GetUsage [read] => hub
securityhub:InviteMembers [write] => hub
securityhub:ListControlEvaluationSummaries [read] => hub
securityhub:ListEnabledProductsForImport [list] => hub
securityhub:ListFindingAggregators [list] => *
securityhub:ListInvitations [list] => hub
securityhub:ListMembers [list] => hub
securityhub:ListOrganizationAdminAccounts [list] => hub
securityhub:ListSecurityControlDefinitions [list] => *
securityhub:ListTagsForResource [read] => hub*
securityhub:SendFindingEvents [read] => hub
securityhub:SendInsightEvents [read] => hub
securityhub:TagResource [tagging] => hub*
securityhub:UntagResource [tagging] => hub*
securityhub:UpdateActionTarget [write] => hub
securityhub:UpdateFindingAggregator [write] => finding-aggregator*
securityhub:UpdateFindings [write] => hub
securityhub:UpdateInsight [write] => hub
securityhub:UpdateOrganizationConfiguration [write] => hub
securityhub:UpdateSecurityHubConfiguration [write] => hub
securityhub:UpdateStandardsControl [write] => hub
serverlessrepo:CreateApplication [write] => *
serverlessrepo:CreateApplicationVersion [write] => applications*
serverlessrepo:CreateCloudFormationChangeSet [write] => *,applications*
serverlessrepo:CreateCloudFormationTemplate [write] => *,applications*
serverlessrepo:DeleteApplication [write] => applications*
serverlessrepo:GetApplication [read] => *,applications*
serverlessrepo:GetApplicationPolicy [read] => applications*
serverlessrepo:GetCloudFormationTemplate [read] => applications*
serverlessrepo:ListApplicationDependencies [list] => *,applications*
serverlessrepo:ListApplicationVersions [list] => *,applications*
serverlessrepo:ListApplications [list] => *
serverlessrepo:PutApplicationPolicy [write] => applications*
serverlessrepo:SearchApplications [read] => *
serverlessrepo:UnshareApplication [write] => applications*
serverlessrepo:UpdateApplication [write] => applications*
servicecatalog:AcceptPortfolioShare [write] => Portfolio*
servicecatalog:AssociateAttributeGroup [write] => Application*,AttributeGroup*
servicecatalog:AssociateBudgetWithResource [write] => *
servicecatalog:AssociatePrincipalWithPortfolio [write] => Portfolio*
servicecatalog:AssociateProductWithPortfolio [write] => *
servicecatalog:AssociateResource [write] => Application*
servicecatalog:AssociateServiceActionWithProvisioningArtifact [write] => Product*
servicecatalog:AssociateTagOptionWithResource [write] => Portfolio,Product
servicecatalog:BatchAssociateServiceActionWithProvisioningArtifact [write] => *
servicecatalog:BatchDisassociateServiceActionFromProvisioningArtifact [write] => *
servicecatalog:CopyProduct [write] => *
servicecatalog:CreateApplication [write] => *,Application*
servicecatalog:CreateAttributeGroup [write] => *,AttributeGroup*
servicecatalog:CreateConstraint [write] => Product*
servicecatalog:CreatePortfolio [write] => *,Portfolio*
servicecatalog:CreatePortfolioShare [permissions-management] => Portfolio*
servicecatalog:CreateProduct [write] => *,Product*
servicecatalog:CreateProvisionedProductPlan [write] => *
servicecatalog:CreateProvisioningArtifact [write] => Product*
servicecatalog:CreateServiceAction [write] => *
servicecatalog:CreateTagOption [write] => *
servicecatalog:DeleteApplication [write] => Application*
servicecatalog:DeleteAttributeGroup [write] => AttributeGroup*
servicecatalog:DeleteConstraint [write] => *
servicecatalog:DeletePortfolio [write] => Portfolio*
servicecatalog:DeletePortfolioShare [permissions-management] => Portfolio*
servicecatalog:DeleteProduct [write] => Product*
servicecatalog:DeleteProvisionedProductPlan [write] => *
servicecatalog:DeleteProvisioningArtifact [write] => Product*
servicecatalog:DeleteServiceAction [write] => *
servicecatalog:DeleteTagOption [write] => *
servicecatalog:DescribeConstraint [read] => *
servicecatalog:DescribeCopyProductStatus [read] => *
servicecatalog:DescribePortfolio [read] => Portfolio*
servicecatalog:DescribePortfolioShareStatus [read] => *
servicecatalog:DescribePortfolioShares [list] => Portfolio*
servicecatalog:DescribeProduct [read] => Product*
servicecatalog:DescribeProductAsAdmin [read] => Product*
servicecatalog:DescribeProductView [read] => *
servicecatalog:DescribeProvisionedProduct [read] => *
servicecatalog:DescribeProvisionedProductPlan [read] => *
servicecatalog:DescribeProvisioningArtifact [read] => Product*
servicecatalog:DescribeProvisioningParameters [read] => Product*
servicecatalog:DescribeRecord [read] => *
servicecatalog:DescribeServiceAction [read] => *
servicecatalog:DescribeServiceActionExecutionParameters [read] => *
servicecatalog:DescribeTagOption [read] => *
servicecatalog:DisableAWSOrganizationsAccess [write] => *
servicecatalog:DisassociateAttributeGroup [write] => Application*,AttributeGroup*
servicecatalog:DisassociateBudgetFromResource [write] => *
servicecatalog:DisassociatePrincipalFromPortfolio [write] => Portfolio*
servicecatalog:DisassociateProductFromPortfolio [write] => *
servicecatalog:DisassociateResource [write] => Application*
servicecatalog:DisassociateServiceActionFromProvisioningArtifact [write] => Product*
servicecatalog:DisassociateTagOptionFromResource [write] => Portfolio,Product
servicecatalog:EnableAWSOrganizationsAccess [write] => *
servicecatalog:ExecuteProvisionedProductPlan [write] => *
servicecatalog:ExecuteProvisionedProductServiceAction [write] => *
servicecatalog:GetAWSOrganizationsAccessStatus [read] => *
servicecatalog:GetApplication [read] => Application*
servicecatalog:GetAssociatedResource [read] => Application*
servicecatalog:GetAttributeGroup [read] => AttributeGroup*
servicecatalog:GetProvisionedProductOutputs [read] => *
servicecatalog:ImportAsProvisionedProduct [write] => Product*
servicecatalog:ListAcceptedPortfolioShares [list] => *
servicecatalog:ListApplications [list] => *
servicecatalog:ListAssociatedAttributeGroups [list] => Application*
servicecatalog:ListAssociatedResources [list] => Application*
servicecatalog:ListAttributeGroups [list] => *
servicecatalog:ListAttributeGroupsForApplication [list] => Application*
servicecatalog:ListBudgetsForResource [list] => *
servicecatalog:ListConstraintsForPortfolio [list] => *
servicecatalog:ListLaunchPaths [list] => Product*
servicecatalog:ListOrganizationPortfolioAccess [list] => *
servicecatalog:ListPortfolioAccess [list] => Portfolio*
servicecatalog:ListPortfolios [list] => *
servicecatalog:ListPortfoliosForProduct [list] => Product*
servicecatalog:ListPrincipalsForPortfolio [list] => Portfolio*
servicecatalog:ListProvisionedProductPlans [list] => *
servicecatalog:ListProvisioningArtifacts [list] => Product*
servicecatalog:ListProvisioningArtifactsForServiceAction [list] => *
servicecatalog:ListRecordHistory [list] => *
servicecatalog:ListResourcesForTagOption [list] => *
servicecatalog:ListServiceActions [list] => *
servicecatalog:ListServiceActionsForProvisioningArtifact [list] => *,Product*
servicecatalog:ListStackInstancesForProvisionedProduct [list] => *
servicecatalog:ListTagOptions [list] => *
servicecatalog:ListTagsForResource [read] => Application,AttributeGroup
servicecatalog:ProvisionProduct [write] => Product*
servicecatalog:RejectPortfolioShare [write] => Portfolio*
servicecatalog:ScanProvisionedProducts [list] => *
servicecatalog:SearchProducts [list] => *
servicecatalog:SearchProductsAsAdmin [list] => *
servicecatalog:SearchProvisionedProducts [list] => *
servicecatalog:SyncResource [write] => *
servicecatalog:TagResource [tagging] => *,Application,AttributeGroup
servicecatalog:TerminateProvisionedProduct [write] => *
servicecatalog:UntagResource [tagging] => *,Application,AttributeGroup
servicecatalog:UpdateApplication [write] => Application*
servicecatalog:UpdateAttributeGroup [write] => AttributeGroup*
servicecatalog:UpdateConstraint [write] => *
servicecatalog:UpdatePortfolio [write] => *,Portfolio*
servicecatalog:UpdatePortfolioShare [permissions-management] => Portfolio*
servicecatalog:UpdateProduct [write] => *,Product*
servicecatalog:UpdateProvisionedProduct [write] => *
servicecatalog:UpdateProvisionedProductProperties [write] => *
servicecatalog:UpdateProvisioningArtifact [write] => Product*
servicecatalog:UpdateServiceAction [write] => *
servicecatalog:UpdateTagOption [write] => *
servicediscovery:CreateHttpNamespace [write] => *
servicediscovery:CreatePrivateDnsNamespace [write] => *
servicediscovery:CreatePublicDnsNamespace [write] => *
servicediscovery:CreateService [write] => *,namespace*
servicediscovery:DeleteNamespace [write] => namespace*
servicediscovery:DeleteService [write] => service*
servicediscovery:DeregisterInstance [write] => *,service*
servicediscovery:DiscoverInstances [read] => *
servicediscovery:GetInstance [read] => *
servicediscovery:GetInstancesHealthStatus [read] => *
servicediscovery:GetNamespace [read] => namespace*
servicediscovery:GetOperation [read] => *
servicediscovery:GetService [read] => service*
servicediscovery:ListInstances [read] => *
servicediscovery:ListNamespaces [read] => *
servicediscovery:ListOperations [list] => *
servicediscovery:ListServices [read] => *
servicediscovery:ListTagsForResource [read] => *
servicediscovery:RegisterInstance [write] => *,service*
servicediscovery:TagResource [tagging] => *
servicediscovery:UntagResource [tagging] => *
servicediscovery:UpdateHttpNamespace [write] => namespace*
servicediscovery:UpdateInstanceCustomHealthStatus [write] => *
servicediscovery:UpdatePrivateDnsNamespace [write] => namespace*
servicediscovery:UpdatePublicDnsNamespace [write] => namespace*
servicediscovery:UpdateService [write] => service*
serviceextract:GetConfig [read] => *
servicequotas:AssociateServiceQuotaTemplate [write] => *
servicequotas:DeleteServiceQuotaIncreaseRequestFromTemplate [write] => *
servicequotas:DisassociateServiceQuotaTemplate [write] => *
servicequotas:GetAWSDefaultServiceQuota [read] => *
servicequotas:GetAssociationForServiceQuotaTemplate [read] => *
servicequotas:GetRequestedServiceQuotaChange [read] => *
servicequotas:GetServiceQuota [read] => *
servicequotas:GetServiceQuotaIncreaseRequestFromTemplate [read] => *
servicequotas:ListAWSDefaultServiceQuotas [read] => *
servicequotas:ListRequestedServiceQuotaChangeHistory [read] => *
servicequotas:ListRequestedServiceQuotaChangeHistoryByQuota [read] => *
servicequotas:ListServiceQuotaIncreaseRequestsInTemplate [read] => *
servicequotas:ListServiceQuotas [read] => *
servicequotas:ListServices [read] => *
servicequotas:ListTagsForResource [read] => *
servicequotas:PutServiceQuotaIncreaseRequestIntoTemplate [write] => *,quota
servicequotas:RequestServiceQuotaIncrease [write] => *,quota
servicequotas:TagResource [tagging] => *
servicequotas:UntagResource [tagging] => *
ses:CreateConfigurationSet [write] => *,configuration-set*
ses:CreateConfigurationSetEventDestination [write] => *,configuration-set*
ses:CreateContact [write] => *,contact-list*
ses:CreateContactList [write] => *,contact-list*
ses:CreateCustomVerificationEmailTemplate [write] => *,custom-verification-email-template*
ses:CreateDedicatedIpPool [write] => *,dedicated-ip-pool*
ses:CreateDeliverabilityTestReport [write] => *,identity*
ses:CreateEmailIdentity [write] => *,identity*
ses:CreateEmailIdentityPolicy [permissions-management] => *,identity*
ses:CreateEmailTemplate [write] => *,template*
ses:CreateImportJob [write] => *
ses:DeleteConfigurationSet [write] => *,configuration-set*
ses:DeleteConfigurationSetEventDestination [write] => *,configuration-set*
ses:DeleteContact [write] => *,contact-list*
ses:DeleteContactList [write] => *,contact-list*
ses:DeleteCustomVerificationEmailTemplate [write] => *,custom-verification-email-template*
ses:DeleteDedicatedIpPool [write] => *,dedicated-ip-pool*
ses:DeleteEmailIdentity [write] => *,identity*
ses:DeleteEmailIdentityPolicy [permissions-management] => *,identity*
ses:DeleteEmailTemplate [write] => *,template*
ses:DeleteSuppressedDestination [write] => *
ses:GetAccount [read] => *
ses:GetBlacklistReports [read] => *
ses:GetConfigurationSet [read] => *,configuration-set*
ses:GetConfigurationSetEventDestinations [read] => *,configuration-set*
ses:GetContact [read] => *,contact-list*
ses:GetContactList [read] => *,contact-list*
ses:GetCustomVerificationEmailTemplate [read] => *,custom-verification-email-template*
ses:GetDedicatedIp [read] => *
ses:GetDedicatedIps [read] => *,dedicated-ip-pool*
ses:GetDeliverabilityDashboardOptions [read] => *
ses:GetDeliverabilityTestReport [read] => *,deliverability-test-report*
ses:GetDomainDeliverabilityCampaign [read] => *
ses:GetDomainStatisticsReport [read] => *,identity*
ses:GetEmailIdentity [read] => *,identity*
ses:GetEmailIdentityPolicies [read] => *,identity*
ses:GetEmailTemplate [read] => *,template*
ses:GetImportJob [read] => *,import-job*
ses:GetSuppressedDestination [read] => *
ses:ListConfigurationSets [list] => *
ses:ListContactLists [list] => *
ses:ListContacts [list] => *,contact-list*
ses:ListCustomVerificationEmailTemplates [list] => *
ses:ListDedicatedIpPools [list] => *
ses:ListDeliverabilityTestReports [list] => *
ses:ListDomainDeliverabilityCampaigns [read] => *
ses:ListEmailIdentities [list] => *
ses:ListEmailTemplates [list] => *
ses:ListImportJobs [list] => *
ses:ListSuppressedDestinations [read] => *
ses:ListTagsForResource [read] => *,configuration-set,contact-list,dedicated-ip-pool,deliverability-test-report,identity
ses:PutAccountDedicatedIpWarmupAttributes [write] => *
ses:PutAccountDetails [write] => *
ses:PutAccountSendingAttributes [write] => *
ses:PutAccountSuppressionAttributes [write] => *
ses:PutConfigurationSetDeliveryOptions [write] => *,configuration-set*
ses:PutConfigurationSetReputationOptions [write] => *,configuration-set*
ses:PutConfigurationSetSendingOptions [write] => *,configuration-set*
ses:PutConfigurationSetSuppressionOptions [write] => *,configuration-set*
ses:PutConfigurationSetTrackingOptions [write] => *,configuration-set*
ses:PutDedicatedIpInPool [write] => *,dedicated-ip-pool*
ses:PutDedicatedIpWarmupAttributes [write] => *
ses:PutDeliverabilityDashboardOption [write] => *
ses:PutEmailIdentityConfigurationSetAttributes [write] => *,configuration-set,identity*
ses:PutEmailIdentityDkimAttributes [write] => *,identity*
ses:PutEmailIdentityDkimSigningAttributes [write] => *,identity*
ses:PutEmailIdentityFeedbackAttributes [write] => *,identity*
ses:PutEmailIdentityMailFromAttributes [write] => *,identity*
ses:PutSuppressedDestination [write] => *
ses:SendBulkEmail [write] => *,configuration-set,identity*,template*
ses:SendCustomVerificationEmail [write] => *,custom-verification-email-template*
ses:SendEmail [write] => *,configuration-set,identity*,template
ses:TagResource [tagging] => *,configuration-set,contact-list,dedicated-ip-pool,deliverability-test-report,identity
ses:TestRenderEmailTemplate [write] => *,template*
ses:UntagResource [tagging] => *,configuration-set,contact-list,dedicated-ip-pool,deliverability-test-report,identity
ses:UpdateConfigurationSetEventDestination [write] => *,configuration-set*
ses:UpdateContact [write] => *,contact-list*
ses:UpdateContactList [write] => *,contact-list*
ses:UpdateCustomVerificationEmailTemplate [write] => *,custom-verification-email-template*
ses:UpdateEmailIdentityPolicy [permissions-management] => *,identity*
ses:UpdateEmailTemplate [write] => *,template*
ses:CloneReceiptRuleSet [write] => *
ses:CreateConfigurationSet [write] => *
ses:CreateConfigurationSetEventDestination [write] => *
ses:CreateConfigurationSetTrackingOptions [write] => *
ses:CreateCustomVerificationEmailTemplate [write] => *
ses:CreateReceiptFilter [write] => *
ses:CreateReceiptRule [write] => *
ses:CreateReceiptRuleSet [write] => *
ses:CreateTemplate [write] => *
ses:DeleteConfigurationSet [write] => *
ses:DeleteConfigurationSetEventDestination [write] => *
ses:DeleteConfigurationSetTrackingOptions [write] => *
ses:DeleteCustomVerificationEmailTemplate [write] => *
ses:DeleteIdentity [write] => *
ses:DeleteIdentityPolicy [permissions-management] => *
ses:DeleteReceiptFilter [write] => *
ses:DeleteReceiptRule [write] => *
ses:DeleteReceiptRuleSet [write] => *
ses:DeleteTemplate [write] => *
ses:DeleteVerifiedEmailAddress [write] => *
ses:DescribeActiveReceiptRuleSet [read] => *
ses:DescribeConfigurationSet [read] => *
ses:DescribeReceiptRule [read] => *
ses:DescribeReceiptRuleSet [read] => *
ses:GetAccountSendingEnabled [read] => *
ses:GetCustomVerificationEmailTemplate [read] => *
ses:GetIdentityDkimAttributes [read] => *
ses:GetIdentityMailFromDomainAttributes [read] => *
ses:GetIdentityNotificationAttributes [read] => *
ses:GetIdentityPolicies [read] => *
ses:GetIdentityVerificationAttributes [read] => *
ses:GetSendQuota [read] => *
ses:GetSendStatistics [read] => *
ses:GetTemplate [read] => *
ses:ListConfigurationSets [list] => *
ses:ListCustomVerificationEmailTemplates [list] => *
ses:ListIdentities [list] => *
ses:ListIdentityPolicies [list] => *
ses:ListReceiptFilters [read] => *
ses:ListReceiptRuleSets [read] => *
ses:ListTemplates [list] => *
ses:ListVerifiedEmailAddresses [read] => *
ses:PutConfigurationSetDeliveryOptions [write] => *
ses:PutIdentityPolicy [permissions-management] => *
ses:ReorderReceiptRuleSet [write] => *
ses:SendBounce [write] => *,identity*
ses:SendBulkTemplatedEmail [write] => *,configuration-set,identity*,template*
ses:SendCustomVerificationEmail [write] => *,identity*
ses:SendEmail [write] => *,configuration-set,identity*
ses:SendRawEmail [write] => *,configuration-set,identity*
ses:SendTemplatedEmail [write] => *,configuration-set,identity*,template*
ses:SetActiveReceiptRuleSet [write] => *
ses:SetIdentityDkimEnabled [write] => *
ses:SetIdentityFeedbackForwardingEnabled [write] => *
ses:SetIdentityHeadersInNotificationsEnabled [write] => *
ses:SetIdentityMailFromDomain [write] => *
ses:SetIdentityNotificationTopic [write] => *
ses:SetReceiptRulePosition [write] => *
ses:TestRenderTemplate [write] => *
ses:UpdateAccountSendingEnabled [write] => *
ses:UpdateConfigurationSetEventDestination [write] => *
ses:UpdateConfigurationSetReputationMetricsEnabled [write] => *
ses:UpdateConfigurationSetSendingEnabled [write] => *
ses:UpdateConfigurationSetTrackingOptions [write] => *
ses:UpdateCustomVerificationEmailTemplate [write] => *
ses:UpdateReceiptRule [write] => *
ses:UpdateTemplate [write] => *
ses:VerifyDomainDkim [write] => *
ses:VerifyDomainIdentity [write] => *
ses:VerifyEmailAddress [write] => *
ses:VerifyEmailIdentity [write] => *
ses:CreateConfigurationSet [write] => *
ses:CreateConfigurationSetEventDestination [write] => *,configuration-set*
ses:CreateDedicatedIpPool [write] => *
ses:CreateDeliverabilityTestReport [write] => *,identity*
ses:CreateEmailIdentity [write] => *
ses:DeleteConfigurationSet [write] => *,configuration-set*
ses:DeleteConfigurationSetEventDestination [write] => *,configuration-set*
ses:DeleteDedicatedIpPool [write] => *,dedicated-ip-pool*
ses:DeleteEmailIdentity [write] => *,identity*
ses:GetAccount [read] => *
ses:GetBlacklistReports [read] => *
ses:GetConfigurationSet [read] => *,configuration-set*
ses:GetConfigurationSetEventDestinations [read] => *,configuration-set*
ses:GetDedicatedIp [read] => *
ses:GetDedicatedIps [read] => *,dedicated-ip-pool*
ses:GetDeliverabilityDashboardOptions [read] => *
ses:GetDeliverabilityTestReport [read] => *,deliverability-test-report*
ses:GetDomainDeliverabilityCampaign [read] => *
ses:GetDomainStatisticsReport [read] => *,identity*
ses:GetEmailIdentity [read] => *,identity*
ses:ListConfigurationSets [list] => *
ses:ListDedicatedIpPools [list] => *
ses:ListDeliverabilityTestReports [list] => *
ses:ListDomainDeliverabilityCampaigns [read] => *
ses:ListEmailIdentities [list] => *
ses:ListTagsForResource [read] => *,configuration-set,dedicated-ip-pool,deliverability-test-report,identity
ses:PutAccountDedicatedIpWarmupAttributes [write] => *
ses:PutAccountSendingAttributes [write] => *
ses:PutConfigurationSetDeliveryOptions [write] => *,configuration-set*
ses:PutConfigurationSetReputationOptions [write] => *,configuration-set*
ses:PutConfigurationSetSendingOptions [write] => *,configuration-set*
ses:PutConfigurationSetTrackingOptions [write] => *,configuration-set*
ses:PutDedicatedIpInPool [write] => *,dedicated-ip-pool*
ses:PutDedicatedIpWarmupAttributes [write] => *
ses:PutDeliverabilityDashboardOption [write] => *
ses:PutEmailIdentityDkimAttributes [write] => *,identity*
ses:PutEmailIdentityFeedbackAttributes [write] => *,identity*
ses:PutEmailIdentityMailFromAttributes [write] => *,identity*
ses:SendEmail [write] => *,identity*
ses:TagResource [tagging] => *,configuration-set,dedicated-ip-pool,deliverability-test-report,identity
ses:UntagResource [tagging] => *,configuration-set,dedicated-ip-pool,deliverability-test-report,identity
ses:UpdateConfigurationSetEventDestination [write] => *,configuration-set*
shield:AssociateDRTLogBucket [write] => *
shield:AssociateDRTRole [write] => *
shield:AssociateHealthCheck [write] => *,protection*
shield:AssociateProactiveEngagementDetails [write] => *
shield:CreateProtection [write] => *
shield:CreateProtectionGroup [write] => *
shield:CreateSubscription [write] => *
shield:DeleteProtection [write] => *,protection*
shield:DeleteProtectionGroup [write] => *,protection-group*
shield:DeleteSubscription [write] => *
shield:DescribeAttack [read] => attack*
shield:DescribeAttackStatistics [read] => *
shield:DescribeDRTAccess [read] => *
shield:DescribeEmergencyContactSettings [read] => *
shield:DescribeProtection [read] => *,protection*
shield:DescribeProtectionGroup [read] => *,protection-group*
shield:DescribeSubscription [read] => *
shield:DisableApplicationLayerAutomaticResponse [write] => *
shield:DisableProactiveEngagement [write] => *
shield:DisassociateDRTLogBucket [write] => *
shield:DisassociateDRTRole [write] => *
shield:DisassociateHealthCheck [write] => *,protection*
shield:EnableApplicationLayerAutomaticResponse [write] => *
shield:EnableProactiveEngagement [write] => *
shield:GetSubscriptionState [read] => *
shield:ListAttacks [list] => *
shield:ListProtectionGroups [list] => *
shield:ListProtections [list] => *
shield:ListResourcesInProtectionGroup [list] => protection-group*
shield:ListTagsForResource [read] => protection,protection-group
shield:TagResource [tagging] => *,protection,protection-group
shield:UntagResource [tagging] => *,protection,protection-group
shield:UpdateApplicationLayerAutomaticResponse [write] => *
shield:UpdateEmergencyContactSettings [write] => *
shield:UpdateProtectionGroup [write] => *,protection-group*
shield:UpdateSubscription [write] => *
signer:AddProfilePermission [permissions-management] => *,signing-profile*
signer:CancelSigningProfile [write] => *,signing-profile*
signer:DescribeSigningJob [read] => signing-job*
signer:GetSigningPlatform [read] => *
signer:GetSigningProfile [read] => *,signing-profile*
signer:ListProfilePermissions [read] => signing-profile*
signer:ListSigningJobs [list] => *
signer:ListSigningPlatforms [list] => *
signer:ListSigningProfiles [list] => *
signer:ListTagsForResource [read] => signing-profile*
signer:PutSigningProfile [write] => *
signer:RemoveProfilePermission [permissions-management] => *,signing-profile*
signer:RevokeSignature [write] => *,signing-job*
signer:RevokeSigningProfile [write] => *,signing-profile*
signer:StartSigningJob [write] => *,signing-profile*
signer:TagResource [tagging] => *,signing-profile*
signer:UntagResource [tagging] => *,signing-profile*
sms:CreateApp [write] => *
sms:CreateReplicationJob [write] => *
sms:DeleteApp [write] => *
sms:DeleteAppLaunchConfiguration [write] => *
sms:DeleteAppReplicationConfiguration [write] => *
sms:DeleteAppValidationConfiguration [write] => *
sms:DeleteReplicationJob [write] => *
sms:DeleteServerCatalog [write] => *
sms:DisassociateConnector [write] => *
sms:GenerateChangeSet [write] => *
sms:GenerateTemplate [write] => *
sms:GetApp [read] => *
sms:GetAppLaunchConfiguration [read] => *
sms:GetAppReplicationConfiguration [read] => *
sms:GetAppValidationConfiguration [read] => *
sms:GetAppValidationOutput [read] => *
sms:GetConnectors [read] => *
sms:GetMessages [read] => *
sms:GetReplicationJobs [read] => *
sms:GetReplicationRuns [read] => *
sms:GetServers [read] => *
sms:ImportAppCatalog [write] => *
sms:ImportServerCatalog [write] => *
sms:LaunchApp [write] => *
sms:ListApps [list] => *
sms:NotifyAppValidationOutput [write] => *
sms:PutAppLaunchConfiguration [write] => *
sms:PutAppReplicationConfiguration [write] => *
sms:PutAppValidationConfiguration [write] => *
sms:SendMessage [write] => *
sms:StartAppReplication [write] => *
sms:StartOnDemandAppReplication [write] => *
sms:StartOnDemandReplicationRun [write] => *
sms:StopAppReplication [write] => *
sms:TerminateApp [write] => *
sms:UpdateApp [write] => *
sms:UpdateReplicationJob [write] => *
sms-voice:AssociateOriginationIdentity [write] => PhoneNumber,Pool*,SenderId
sms-voice:CreateConfigurationSet [write] => *
sms-voice:CreateEventDestination [write] => ConfigurationSet*
sms-voice:CreateOptOutList [write] => *
sms-voice:CreatePool [write] => *,PhoneNumber,SenderId
sms-voice:DeleteConfigurationSet [write] => ConfigurationSet*
sms-voice:DeleteDefaultMessageType [write] => ConfigurationSet*
sms-voice:DeleteDefaultSenderId [write] => ConfigurationSet*
sms-voice:DeleteEventDestination [write] => ConfigurationSet*
sms-voice:DeleteKeyword [write] => PhoneNumber,Pool
sms-voice:DeleteOptOutList [write] => OptOutList*
sms-voice:DeleteOptedOutNumber [write] => OptOutList*
sms-voice:DeletePool [write] => Pool*
sms-voice:DeleteTextMessageSpendLimitOverride [write] => *
sms-voice:DeleteVoiceMessageSpendLimitOverride [write] => *
sms-voice:DescribeAccountAttributes [read] => *
sms-voice:DescribeAccountLimits [read] => *
sms-voice:DescribeConfigurationSets [read] => ConfigurationSet
sms-voice:DescribeKeywords [read] => PhoneNumber,Pool
sms-voice:DescribeOptOutLists [read] => OptOutList
sms-voice:DescribeOptedOutNumbers [read] => OptOutList*
sms-voice:DescribePhoneNumbers [read] => PhoneNumber
sms-voice:DescribePools [read] => Pool
sms-voice:DescribeSenderIds [read] => SenderId
sms-voice:DescribeSpendLimits [read] => *
sms-voice:DisassociateOriginationIdentity [write] => PhoneNumber,Pool*,SenderId
sms-voice:ListPoolOriginationIdentities [read] => Pool*
sms-voice:ListTagsForResource [read] => ConfigurationSet,OptOutList,PhoneNumber,Pool,SenderId
sms-voice:PutKeyword [write] => PhoneNumber,Pool
sms-voice:PutOptedOutNumber [write] => OptOutList*
sms-voice:ReleasePhoneNumber [write] => PhoneNumber*
sms-voice:RequestPhoneNumber [write] => *,Pool
sms-voice:SendTextMessage [write] => PhoneNumber,Pool,SenderId
sms-voice:SendVoiceMessage [write] => PhoneNumber,Pool
sms-voice:SetDefaultMessageType [write] => ConfigurationSet*
sms-voice:SetDefaultSenderId [write] => ConfigurationSet*
sms-voice:SetTextMessageSpendLimitOverride [write] => *
sms-voice:SetVoiceMessageSpendLimitOverride [write] => *
sms-voice:TagResource [tagging] => *,ConfigurationSet,OptOutList,PhoneNumber,Pool,SenderId
sms-voice:UntagResource [tagging] => *,ConfigurationSet,OptOutList,PhoneNumber,Pool,SenderId
sms-voice:UpdateEventDestination [write] => ConfigurationSet*
sms-voice:UpdatePhoneNumber [write] => PhoneNumber*
sms-voice:UpdatePool [write] => Pool*
sms-voice:CreateConfigurationSet [write] => *
sms-voice:CreateConfigurationSetEventDestination [write] => *
sms-voice:DeleteConfigurationSet [write] => *
sms-voice:DeleteConfigurationSetEventDestination [write] => *
sms-voice:GetConfigurationSetEventDestinations [read] => *
sms-voice:ListConfigurationSets [read] => *
sms-voice:SendVoiceMessage [write] => *
sms-voice:UpdateConfigurationSetEventDestination [write] => *
snow-device-management:CancelTask [write] => task*
snow-device-management:CreateTask [write] => *
snow-device-management:DescribeDevice [read] => managed-device*
snow-device-management:DescribeDeviceEc2Instances [read] => managed-device*
snow-device-management:DescribeExecution [read] => *
snow-device-management:DescribeTask [read] => task*
snow-device-management:ListDeviceResources [list] => managed-device*
snow-device-management:ListDevices [list] => *
snow-device-management:ListExecutions [list] => *
snow-device-management:ListTagsForResource [read] => *
snow-device-management:ListTasks [list] => *
snow-device-management:TagResource [tagging] => *,managed-device,task
snow-device-management:UntagResource [tagging] => *,managed-device,task
snowball:CancelCluster [write] => *
snowball:CancelJob [write] => *
snowball:CreateAddress [write] => *
snowball:CreateCluster [write] => *
snowball:CreateJob [write] => *
snowball:CreateLongTermPricing [write] => *
snowball:CreateReturnShippingLabel [write] => *
snowball:DescribeAddress [read] => *
snowball:DescribeAddresses [list] => *
snowball:DescribeCluster [read] => *
snowball:DescribeJob [read] => *
snowball:DescribeReturnShippingLabel [read] => *
snowball:GetJobManifest [read] => *
snowball:GetJobUnlockCode [read] => *
snowball:GetSnowballUsage [read] => *
snowball:GetSoftwareUpdates [read] => *
snowball:ListClusterJobs [list] => *
snowball:ListClusters [list] => *
snowball:ListCompatibleImages [list] => *
snowball:ListJobs [list] => *
snowball:ListLongTermPricing [read] => *
snowball:UpdateCluster [write] => *
snowball:UpdateJob [write] => *
snowball:UpdateJobShipmentState [write] => *
snowball:UpdateLongTermPricing [write] => *
sns:AddPermission [permissions-management] => topic*
sns:CheckIfPhoneNumberIsOptedOut [read] => *
sns:ConfirmSubscription [write] => topic*
sns:CreatePlatformApplication [write] => *
sns:CreatePlatformEndpoint [write] => *
sns:CreateSMSSandboxPhoneNumber [write] => *
sns:CreateTopic [write] => *,topic*
sns:DeleteEndpoint [write] => *
sns:DeletePlatformApplication [write] => *
sns:DeleteSMSSandboxPhoneNumber [write] => *
sns:DeleteTopic [write] => topic*
sns:GetDataProtectionPolicy [read] => topic*
sns:GetEndpointAttributes [read] => *
sns:GetPlatformApplicationAttributes [read] => *
sns:GetSMSAttributes [read] => *
sns:GetSMSSandboxAccountStatus [read] => *
sns:GetSubscriptionAttributes [read] => *
sns:GetTopicAttributes [read] => topic*
sns:ListEndpointsByPlatformApplication [list] => *
sns:ListOriginationNumbers [list] => *
sns:ListPhoneNumbersOptedOut [read] => *
sns:ListPlatformApplications [list] => *
sns:ListSMSSandboxPhoneNumbers [list] => *
sns:ListSubscriptions [list] => *
sns:ListSubscriptionsByTopic [list] => topic*
sns:ListTagsForResource [read] => topic
sns:ListTopics [list] => *
sns:OptInPhoneNumber [write] => *
sns:Publish [write] => topic*
sns:PutDataProtectionPolicy [write] => topic*
sns:RemovePermission [permissions-management] => topic*
sns:SetEndpointAttributes [write] => *
sns:SetPlatformApplicationAttributes [write] => *
sns:SetSMSAttributes [write] => *
sns:SetSubscriptionAttributes [write] => *
sns:SetTopicAttributes [write] => topic*
sns:Subscribe [write] => *,topic*
sns:TagResource [tagging] => *,topic
sns:Unsubscribe [write] => *
sns:UntagResource [tagging] => *,topic
sns:VerifySMSSandboxPhoneNumber [write] => *
sqlworkbench:AssociateConnectionWithChart [write] => chart*,connection*
sqlworkbench:AssociateConnectionWithTab [write] => connection*
sqlworkbench:AssociateQueryWithTab [write] => query*
sqlworkbench:BatchDeleteFolder [write] => *
sqlworkbench:BatchGetNotebookCell [read] => notebook*
sqlworkbench:CreateAccount [write] => *
sqlworkbench:CreateChart [write] => *,chart*
sqlworkbench:CreateConnection [write] => *,connection*
sqlworkbench:CreateFolder [write] => *
sqlworkbench:CreateNotebook [write] => *,notebook*
sqlworkbench:CreateNotebookCell [write] => *,notebook*
sqlworkbench:CreateNotebookFromVersion [write] => *,notebook*
sqlworkbench:CreateNotebookVersion [write] => *,notebook*
sqlworkbench:CreateSavedQuery [write] => *,query*
sqlworkbench:DeleteChart [write] => chart*
sqlworkbench:DeleteConnection [write] => connection*
sqlworkbench:DeleteNotebook [write] => notebook*
sqlworkbench:DeleteNotebookCell [write] => notebook*
sqlworkbench:DeleteNotebookVersion [write] => notebook*
sqlworkbench:DeleteSavedQuery [write] => query*
sqlworkbench:DeleteTab [write] => *
sqlworkbench:DriverExecute [write] => connection*
sqlworkbench:DuplicateNotebook [write] => *,notebook*
sqlworkbench:ExportNotebook [read] => notebook*
sqlworkbench:GenerateSession [write] => *
sqlworkbench:GetAccountInfo [read] => *
sqlworkbench:GetAccountSettings [read] => *
sqlworkbench:GetChart [read] => chart*
sqlworkbench:GetConnection [read] => connection*
sqlworkbench:GetNotebook [read] => notebook*
sqlworkbench:GetNotebookVersion [read] => notebook*
sqlworkbench:GetQueryExecutionHistory [read] => *
sqlworkbench:GetSavedQuery [read] => query*
sqlworkbench:GetUserInfo [read] => *
sqlworkbench:GetUserWorkspaceSettings [read] => *
sqlworkbench:ImportNotebook [write] => *,notebook*
sqlworkbench:ListConnections [list] => *
sqlworkbench:ListDatabases [list] => *
sqlworkbench:ListFiles [list] => *
sqlworkbench:ListNotebookVersions [list] => notebook*
sqlworkbench:ListNotebooks [list] => *
sqlworkbench:ListQueryExecutionHistory [list] => *
sqlworkbench:ListRedshiftClusters [list] => *
sqlworkbench:ListSampleDatabases [read] => *
sqlworkbench:ListSavedQueryVersions [list] => query*
sqlworkbench:ListTabs [list] => *
sqlworkbench:ListTaggedResources [read] => *
sqlworkbench:ListTagsForResource [read] => chart,connection,notebook,query
sqlworkbench:PutTab [write] => *
sqlworkbench:PutUserWorkspaceSettings [write] => *
sqlworkbench:RestoreNotebookVersion [write] => *,notebook*
sqlworkbench:TagResource [tagging] => *,chart,connection,notebook,query
sqlworkbench:UntagResource [tagging] => *,chart,connection,notebook,query
sqlworkbench:UpdateAccountConnectionSettings [write] => *
sqlworkbench:UpdateAccountExportSettings [write] => *
sqlworkbench:UpdateAccountGeneralSettings [write] => *
sqlworkbench:UpdateChart [write] => *,chart*
sqlworkbench:UpdateConnection [write] => *,connection*
sqlworkbench:UpdateFileFolder [write] => chart,query
sqlworkbench:UpdateFolder [write] => *
sqlworkbench:UpdateNotebook [write] => *,notebook*
sqlworkbench:UpdateNotebookCellContent [write] => *,notebook*
sqlworkbench:UpdateNotebookCellLayout [write] => *,notebook*
sqlworkbench:UpdateSavedQuery [write] => *,query*
sqs:AddPermission [permissions-management] => queue*
sqs:ChangeMessageVisibility [write] => queue*
sqs:CreateQueue [write] => queue*
sqs:DeleteMessage [write] => queue*
sqs:DeleteQueue [write] => queue*
sqs:GetQueueAttributes [read] => queue*
sqs:GetQueueUrl [read] => queue*
sqs:ListDeadLetterSourceQueues [read] => queue*
sqs:ListQueueTags [read] => queue*
sqs:ListQueues [read] => *
sqs:PurgeQueue [write] => queue*
sqs:ReceiveMessage [read] => queue*
sqs:RemovePermission [permissions-management] => queue*
sqs:SendMessage [write] => queue*
sqs:SetQueueAttributes [write] => queue*
sqs:TagQueue [tagging] => queue*
sqs:UntagQueue [tagging] => queue*
ssm:AddTagsToResource [tagging] => *,association,automation-execution,document,instance,maintenancewindow,managed-instance,opsitem,opsmetadata,parameter,patchbaseline,task
ssm:AssociateOpsItemRelatedItem [write] => opsitem*
ssm:CancelCommand [write] => *
ssm:CancelMaintenanceWindowExecution [write] => maintenancewindow*
ssm:CreateActivation [write] => *
ssm:CreateAssociation [write] => *,document*,instance,managed-instance
ssm:CreateAssociationBatch [write] => document*,instance,managed-instance
ssm:CreateDocument [write] => *,document*
ssm:CreateMaintenanceWindow [write] => *
ssm:CreateOpsItem [write] => *
ssm:CreateOpsMetadata [write] => *
ssm:CreatePatchBaseline [write] => *
ssm:CreateResourceDataSync [write] => *,resourcedatasync*
ssm:DeleteActivation [write] => *
ssm:DeleteAssociation [write] => association,document,instance,managed-instance
ssm:DeleteDocument [write] => document*
ssm:DeleteInventory [write] => *
ssm:DeleteMaintenanceWindow [write] => maintenancewindow*
ssm:DeleteOpsMetadata [write] => opsmetadata*
ssm:DeleteParameter [write] => parameter*
ssm:DeleteParameters [write] => parameter*
ssm:DeletePatchBaseline [write] => patchbaseline*
ssm:DeleteResourceDataSync [write] => *,resourcedatasync*
ssm:DeregisterManagedInstance [write] => *,managed-instance*
ssm:DeregisterPatchBaselineForPatchGroup [write] => patchbaseline*
ssm:DeregisterTargetFromMaintenanceWindow [write] => maintenancewindow*
ssm:DeregisterTaskFromMaintenanceWindow [write] => maintenancewindow*
ssm:DescribeActivations [read] => *
ssm:DescribeAssociation [read] => association,document,instance,managed-instance
ssm:DescribeAssociationExecutionTargets [read] => association*
ssm:DescribeAssociationExecutions [read] => association*
ssm:DescribeAutomationExecutions [read] => *
ssm:DescribeAutomationStepExecutions [read] => automation-execution*
ssm:DescribeAvailablePatches [read] => *
ssm:DescribeDocument [read] => document*
ssm:DescribeDocumentParameters [read] => document*
ssm:DescribeDocumentPermission [read] => document*
ssm:DescribeEffectiveInstanceAssociations [read] => instance*,managed-instance*
ssm:DescribeEffectivePatchesForPatchBaseline [read] => patchbaseline*
ssm:DescribeInstanceAssociationsStatus [read] => instance*,managed-instance*
ssm:DescribeInstanceInformation [read] => *
ssm:DescribeInstancePatchStates [read] => *
ssm:DescribeInstancePatchStatesForPatchGroup [read] => *
ssm:DescribeInstancePatches [read] => *
ssm:DescribeInstanceProperties [read] => *
ssm:DescribeInventoryDeletions [read] => *
ssm:DescribeMaintenanceWindowExecutionTaskInvocations [list] => *
ssm:DescribeMaintenanceWindowExecutionTasks [list] => maintenancewindow*
ssm:DescribeMaintenanceWindowExecutions [list] => maintenancewindow*
ssm:DescribeMaintenanceWindowSchedule [list] => *
ssm:DescribeMaintenanceWindowTargets [list] => maintenancewindow*
ssm:DescribeMaintenanceWindowTasks [list] => maintenancewindow*
ssm:DescribeMaintenanceWindows [list] => *
ssm:DescribeMaintenanceWindowsForTarget [list] => *
ssm:DescribeOpsItems [read] => *
ssm:DescribeParameters [list] => *
ssm:DescribePatchBaselines [list] => *
ssm:DescribePatchGroupState [list] => *
ssm:DescribePatchGroups [list] => *
ssm:DescribePatchProperties [list] => *
ssm:DescribeSessions [list] => *
ssm:DisassociateOpsItemRelatedItem [write] => opsitem*
ssm:GetAutomationExecution [read] => automation-execution*
ssm:GetCalendar [read] => document*
ssm:GetCalendarState [read] => document*
ssm:GetCommandInvocation [read] => *
ssm:GetConnectionStatus [read] => *,instance,managed-instance,task
ssm:GetDefaultPatchBaseline [read] => patchbaseline*
ssm:GetDeployablePatchSnapshotForInstance [read] => *
ssm:GetDocument [read] => *,document*
ssm:GetInventory [read] => *
ssm:GetInventorySchema [read] => *
ssm:GetMaintenanceWindow [read] => maintenancewindow*
ssm:GetMaintenanceWindowExecution [read] => *
ssm:GetMaintenanceWindowExecutionTask [read] => *
ssm:GetMaintenanceWindowExecutionTaskInvocation [read] => *
ssm:GetMaintenanceWindowTask [read] => maintenancewindow*
ssm:GetManifest [read] => *
ssm:GetOpsItem [read] => opsitem*
ssm:GetOpsMetadata [read] => opsmetadata*
ssm:GetOpsSummary [read] => resourcedatasync*
ssm:GetParameter [read] => parameter*
ssm:GetParameterHistory [read] => parameter*
ssm:GetParameters [read] => parameter*
ssm:GetParametersByPath [read] => *,parameter*
ssm:GetPatchBaseline [read] => patchbaseline*
ssm:GetPatchBaselineForPatchGroup [read] => patchbaseline*
ssm:GetServiceSetting [read] => servicesetting*
ssm:LabelParameterVersion [write] => parameter*
ssm:ListAssociationVersions [list] => association*
ssm:ListAssociations [list] => *
ssm:ListCommandInvocations [list] => *
ssm:ListCommands [list] => *
ssm:ListComplianceItems [list] => *
ssm:ListComplianceSummaries [list] => *
ssm:ListDocumentMetadataHistory [list] => document*
ssm:ListDocumentVersions [list] => document*
ssm:ListDocuments [list] => *
ssm:ListInstanceAssociations [list] => instance,managed-instance
ssm:ListInventoryEntries [list] => *
ssm:ListOpsItemEvents [list] => *
ssm:ListOpsItemRelatedItems [list] => *
ssm:ListOpsMetadata [list] => *
ssm:ListResourceComplianceSummaries [list] => *
ssm:ListResourceDataSync [list] => *
ssm:ListTagsForResource [list] => association,automation-execution,document,maintenancewindow,managed-instance,opsitem,opsmetadata,parameter,patchbaseline
ssm:ModifyDocumentPermission [permissions-management] => document*
ssm:PutCalendar [write] => document*
ssm:PutComplianceItems [write] => instance,managed-instance
ssm:PutConfigurePackageResult [read] => *
ssm:PutInventory [write] => *
ssm:PutParameter [write] => *,parameter*
ssm:RegisterDefaultPatchBaseline [write] => patchbaseline*
ssm:RegisterManagedInstance [write] => *
ssm:RegisterPatchBaselineForPatchGroup [write] => patchbaseline*
ssm:RegisterTargetWithMaintenanceWindow [write] => maintenancewindow*
ssm:RegisterTaskWithMaintenanceWindow [write] => maintenancewindow*
ssm:RemoveTagsFromResource [tagging] => *,association,automation-execution,document,instance,maintenancewindow,managed-instance,opsitem,opsmetadata,parameter,patchbaseline,task
ssm:ResetServiceSetting [write] => servicesetting*
ssm:ResumeSession [write] => session*
ssm:SendAutomationSignal [write] => automation-execution*
ssm:SendCommand [write] => *,bucket,document*,instance,managed-instance
ssm:StartAssociationsOnce [write] => association*
ssm:StartAutomationExecution [write] => automation-definition*
ssm:StartChangeRequestExecution [write] => *,automation-definition*
ssm:StartSession [write] => *,document,instance,managed-instance,task
ssm:StopAutomationExecution [write] => automation-execution*
ssm:TerminateSession [write] => session*
ssm:UnlabelParameterVersion [write] => parameter*
ssm:UpdateAssociation [write] => association*,document,instance,managed-instance
ssm:UpdateAssociationStatus [write] => *,document*,instance,managed-instance
ssm:UpdateDocument [write] => document*
ssm:UpdateDocumentDefaultVersion [write] => document*
ssm:UpdateDocumentMetadata [write] => document*
ssm:UpdateInstanceAssociationStatus [write] => *,association*,instance,managed-instance
ssm:UpdateInstanceInformation [write] => *,instance,managed-instance
ssm:UpdateMaintenanceWindow [write] => maintenancewindow*
ssm:UpdateMaintenanceWindowTarget [write] => maintenancewindow*
ssm:UpdateMaintenanceWindowTask [write] => maintenancewindow*
ssm:UpdateManagedInstanceRole [write] => *,managed-instance*
ssm:UpdateOpsItem [write] => opsitem*
ssm:UpdateOpsMetadata [write] => opsmetadata*
ssm:UpdatePatchBaseline [write] => patchbaseline*
ssm:UpdateResourceDataSync [write] => *,resourcedatasync*
ssm:UpdateServiceSetting [write] => servicesetting*
ssm-contacts:AcceptPage [write] => page*
ssm-contacts:ActivateContactChannel [write] => contactchannel*
ssm-contacts:AssociateContact [permissions-management] => contact*
ssm-contacts:CreateContact [write] => *,contact*
ssm-contacts:CreateContactChannel [write] => contact*
ssm-contacts:DeactivateContactChannel [write] => contactchannel*
ssm-contacts:DeleteContact [write] => contact*
ssm-contacts:DeleteContactChannel [write] => contactchannel*
ssm-contacts:DescribeEngagement [read] => engagement*
ssm-contacts:DescribePage [read] => page*
ssm-contacts:GetContact [read] => contact*
ssm-contacts:GetContactChannel [read] => contactchannel*
ssm-contacts:GetContactPolicy [read] => contact*
ssm-contacts:ListContactChannels [list] => contact*
ssm-contacts:ListContacts [list] => *
ssm-contacts:ListEngagements [list] => *
ssm-contacts:ListPageReceipts [list] => page*
ssm-contacts:ListPagesByContact [list] => contact*
ssm-contacts:ListPagesByEngagement [list] => engagement*
ssm-contacts:ListTagsForResource [read] => contact*
ssm-contacts:PutContactPolicy [write] => contact*
ssm-contacts:SendActivationCode [write] => contactchannel*
ssm-contacts:StartEngagement [write] => contact*
ssm-contacts:StopEngagement [write] => engagement*
ssm-contacts:TagResource [tagging] => *,contact*
ssm-contacts:UntagResource [tagging] => *,contact*
ssm-contacts:UpdateContact [write] => contact*
ssm-contacts:UpdateContactChannel [write] => contactchannel*
ssm-guiconnect:CancelConnection [write] => *
ssm-guiconnect:GetConnection [read] => *
ssm-guiconnect:StartConnection [write] => *
ssm-incidents:CreateReplicationSet [write] => *
ssm-incidents:CreateResponsePlan [write] => *
ssm-incidents:CreateTimelineEvent [write] => incident-record*,response-plan*
ssm-incidents:DeleteIncidentRecord [write] => incident-record*
ssm-incidents:DeleteReplicationSet [write] => replication-set*
ssm-incidents:DeleteResourcePolicy [permissions-management] => response-plan*
ssm-incidents:DeleteResponsePlan [write] => response-plan*
ssm-incidents:DeleteTimelineEvent [write] => incident-record*
ssm-incidents:GetIncidentRecord [read] => incident-record*,response-plan*
ssm-incidents:GetReplicationSet [read] => replication-set*
ssm-incidents:GetResourcePolicies [read] => response-plan*
ssm-incidents:GetResponsePlan [read] => response-plan*
ssm-incidents:GetTimelineEvent [read] => incident-record*,response-plan*
ssm-incidents:ListIncidentRecords [list] => *
ssm-incidents:ListRelatedItems [list] => incident-record*,response-plan*
ssm-incidents:ListReplicationSets [list] => *
ssm-incidents:ListResponsePlans [list] => *
ssm-incidents:ListTagsForResource [read] => incident-record,response-plan
ssm-incidents:ListTimelineEvents [list] => incident-record*,response-plan*
ssm-incidents:PutResourcePolicy [permissions-management] => response-plan*
ssm-incidents:StartIncident [write] => response-plan*
ssm-incidents:TagResource [tagging] => *,incident-record,response-plan
ssm-incidents:UntagResource [tagging] => *,incident-record,response-plan
ssm-incidents:UpdateDeletionProtection [write] => replication-set*
ssm-incidents:UpdateIncidentRecord [write] => incident-record*,response-plan*
ssm-incidents:UpdateRelatedItems [write] => incident-record*,response-plan*
ssm-incidents:UpdateReplicationSet [write] => replication-set*
ssm-incidents:UpdateResponsePlan [write] => *,response-plan*
ssm-incidents:UpdateTimelineEvent [write] => incident-record*,response-plan*
ssmmessages:CreateControlChannel [write] => *
ssmmessages:CreateDataChannel [write] => *
ssmmessages:OpenControlChannel [write] => *
ssmmessages:OpenDataChannel [write] => *
sso:AssociateDirectory [write] => *
sso:AssociateProfile [write] => *
sso:AttachCustomerManagedPolicyReferenceToPermissionSet [permissions-management] => Instance*,PermissionSet*
sso:AttachManagedPolicyToPermissionSet [permissions-management] => Instance*,PermissionSet*
sso:CreateAccountAssignment [write] => Account*,Instance*,PermissionSet*
sso:CreateApplicationInstance [write] => *
sso:CreateApplicationInstanceCertificate [write] => *
sso:CreateInstanceAccessControlAttributeConfiguration [write] => Instance*
sso:CreateManagedApplicationInstance [write] => *
sso:CreatePermissionSet [write] => *,Instance*
sso:CreateProfile [write] => *
sso:CreateTrust [write] => *
sso:DeleteAccountAssignment [write] => Account*,Instance*,PermissionSet*
sso:DeleteApplicationInstance [write] => *
sso:DeleteApplicationInstanceCertificate [write] => *
sso:DeleteInlinePolicyFromPermissionSet [write] => Instance*,PermissionSet*
sso:DeleteInstanceAccessControlAttributeConfiguration [write] => Instance*
sso:DeleteManagedApplicationInstance [write] => *
sso:DeletePermissionSet [write] => Instance*,PermissionSet*
sso:DeletePermissionsBoundaryFromPermissionSet [permissions-management] => Instance*,PermissionSet*
sso:DeletePermissionsPolicy [permissions-management] => *
sso:DeleteProfile [write] => *
sso:DescribeAccountAssignmentCreationStatus [read] => Instance*
sso:DescribeAccountAssignmentDeletionStatus [read] => Instance*
sso:DescribeInstanceAccessControlAttributeConfiguration [read] => Instance*
sso:DescribePermissionSet [read] => Instance*,PermissionSet*
sso:DescribePermissionSetProvisioningStatus [read] => Instance*
sso:DescribePermissionsPolicies [read] => *
sso:DescribeRegisteredRegions [read] => *
sso:DetachCustomerManagedPolicyReferenceFromPermissionSet [permissions-management] => Instance*,PermissionSet*
sso:DetachManagedPolicyFromPermissionSet [permissions-management] => Instance*,PermissionSet*
sso:DisassociateDirectory [write] => *
sso:DisassociateProfile [write] => *
sso:GetApplicationInstance [read] => *
sso:GetApplicationTemplate [read] => *
sso:GetInlinePolicyForPermissionSet [read] => Instance*,PermissionSet*
sso:GetManagedApplicationInstance [read] => *
sso:GetMfaDeviceManagementForDirectory [read] => *
sso:GetPermissionSet [read] => *
sso:GetPermissionsBoundaryForPermissionSet [read] => Instance*,PermissionSet*
sso:GetPermissionsPolicy [read] => *
sso:GetProfile [read] => *
sso:GetSSOStatus [read] => *
sso:GetSharedSsoConfiguration [read] => *
sso:GetSsoConfiguration [read] => *
sso:GetTrust [read] => *
sso:ImportApplicationInstanceServiceProviderMetadata [write] => *
sso:ListAccountAssignmentCreationStatus [list] => Instance*
sso:ListAccountAssignmentDeletionStatus [list] => Instance*
sso:ListAccountAssignments [list] => Account*,Instance*,PermissionSet*
sso:ListAccountsForProvisionedPermissionSet [list] => Instance*,PermissionSet*
sso:ListApplicationInstanceCertificates [read] => *
sso:ListApplicationInstances [list] => *
sso:ListApplicationTemplates [list] => *
sso:ListApplications [list] => *
sso:ListCustomerManagedPolicyReferencesInPermissionSet [list] => Instance*,PermissionSet*
sso:ListDirectoryAssociations [read] => *
sso:ListInstances [list] => *
sso:ListManagedPoliciesInPermissionSet [list] => Instance*,PermissionSet*
sso:ListPermissionSetProvisioningStatus [list] => Instance*
sso:ListPermissionSets [list] => Instance*
sso:ListPermissionSetsProvisionedToAccount [list] => Account*,Instance*
sso:ListProfileAssociations [read] => *
sso:ListProfiles [list] => *
sso:ListTagsForResource [read] => Instance*,PermissionSet*
sso:ProvisionPermissionSet [write] => Account*,Instance*,PermissionSet*
sso:PutInlinePolicyToPermissionSet [write] => Instance*,PermissionSet*
sso:PutMfaDeviceManagementForDirectory [write] => *
sso:PutPermissionsBoundaryToPermissionSet [permissions-management] => Instance*,PermissionSet*
sso:PutPermissionsPolicy [permissions-management] => *
sso:SearchGroups [read] => *
sso:SearchUsers [read] => *
sso:StartSSO [write] => *
sso:TagResource [tagging] => *,Instance*,PermissionSet*
sso:UntagResource [tagging] => *,Instance*,PermissionSet*
sso:UpdateApplicationInstanceActiveCertificate [write] => *
sso:UpdateApplicationInstanceDisplayData [write] => *
sso:UpdateApplicationInstanceResponseConfiguration [write] => *
sso:UpdateApplicationInstanceResponseSchemaConfiguration [write] => *
sso:UpdateApplicationInstanceSecurityConfiguration [write] => *
sso:UpdateApplicationInstanceServiceProviderConfiguration [write] => *
sso:UpdateApplicationInstanceStatus [write] => *
sso:UpdateDirectoryAssociation [write] => *
sso:UpdateInstanceAccessControlAttributeConfiguration [write] => Instance*
sso:UpdateManagedApplicationInstanceStatus [write] => *
sso:UpdatePermissionSet [permissions-management] => Instance*,PermissionSet*
sso:UpdateProfile [write] => *
sso:UpdateSSOConfiguration [write] => *
sso:UpdateTrust [write] => *
sso-directory:AddMemberToGroup [write] => *
sso-directory:CompleteVirtualMfaDeviceRegistration [write] => *
sso-directory:CompleteWebAuthnDeviceRegistration [write] => *
sso-directory:CreateAlias [write] => *
sso-directory:CreateBearerToken [write] => *
sso-directory:CreateExternalIdPConfigurationForDirectory [write] => *
sso-directory:CreateGroup [write] => *
sso-directory:CreateProvisioningTenant [write] => *
sso-directory:CreateUser [write] => *
sso-directory:DeleteBearerToken [write] => *
sso-directory:DeleteExternalIdPCertificate [write] => *
sso-directory:DeleteExternalIdPConfigurationForDirectory [write] => *
sso-directory:DeleteGroup [write] => *
sso-directory:DeleteMfaDeviceForUser [write] => *
sso-directory:DeleteProvisioningTenant [write] => *
sso-directory:DeleteUser [write] => *
sso-directory:DescribeDirectory [read] => *
sso-directory:DescribeGroup [read] => *
sso-directory:DescribeGroups [read] => *
sso-directory:DescribeProvisioningTenant [read] => *
sso-directory:DescribeUser [read] => *
sso-directory:DescribeUserByUniqueAttribute [read] => *
sso-directory:DescribeUsers [read] => *
sso-directory:DisableExternalIdPConfigurationForDirectory [write] => *
sso-directory:DisableUser [write] => *
sso-directory:EnableExternalIdPConfigurationForDirectory [write] => *
sso-directory:EnableUser [write] => *
sso-directory:GetAWSSPConfigurationForDirectory [read] => *
sso-directory:GetUserPoolInfo [read] => *
sso-directory:ImportExternalIdPCertificate [write] => *
sso-directory:IsMemberInGroup [read] => *
sso-directory:ListBearerTokens [read] => *
sso-directory:ListExternalIdPCertificates [read] => *
sso-directory:ListExternalIdPConfigurationsForDirectory [read] => *
sso-directory:ListGroupsForMember [read] => *
sso-directory:ListGroupsForUser [read] => *
sso-directory:ListMembersInGroup [read] => *
sso-directory:ListMfaDevicesForUser [read] => *
sso-directory:ListProvisioningTenants [read] => *
sso-directory:RemoveMemberFromGroup [write] => *
sso-directory:SearchGroups [read] => *
sso-directory:SearchUsers [read] => *
sso-directory:StartVirtualMfaDeviceRegistration [write] => *
sso-directory:StartWebAuthnDeviceRegistration [write] => *
sso-directory:UpdateExternalIdPConfigurationForDirectory [write] => *
sso-directory:UpdateGroup [write] => *
sso-directory:UpdateGroupDisplayName [write] => *
sso-directory:UpdateMfaDeviceForUser [write] => *
sso-directory:UpdatePassword [write] => *
sso-directory:UpdateUser [write] => *
sso-directory:UpdateUserName [write] => *
sso-directory:VerifyEmail [write] => *
states:CreateActivity [write] => *,activity*
states:CreateStateMachine [write] => *,statemachine*
states:DeleteActivity [write] => activity*
states:DeleteStateMachine [write] => statemachine*
states:DescribeActivity [read] => activity*
states:DescribeExecution [read] => execution*
states:DescribeStateMachine [read] => statemachine*
states:DescribeStateMachineForExecution [read] => execution*
states:GetActivityTask [write] => activity*
states:GetExecutionHistory [read] => execution*
states:ListActivities [list] => *
states:ListExecutions [read] => statemachine*
states:ListStateMachines [list] => *
states:ListTagsForResource [read] => activity,statemachine
states:SendTaskFailure [write] => *
states:SendTaskHeartbeat [write] => *
states:SendTaskSuccess [write] => *
states:StartExecution [write] => statemachine*
states:StartSyncExecution [write] => statemachine*
states:StopExecution [write] => execution*
states:TagResource [tagging] => *,activity,statemachine
states:UntagResource [tagging] => *,activity,statemachine
states:UpdateStateMachine [write] => *,statemachine*
storagegateway:ActivateGateway [write] => *
storagegateway:AddCache [write] => gateway*
storagegateway:AddTagsToResource [tagging] => *,gateway,share,tape,volume
storagegateway:AddUploadBuffer [write] => gateway*
storagegateway:AddWorkingStorage [write] => gateway*
storagegateway:AssignTapePool [write] => tape*,tapepool*
storagegateway:AssociateFileSystem [write] => *,gateway*
storagegateway:AttachVolume [write] => gateway*,volume*
storagegateway:BypassGovernanceRetention [write] => tapepool*
storagegateway:CancelArchival [write] => gateway*,tape*
storagegateway:CancelRetrieval [write] => gateway*,tape*
storagegateway:CreateCachediSCSIVolume [write] => *,gateway*,volume*
storagegateway:CreateNFSFileShare [write] => *,gateway*
storagegateway:CreateSMBFileShare [write] => *,gateway*
storagegateway:CreateSnapshot [write] => *,volume*
storagegateway:CreateSnapshotFromVolumeRecoveryPoint [write] => *,volume*
storagegateway:CreateStorediSCSIVolume [write] => *,gateway*
storagegateway:CreateTapePool [write] => *
storagegateway:CreateTapeWithBarcode [write] => *,gateway*,tapepool*
storagegateway:CreateTapes [write] => *,gateway*,tapepool*
storagegateway:DeleteAutomaticTapeCreationPolicy [write] => gateway*
storagegateway:DeleteBandwidthRateLimit [write] => gateway*
storagegateway:DeleteChapCredentials [write] => target*
storagegateway:DeleteFileShare [write] => share*
storagegateway:DeleteGateway [write] => gateway*
storagegateway:DeleteSnapshotSchedule [write] => volume*
storagegateway:DeleteTape [write] => gateway*,tape*
storagegateway:DeleteTapeArchive [write] => *
storagegateway:DeleteTapePool [write] => tapepool*
storagegateway:DeleteVolume [write] => volume*
storagegateway:DescribeAvailabilityMonitorTest [read] => gateway*
storagegateway:DescribeBandwidthRateLimit [read] => gateway*
storagegateway:DescribeBandwidthRateLimitSchedule [read] => gateway*
storagegateway:DescribeCache [read] => gateway*
storagegateway:DescribeCachediSCSIVolumes [read] => volume*
storagegateway:DescribeChapCredentials [read] => target*
storagegateway:DescribeFileSystemAssociations [read] => fs-association*
storagegateway:DescribeGatewayInformation [read] => gateway*
storagegateway:DescribeMaintenanceStartTime [read] => gateway*
storagegateway:DescribeNFSFileShares [read] => share*
storagegateway:DescribeSMBFileShares [read] => share*
storagegateway:DescribeSMBSettings [read] => gateway*
storagegateway:DescribeSnapshotSchedule [read] => volume*
storagegateway:DescribeStorediSCSIVolumes [read] => volume*
storagegateway:DescribeTapeArchives [read] => *
storagegateway:DescribeTapeRecoveryPoints [read] => gateway*
storagegateway:DescribeTapes [read] => gateway*
storagegateway:DescribeUploadBuffer [read] => gateway*
storagegateway:DescribeVTLDevices [read] => gateway*
storagegateway:DescribeWorkingStorage [read] => gateway*
storagegateway:DetachVolume [write] => volume*
storagegateway:DisableGateway [write] => gateway*
storagegateway:DisassociateFileSystem [write] => fs-association*
storagegateway:JoinDomain [write] => gateway*
storagegateway:ListAutomaticTapeCreationPolicies [list] => gateway*
storagegateway:ListFileShares [list] => gateway*
storagegateway:ListFileSystemAssociations [list] => gateway*
storagegateway:ListGateways [list] => *
storagegateway:ListLocalDisks [list] => gateway*
storagegateway:ListTagsForResource [list] => gateway,share,tape,volume
storagegateway:ListTapePools [list] => tapepool*
storagegateway:ListTapes [list] => tape*
storagegateway:ListVolumeInitiators [list] => volume*
storagegateway:ListVolumeRecoveryPoints [list] => gateway*
storagegateway:ListVolumes [list] => gateway*
storagegateway:NotifyWhenUploaded [write] => share*
storagegateway:RefreshCache [write] => share*
storagegateway:RemoveTagsFromResource [tagging] => *,gateway,share,tape,volume
storagegateway:ResetCache [write] => gateway*
storagegateway:RetrieveTapeArchive [write] => gateway*,tape*
storagegateway:RetrieveTapeRecoveryPoint [write] => gateway*,tape*
storagegateway:SetLocalConsolePassword [write] => gateway*
storagegateway:SetSMBGuestPassword [write] => gateway*
storagegateway:ShutdownGateway [write] => gateway*
storagegateway:StartAvailabilityMonitorTest [write] => gateway*
storagegateway:StartGateway [write] => gateway*
storagegateway:UpdateAutomaticTapeCreationPolicy [write] => gateway*,tapepool*
storagegateway:UpdateBandwidthRateLimit [write] => gateway*
storagegateway:UpdateBandwidthRateLimitSchedule [write] => gateway*
storagegateway:UpdateChapCredentials [write] => target*
storagegateway:UpdateFileSystemAssociation [write] => fs-association*
storagegateway:UpdateGatewayInformation [write] => gateway*
storagegateway:UpdateGatewaySoftwareNow [write] => gateway*
storagegateway:UpdateMaintenanceStartTime [write] => gateway*
storagegateway:UpdateNFSFileShare [write] => share*
storagegateway:UpdateSMBFileShare [write] => share*
storagegateway:UpdateSMBFileShareVisibility [write] => gateway*
storagegateway:UpdateSMBLocalGroups [write] => gateway*
storagegateway:UpdateSMBSecurityStrategy [write] => gateway*
storagegateway:UpdateSnapshotSchedule [write] => *,volume*
storagegateway:UpdateVTLDeviceType [write] => device*
sts:AssumeRole [write] => *,role*
sts:AssumeRoleWithSAML [write] => *,role*
sts:AssumeRoleWithWebIdentity [write] => *,role*
sts:DecodeAuthorizationMessage [write] => *
sts:GetAccessKeyInfo [read] => *
sts:GetCallerIdentity [read] => *
sts:GetFederationToken [read] => *,user
sts:GetServiceBearerToken [read] => *
sts:GetSessionToken [read] => *
sts:SetSourceIdentity [write] => *,role,user
sts:TagSession [tagging] => *,role,user
sumerian:Login [write] => *
sumerian:ViewRelease [read] => project*
support:AddAttachmentsToSet [write] => *
support:AddCommunicationToCase [write] => *
support:CreateCase [write] => *
support:DescribeAttachment [read] => *
support:DescribeCaseAttributes [read] => *
support:DescribeCases [read] => *
support:DescribeCommunications [read] => *
support:DescribeIssueTypes [read] => *
support:DescribeServices [read] => *
support:DescribeSeverityLevels [read] => *
support:DescribeSupportLevel [read] => *
support:DescribeTrustedAdvisorCheckRefreshStatuses [read] => *
support:DescribeTrustedAdvisorCheckResult [read] => *
support:DescribeTrustedAdvisorCheckSummaries [read] => *
support:DescribeTrustedAdvisorChecks [read] => *
support:InitiateCallForCase [write] => *
support:InitiateChatForCase [write] => *
support:PutCaseAttributes [write] => *
support:RateCaseCommunication [write] => *
support:RefreshTrustedAdvisorCheck [write] => *
support:ResolveCase [write] => *
support:SearchForCases [read] => *
supportplans:GetSupportPlan [read] => *
supportplans:GetSupportPlanUpdateStatus [read] => *
supportplans:StartSupportPlanUpdate [write] => *
sustainability:GetCarbonFootprintSummary [read] => *
swf:CancelTimer [write] => domain*
swf:CancelWorkflowExecution [write] => domain*
swf:CompleteWorkflowExecution [write] => domain*
swf:ContinueAsNewWorkflowExecution [write] => domain*
swf:CountClosedWorkflowExecutions [read] => *,domain*
swf:CountOpenWorkflowExecutions [read] => *,domain*
swf:CountPendingActivityTasks [read] => *,domain*
swf:CountPendingDecisionTasks [read] => *,domain*
swf:DeprecateActivityType [write] => *,domain*
swf:DeprecateDomain [write] => domain*
swf:DeprecateWorkflowType [write] => *,domain*
swf:DescribeActivityType [read] => *,domain*
swf:DescribeDomain [read] => domain*
swf:DescribeWorkflowExecution [read] => domain*
swf:DescribeWorkflowType [read] => *,domain*
swf:FailWorkflowExecution [write] => domain*
swf:GetWorkflowExecutionHistory [read] => domain*
swf:ListActivityTypes [list] => domain*
swf:ListClosedWorkflowExecutions [list] => *,domain*
swf:ListDomains [list] => *
swf:ListOpenWorkflowExecutions [list] => *,domain*
swf:ListTagsForResource [list] => domain
swf:ListWorkflowTypes [list] => domain*
swf:PollForActivityTask [write] => *,domain*
swf:PollForDecisionTask [write] => *,domain*
swf:RecordActivityTaskHeartbeat [write] => domain*
swf:RecordMarker [write] => domain*
swf:RegisterActivityType [write] => *,domain*
swf:RegisterDomain [write] => *
swf:RegisterWorkflowType [write] => *,domain*
swf:RequestCancelActivityTask [write] => domain*
swf:RequestCancelExternalWorkflowExecution [write] => domain*
swf:RequestCancelWorkflowExecution [write] => domain*
swf:RespondActivityTaskCanceled [write] => domain*
swf:RespondActivityTaskCompleted [write] => *,domain*
swf:RespondActivityTaskFailed [write] => domain*
swf:RespondDecisionTaskCompleted [write] => domain*
swf:ScheduleActivityTask [write] => domain*
swf:SignalExternalWorkflowExecution [write] => domain*
swf:SignalWorkflowExecution [write] => domain*
swf:StartChildWorkflowExecution [write] => domain*
swf:StartTimer [write] => domain*
swf:StartWorkflowExecution [write] => *,domain*
swf:TagResource [tagging] => *,domain
swf:TerminateWorkflowExecution [write] => domain*
swf:UndeprecateActivityType [write] => *,domain*
swf:UndeprecateDomain [write] => domain*
swf:UndeprecateWorkflowType [write] => *,domain*
swf:UntagResource [tagging] => *,domain
synthetics:AssociateResource [write] => *,group*
synthetics:CreateCanary [write] => *
synthetics:CreateGroup [write] => *
synthetics:DeleteCanary [write] => *,canary*
synthetics:DeleteGroup [write] => *,group*
synthetics:DescribeCanaries [read] => *
synthetics:DescribeCanariesLastRun [read] => *
synthetics:DescribeRuntimeVersions [read] => *
synthetics:DisassociateResource [write] => *,group*
synthetics:GetCanary [read] => *,canary*
synthetics:GetCanaryRuns [read] => *,canary*
synthetics:GetGroup [read] => *,group*
synthetics:ListAssociatedGroups [list] => *,canary*
synthetics:ListGroupResources [list] => *,group*
synthetics:ListGroups [list] => *
synthetics:ListTagsForResource [read] => canary,group
synthetics:StartCanary [write] => *,canary*
synthetics:StopCanary [write] => *,canary*
synthetics:TagResource [tagging] => *,canary,group
synthetics:UntagResource [tagging] => *,canary,group
synthetics:UpdateCanary [write] => *,canary*
tag:DescribeReportCreation [read] => *
tag:GetComplianceSummary [read] => *
tag:GetResources [read] => *
tag:GetTagKeys [read] => *
tag:GetTagValues [read] => *
tag:StartReportCreation [write] => *
tag:TagResources [tagging] => *
tag:UntagResources [tagging] => *
tax:GetExemptions [read] => *
tax:UpdateExemptions [write] => *
textract:AnalyzeDocument [read] => *
textract:AnalyzeExpense [read] => *
textract:AnalyzeID [read] => *
textract:DetectDocumentText [read] => *
textract:GetDocumentAnalysis [read] => *
textract:GetDocumentTextDetection [read] => *
textract:GetExpenseAnalysis [read] => *
textract:StartDocumentAnalysis [write] => *
textract:StartDocumentTextDetection [write] => *
textract:StartExpenseAnalysis [write] => *
timestream:CancelQuery [write] => *
timestream:CreateDatabase [write] => *,database*
timestream:CreateScheduledQuery [write] => *
timestream:CreateTable [write] => *,table*
timestream:DeleteDatabase [write] => database*
timestream:DeleteScheduledQuery [write] => scheduled-query*
timestream:DeleteTable [write] => table*
timestream:DescribeDatabase [read] => database*
timestream:DescribeEndpoints [list] => *
timestream:DescribeScheduledQuery [read] => scheduled-query*
timestream:DescribeTable [read] => table*
timestream:ExecuteScheduledQuery [write] => scheduled-query*
timestream:ListDatabases [list] => *
timestream:ListMeasures [list] => table*
timestream:ListScheduledQueries [list] => *
timestream:ListTables [list] => database*
timestream:ListTagsForResource [read] => database*,scheduled-query*,table*
timestream:PrepareQuery [read] => table*
timestream:Select [read] => table*
timestream:SelectValues [read] => *
timestream:TagResource [tagging] => *,database*,scheduled-query*,table*
timestream:UntagResource [tagging] => *,database*,scheduled-query*,table*
timestream:UpdateDatabase [write] => database*
timestream:UpdateScheduledQuery [write] => scheduled-query*
timestream:UpdateTable [write] => table*
timestream:WriteRecords [write] => table*
tiros:CreateQuery [write] => *
tiros:ExtendQuery [write] => *
tiros:GetQueryAnswer [read] => *
tiros:GetQueryExplanation [read] => *
transcribe:CreateCallAnalyticsCategory [write] => *
transcribe:CreateLanguageModel [write] => *
transcribe:CreateMedicalVocabulary [write] => *
transcribe:CreateVocabulary [write] => *
transcribe:CreateVocabularyFilter [write] => *
transcribe:DeleteCallAnalyticsCategory [write] => *
transcribe:DeleteCallAnalyticsJob [write] => *
transcribe:DeleteLanguageModel [write] => languagemodel*
transcribe:DeleteMedicalTranscriptionJob [write] => medicaltranscriptionjob*
transcribe:DeleteMedicalVocabulary [write] => medicalvocabulary*
transcribe:DeleteTranscriptionJob [write] => transcriptionjob*
transcribe:DeleteVocabulary [write] => vocabulary*
transcribe:DeleteVocabularyFilter [write] => vocabularyfilter*
transcribe:DescribeLanguageModel [read] => languagemodel*
transcribe:GetCallAnalyticsCategory [read] => *
transcribe:GetCallAnalyticsJob [read] => *
transcribe:GetMedicalTranscriptionJob [read] => medicaltranscriptionjob*
transcribe:GetMedicalVocabulary [read] => medicalvocabulary*
transcribe:GetTranscriptionJob [read] => transcriptionjob*
transcribe:GetVocabulary [read] => vocabulary*
transcribe:GetVocabularyFilter [read] => vocabularyfilter*
transcribe:ListCallAnalyticsCategories [list] => *
transcribe:ListCallAnalyticsJobs [list] => *
transcribe:ListLanguageModels [list] => *
transcribe:ListMedicalTranscriptionJobs [list] => *
transcribe:ListMedicalVocabularies [list] => *
transcribe:ListTagsForResource [read] => *
transcribe:ListTranscriptionJobs [list] => *
transcribe:ListVocabularies [list] => *
transcribe:ListVocabularyFilters [list] => *
transcribe:StartCallAnalyticsJob [write] => *
transcribe:StartMedicalStreamTranscription [write] => *
transcribe:StartMedicalStreamTranscriptionWebSocket [write] => *
transcribe:StartMedicalTranscriptionJob [write] => *
transcribe:StartStreamTranscription [write] => *
transcribe:StartStreamTranscriptionWebSocket [write] => *
transcribe:StartTranscriptionJob [write] => *
transcribe:TagResource [tagging] => *
transcribe:UntagResource [tagging] => *
transcribe:UpdateCallAnalyticsCategory [write] => *
transcribe:UpdateMedicalVocabulary [write] => medicalvocabulary*
transcribe:UpdateVocabulary [write] => vocabulary*
transcribe:UpdateVocabularyFilter [write] => vocabularyfilter*
transfer:CreateAccess [write] => server*
transfer:CreateAgreement [write] => *,server*
transfer:CreateConnector [write] => *
transfer:CreateProfile [write] => *
transfer:CreateServer [write] => *
transfer:CreateUser [write] => *,server*
transfer:CreateWorkflow [write] => *
transfer:DeleteAccess [write] => server*
transfer:DeleteAgreement [write] => agreement*
transfer:DeleteCertificate [write] => certificate*
transfer:DeleteConnector [write] => connector*
transfer:DeleteHostKey [write] => host-key*
transfer:DeleteProfile [write] => profile*
transfer:DeleteServer [write] => server*
transfer:DeleteSshPublicKey [write] => user*
transfer:DeleteUser [write] => user*
transfer:DeleteWorkflow [write] => workflow*
transfer:DescribeAccess [read] => server*
transfer:DescribeAgreement [read] => agreement*
transfer:DescribeCertificate [read] => certificate*
transfer:DescribeConnector [read] => connector*
transfer:DescribeExecution [read] => workflow*
transfer:DescribeHostKey [read] => host-key*
transfer:DescribeProfile [read] => profile*
transfer:DescribeSecurityPolicy [read] => *
transfer:DescribeServer [read] => server*
transfer:DescribeUser [read] => user*
transfer:DescribeWorkflow [read] => workflow*
transfer:ImportCertificate [write] => *
transfer:ImportHostKey [write] => *,server*
transfer:ImportSshPublicKey [write] => user*
transfer:ListAccesses [read] => server*
transfer:ListAgreements [read] => server*
transfer:ListCertificates [read] => *
transfer:ListConnectors [read] => *
transfer:ListExecutions [read] => workflow*
transfer:ListHostKeys [read] => server*
transfer:ListProfiles [read] => *
transfer:ListSecurityPolicies [list] => *
transfer:ListServers [list] => *
transfer:ListTagsForResource [read] => agreement,certificate,connector,host-key,profile,server,user,workflow
transfer:ListUsers [list] => server*
transfer:ListWorkflows [list] => *
transfer:SendWorkflowStepState [write] => workflow*
transfer:StartFileTransfer [write] => connector*
transfer:StartServer [write] => server*
transfer:StopServer [write] => server*
transfer:TagResource [tagging] => *,agreement,certificate,connector,host-key,profile,server,user,workflow
transfer:TestIdentityProvider [read] => user*
transfer:UntagResource [tagging] => *,agreement,certificate,connector,host-key,profile,server,user,workflow
transfer:UpdateAccess [write] => *
transfer:UpdateAgreement [write] => agreement*
transfer:UpdateCertificate [write] => certificate*
transfer:UpdateConnector [write] => connector*
transfer:UpdateHostKey [write] => host-key*
transfer:UpdateProfile [write] => profile*
transfer:UpdateServer [write] => server*
transfer:UpdateUser [write] => user*
translate:CreateParallelData [write] => parallel-data
translate:DeleteParallelData [write] => parallel-data
translate:DeleteTerminology [write] => terminology
translate:DescribeTextTranslationJob [read] => *
translate:GetParallelData [read] => parallel-data
translate:GetTerminology [read] => terminology
translate:ImportTerminology [write] => terminology
translate:ListLanguages [list] => *
translate:ListParallelData [list] => *
translate:ListTerminologies [list] => *
translate:ListTextTranslationJobs [list] => *
translate:StartTextTranslationJob [write] => parallel-data,terminology
translate:StopTextTranslationJob [write] => *
translate:TranslateText [read] => terminology
translate:UpdateParallelData [write] => parallel-data
trustedadvisor:DeleteNotificationConfigurationForDelegatedAdmin [write] => *
trustedadvisor:DescribeAccount [read] => *
trustedadvisor:DescribeAccountAccess [read] => *
trustedadvisor:DescribeCheckItems [read] => checks*
trustedadvisor:DescribeCheckRefreshStatuses [read] => checks*
trustedadvisor:DescribeCheckSummaries [read] => checks*
trustedadvisor:DescribeChecks [read] => *
trustedadvisor:DescribeNotificationConfigurations [read] => *
trustedadvisor:DescribeNotificationPreferences [read] => *
trustedadvisor:DescribeOrganization [read] => *
trustedadvisor:DescribeOrganizationAccounts [read] => *
trustedadvisor:DescribeReports [read] => *
trustedadvisor:DescribeRisk [read] => *
trustedadvisor:DescribeRiskResources [read] => *
trustedadvisor:DescribeRisks [read] => *
trustedadvisor:DescribeServiceMetadata [read] => *
trustedadvisor:DownloadRisk [read] => *
trustedadvisor:ExcludeCheckItems [write] => checks*
trustedadvisor:GenerateReport [write] => *
trustedadvisor:IncludeCheckItems [write] => checks*
trustedadvisor:ListAccountsForParent [read] => *
trustedadvisor:ListOrganizationalUnitsForParent [read] => *
trustedadvisor:ListRoots [read] => *
trustedadvisor:RefreshCheck [write] => checks*
trustedadvisor:SetAccountAccess [write] => *
trustedadvisor:SetOrganizationAccess [write] => *
trustedadvisor:UpdateNotificationConfigurations [write] => *
trustedadvisor:UpdateNotificationPreferences [write] => *
trustedadvisor:UpdateRiskStatus [write] => *
vendor-insights:ActivateSecurityProfile [write] => SecurityProfile*
vendor-insights:AssociateDataSource [write] => SecurityProfile*
vendor-insights:CreateDataSource [write] => *
vendor-insights:CreateSecurityProfile [write] => *
vendor-insights:DeactivateSecurityProfile [write] => SecurityProfile*
vendor-insights:DeleteDataSource [write] => DataSource*
vendor-insights:DisassociateDataSource [write] => SecurityProfile*
vendor-insights:GetDataSource [read] => DataSource*
vendor-insights:GetEntitledSecurityProfileSnapshot [read] => SecurityProfile*
vendor-insights:GetProfileAccessTerms [read] => *
vendor-insights:GetSecurityProfile [read] => SecurityProfile*
vendor-insights:GetSecurityProfileSnapshot [read] => SecurityProfile*
vendor-insights:ListDataSources [list] => *
vendor-insights:ListEntitledSecurityProfileSnapshots [list] => SecurityProfile*
vendor-insights:ListEntitledSecurityProfiles [list] => *
vendor-insights:ListSecurityProfileSnapshots [list] => SecurityProfile*
vendor-insights:ListSecurityProfiles [list] => *
vendor-insights:UpdateSecurityProfile [write] => SecurityProfile*
voiceid:CreateDomain [write] => *
voiceid:DeleteDomain [write] => domain*
voiceid:DeleteFraudster [write] => domain*
voiceid:DeleteSpeaker [write] => domain*
voiceid:DescribeComplianceConsent [read] => *
voiceid:DescribeDomain [read] => domain*
voiceid:DescribeFraudster [read] => domain*
voiceid:DescribeFraudsterRegistrationJob [read] => domain*
voiceid:DescribeSpeaker [read] => domain*
voiceid:DescribeSpeakerEnrollmentJob [read] => domain*
voiceid:EvaluateSession [write] => domain*
voiceid:ListDomains [list] => *
voiceid:ListFraudsterRegistrationJobs [list] => domain*
voiceid:ListSpeakerEnrollmentJobs [list] => domain*
voiceid:ListSpeakers [list] => domain*
voiceid:ListTagsForResource [read] => domain
voiceid:OptOutSpeaker [write] => domain*
voiceid:RegisterComplianceConsent [write] => *
voiceid:StartFraudsterRegistrationJob [write] => domain*
voiceid:StartSpeakerEnrollmentJob [write] => domain*
voiceid:TagResource [tagging] => *,domain
voiceid:UntagResource [tagging] => *,domain
voiceid:UpdateDomain [write] => domain*
waf:CreateByteMatchSet [write] => bytematchset*
waf:CreateGeoMatchSet [write] => geomatchset*
waf:CreateIPSet [write] => ipset*
waf:CreateRateBasedRule [write] => *,ratebasedrule*
waf:CreateRegexMatchSet [write] => regexmatchset*
waf:CreateRegexPatternSet [write] => regexpatternset*
waf:CreateRule [write] => *,rule*
waf:CreateRuleGroup [write] => *,rulegroup*
waf:CreateSizeConstraintSet [write] => sizeconstraintset*
waf:CreateSqlInjectionMatchSet [write] => sqlinjectionmatchset*
waf:CreateWebACL [permissions-management] => *,webacl*
waf:CreateWebACLMigrationStack [write] => webacl*
waf:CreateXssMatchSet [write] => xssmatchset*
waf:DeleteByteMatchSet [write] => bytematchset*
waf:DeleteGeoMatchSet [write] => geomatchset*
waf:DeleteIPSet [write] => ipset*
waf:DeleteLoggingConfiguration [write] => webacl*
waf:DeletePermissionPolicy [permissions-management] => rulegroup*
waf:DeleteRateBasedRule [write] => ratebasedrule*
waf:DeleteRegexMatchSet [write] => regexmatchset*
waf:DeleteRegexPatternSet [write] => regexpatternset*
waf:DeleteRule [write] => rule*
waf:DeleteRuleGroup [write] => rulegroup*
waf:DeleteSizeConstraintSet [write] => sizeconstraintset*
waf:DeleteSqlInjectionMatchSet [write] => sqlinjectionmatchset*
waf:DeleteWebACL [permissions-management] => webacl*
waf:DeleteXssMatchSet [write] => xssmatchset*
waf:GetByteMatchSet [read] => bytematchset*
waf:GetChangeToken [read] => *
waf:GetChangeTokenStatus [read] => *
waf:GetGeoMatchSet [read] => geomatchset*
waf:GetIPSet [read] => ipset*
waf:GetLoggingConfiguration [read] => webacl*
waf:GetPermissionPolicy [read] => rulegroup*
waf:GetRateBasedRule [read] => ratebasedrule*
waf:GetRateBasedRuleManagedKeys [read] => ratebasedrule*
waf:GetRegexMatchSet [read] => regexmatchset*
waf:GetRegexPatternSet [read] => regexpatternset*
waf:GetRule [read] => rule*
waf:GetRuleGroup [read] => rulegroup*
waf:GetSampledRequests [read] => rule,webacl
waf:GetSizeConstraintSet [read] => sizeconstraintset*
waf:GetSqlInjectionMatchSet [read] => sqlinjectionmatchset*
waf:GetWebACL [read] => webacl*
waf:GetXssMatchSet [read] => xssmatchset*
waf:ListActivatedRulesInRuleGroup [list] => *
waf:ListByteMatchSets [list] => *
waf:ListGeoMatchSets [list] => *
waf:ListIPSets [list] => *
waf:ListLoggingConfigurations [list] => *
waf:ListRateBasedRules [list] => *
waf:ListRegexMatchSets [list] => *
waf:ListRegexPatternSets [list] => *
waf:ListRuleGroups [list] => *
waf:ListRules [list] => *
waf:ListSizeConstraintSets [list] => *
waf:ListSqlInjectionMatchSets [list] => *
waf:ListSubscribedRuleGroups [list] => *
waf:ListTagsForResource [read] => ratebasedrule,rule,rulegroup,webacl
waf:ListWebACLs [list] => *
waf:ListXssMatchSets [list] => *
waf:PutLoggingConfiguration [write] => webacl*
waf:PutPermissionPolicy [permissions-management] => rulegroup*
waf:TagResource [tagging] => *,ratebasedrule,rule,rulegroup,webacl
waf:UntagResource [tagging] => *,ratebasedrule,rule,rulegroup,webacl
waf:UpdateByteMatchSet [write] => bytematchset*
waf:UpdateGeoMatchSet [write] => geomatchset*
waf:UpdateIPSet [write] => ipset*
waf:UpdateRateBasedRule [write] => ratebasedrule*
waf:UpdateRegexMatchSet [write] => regexmatchset*
waf:UpdateRegexPatternSet [write] => regexpatternset*
waf:UpdateRule [write] => rule*
waf:UpdateRuleGroup [write] => rulegroup*
waf:UpdateSizeConstraintSet [write] => sizeconstraintset*
waf:UpdateSqlInjectionMatchSet [write] => sqlinjectionmatchset*
waf:UpdateWebACL [permissions-management] => webacl*
waf:UpdateXssMatchSet [write] => xssmatchset*
waf-regional:AssociateWebACL [write] => loadbalancer/app/*,webacl*
waf-regional:CreateByteMatchSet [write] => bytematchset*
waf-regional:CreateGeoMatchSet [write] => geomatchset*
waf-regional:CreateIPSet [write] => ipset*
waf-regional:CreateRateBasedRule [write] => *,ratebasedrule*
waf-regional:CreateRegexMatchSet [write] => regexmatchset*
waf-regional:CreateRegexPatternSet [write] => regexpatternset*
waf-regional:CreateRule [write] => *,rule*
waf-regional:CreateRuleGroup [write] => *,rulegroup*
waf-regional:CreateSizeConstraintSet [write] => sizeconstraintset*
waf-regional:CreateSqlInjectionMatchSet [write] => sqlinjectionmatchset*
waf-regional:CreateWebACL [permissions-management] => *,webacl*
waf-regional:CreateWebACLMigrationStack [write] => webacl*
waf-regional:CreateXssMatchSet [write] => xssmatchset*
waf-regional:DeleteByteMatchSet [write] => bytematchset*
waf-regional:DeleteGeoMatchSet [write] => geomatchset*
waf-regional:DeleteIPSet [write] => ipset*
waf-regional:DeleteLoggingConfiguration [write] => webacl*
waf-regional:DeletePermissionPolicy [permissions-management] => rulegroup*
waf-regional:DeleteRateBasedRule [write] => ratebasedrule*
waf-regional:DeleteRegexMatchSet [write] => regexmatchset*
waf-regional:DeleteRegexPatternSet [write] => regexpatternset*
waf-regional:DeleteRule [write] => rule*
waf-regional:DeleteRuleGroup [write] => rulegroup*
waf-regional:DeleteSizeConstraintSet [write] => sizeconstraintset*
waf-regional:DeleteSqlInjectionMatchSet [write] => sqlinjectionmatchset*
waf-regional:DeleteWebACL [permissions-management] => webacl*
waf-regional:DeleteXssMatchSet [write] => xssmatchset*
waf-regional:DisassociateWebACL [write] => loadbalancer/app/*
waf-regional:GetByteMatchSet [read] => bytematchset*
waf-regional:GetChangeToken [read] => *
waf-regional:GetChangeTokenStatus [read] => *
waf-regional:GetGeoMatchSet [read] => geomatchset*
waf-regional:GetIPSet [read] => ipset*
waf-regional:GetLoggingConfiguration [read] => webacl*
waf-regional:GetPermissionPolicy [read] => rulegroup*
waf-regional:GetRateBasedRule [read] => ratebasedrule*
waf-regional:GetRateBasedRuleManagedKeys [read] => ratebasedrule*
waf-regional:GetRegexMatchSet [read] => regexmatchset*
waf-regional:GetRegexPatternSet [read] => regexpatternset*
waf-regional:GetRule [read] => rule*
waf-regional:GetRuleGroup [read] => rulegroup*
waf-regional:GetSampledRequests [read] => rule,webacl
waf-regional:GetSizeConstraintSet [read] => sizeconstraintset*
waf-regional:GetSqlInjectionMatchSet [read] => sqlinjectionmatchset*
waf-regional:GetWebACL [read] => webacl*
waf-regional:GetWebACLForResource [read] => loadbalancer/app/*
waf-regional:GetXssMatchSet [read] => xssmatchset*
waf-regional:ListActivatedRulesInRuleGroup [list] => *
waf-regional:ListByteMatchSets [list] => *
waf-regional:ListGeoMatchSets [list] => *
waf-regional:ListIPSets [list] => *
waf-regional:ListLoggingConfigurations [list] => *
waf-regional:ListRateBasedRules [list] => *
waf-regional:ListRegexMatchSets [list] => *
waf-regional:ListRegexPatternSets [list] => *
waf-regional:ListResourcesForWebACL [list] => webacl*
waf-regional:ListRuleGroups [list] => *
waf-regional:ListRules [list] => *
waf-regional:ListSizeConstraintSets [list] => *
waf-regional:ListSqlInjectionMatchSets [list] => *
waf-regional:ListSubscribedRuleGroups [list] => *
waf-regional:ListTagsForResource [read] => ratebasedrule,rule,rulegroup,webacl
waf-regional:ListWebACLs [list] => *
waf-regional:ListXssMatchSets [list] => *
waf-regional:PutLoggingConfiguration [write] => webacl*
waf-regional:PutPermissionPolicy [permissions-management] => rulegroup*
waf-regional:TagResource [tagging] => *,ratebasedrule,rule,rulegroup,webacl
waf-regional:UntagResource [tagging] => *,ratebasedrule,rule,rulegroup,webacl
waf-regional:UpdateByteMatchSet [write] => bytematchset*
waf-regional:UpdateGeoMatchSet [write] => geomatchset*
waf-regional:UpdateIPSet [write] => ipset*
waf-regional:UpdateRateBasedRule [write] => ratebasedrule*
waf-regional:UpdateRegexMatchSet [write] => regexmatchset*
waf-regional:UpdateRegexPatternSet [write] => regexpatternset*
waf-regional:UpdateRule [write] => rule*
waf-regional:UpdateRuleGroup [write] => rulegroup*
waf-regional:UpdateSizeConstraintSet [write] => sizeconstraintset*
waf-regional:UpdateSqlInjectionMatchSet [write] => sqlinjectionmatchset*
waf-regional:UpdateWebACL [permissions-management] => webacl*
waf-regional:UpdateXssMatchSet [write] => xssmatchset*
wafv2:AssociateWebACL [write] => apigateway,appsync,loadbalancer/app/,userpool,webacl*
wafv2:CheckCapacity [read] => *
wafv2:CreateIPSet [write] => *,ipset*
wafv2:CreateRegexPatternSet [write] => *,regexpatternset*
wafv2:CreateRuleGroup [write] => *,ipset,regexpatternset,rulegroup*
wafv2:CreateWebACL [write] => *,ipset,managedruleset,regexpatternset,rulegroup,webacl*
wafv2:DeleteFirewallManagerRuleGroups [write] => webacl*
wafv2:DeleteIPSet [write] => ipset*
wafv2:DeleteLoggingConfiguration [write] => webacl*
wafv2:DeletePermissionPolicy [permissions-management] => rulegroup*
wafv2:DeleteRegexPatternSet [write] => regexpatternset*
wafv2:DeleteRuleGroup [write] => rulegroup*
wafv2:DeleteWebACL [write] => webacl*
wafv2:DescribeManagedRuleGroup [read] => *
wafv2:DisassociateFirewallManager [write] => webacl*
wafv2:DisassociateWebACL [write] => apigateway,appsync,loadbalancer/app/,userpool
wafv2:GenerateMobileSdkReleaseUrl [read] => *
wafv2:GetIPSet [read] => *,ipset*
wafv2:GetLoggingConfiguration [read] => *,webacl*
wafv2:GetManagedRuleSet [read] => managedruleset*
wafv2:GetMobileSdkRelease [read] => *
wafv2:GetPermissionPolicy [read] => rulegroup*
wafv2:GetRateBasedStatementManagedKeys [read] => *,webacl*
wafv2:GetRegexPatternSet [read] => *,regexpatternset*
wafv2:GetRuleGroup [read] => *,rulegroup*
wafv2:GetSampledRequests [read] => webacl*
wafv2:GetWebACL [read] => *,webacl*
wafv2:GetWebACLForResource [read] => apigateway,appsync,loadbalancer/app/,userpool
wafv2:ListAvailableManagedRuleGroupVersions [list] => *
wafv2:ListAvailableManagedRuleGroups [list] => *
wafv2:ListIPSets [list] => *
wafv2:ListLoggingConfigurations [list] => *
wafv2:ListManagedRuleSets [list] => *
wafv2:ListMobileSdkReleases [list] => *
wafv2:ListRegexPatternSets [list] => *
wafv2:ListResourcesForWebACL [list] => webacl*
wafv2:ListRuleGroups [list] => *
wafv2:ListTagsForResource [read] => *,ipset,regexpatternset,rulegroup,webacl
wafv2:ListWebACLs [list] => *
wafv2:PutFirewallManagerRuleGroups [write] => webacl*
wafv2:PutLoggingConfiguration [write] => webacl*
wafv2:PutManagedRuleSetVersions [write] => managedruleset*,rulegroup*
wafv2:PutPermissionPolicy [permissions-management] => rulegroup*
wafv2:TagResource [tagging] => *,ipset,regexpatternset,rulegroup,webacl
wafv2:UntagResource [tagging] => *,ipset,regexpatternset,rulegroup,webacl
wafv2:UpdateIPSet [write] => *,ipset*
wafv2:UpdateManagedRuleSetVersionExpiryDate [write] => managedruleset*
wafv2:UpdateRegexPatternSet [write] => *,regexpatternset*
wafv2:UpdateRuleGroup [write] => *,ipset,regexpatternset,rulegroup*
wafv2:UpdateWebACL [write] => *,ipset,managedruleset,regexpatternset,rulegroup,webacl*
wam:AuthenticatePackager [write] => *
wellarchitected:AssociateLenses [write] => workload*
wellarchitected:CreateLensShare [write] => lens*
wellarchitected:CreateLensVersion [write] => lens*
wellarchitected:CreateMilestone [write] => workload*
wellarchitected:CreateWorkload [write] => *
wellarchitected:CreateWorkloadShare [write] => workload*
wellarchitected:DeleteLens [write] => lens*
wellarchitected:DeleteLensShare [write] => lens*
wellarchitected:DeleteWorkload [write] => workload*
wellarchitected:DeleteWorkloadShare [write] => workload*
wellarchitected:DisassociateLenses [write] => workload*
wellarchitected:ExportLens [read] => lens*
wellarchitected:GetAnswer [read] => workload*
wellarchitected:GetLens [read] => *,lens*
wellarchitected:GetLensReview [read] => workload*
wellarchitected:GetLensReviewReport [read] => workload*
wellarchitected:GetLensVersionDifference [read] => lens*
wellarchitected:GetMilestone [read] => workload*
wellarchitected:GetWorkload [read] => *,workload*
wellarchitected:ImportLens [write] => *
wellarchitected:ListAnswers [list] => workload*
wellarchitected:ListLensReviewImprovements [list] => workload*
wellarchitected:ListLensReviews [list] => workload*
wellarchitected:ListLensShares [list] => lens*
wellarchitected:ListLenses [list] => *
wellarchitected:ListMilestones [list] => workload*
wellarchitected:ListNotifications [list] => *
wellarchitected:ListShareInvitations [list] => *
wellarchitected:ListTagsForResource [read] => *,lens,workload
wellarchitected:ListWorkloadShares [list] => workload*
wellarchitected:ListWorkloads [list] => *
wellarchitected:TagResource [tagging] => *,lens,workload
wellarchitected:UntagResource [tagging] => *,lens,workload
wellarchitected:UpdateAnswer [write] => workload*
wellarchitected:UpdateGlobalSettings [write] => *
wellarchitected:UpdateLensReview [write] => workload*
wellarchitected:UpdateShareInvitation [write] => *
wellarchitected:UpdateWorkload [write] => workload*
wellarchitected:UpdateWorkloadShare [write] => workload*
wellarchitected:UpgradeLensReview [write] => workload*
wisdom:CreateAssistant [write] => *
wisdom:CreateAssistantAssociation [write] => *,Assistant*
wisdom:CreateContent [write] => *,KnowledgeBase*
wisdom:CreateKnowledgeBase [write] => *
wisdom:CreateSession [write] => *,Assistant*
wisdom:DeleteAssistant [write] => Assistant*
wisdom:DeleteAssistantAssociation [write] => Assistant*,AssistantAssociation*
wisdom:DeleteContent [write] => Content*,KnowledgeBase*
wisdom:DeleteKnowledgeBase [write] => KnowledgeBase*
wisdom:GetAssistant [read] => Assistant*
wisdom:GetAssistantAssociation [read] => Assistant*,AssistantAssociation*
wisdom:GetContent [read] => Content*,KnowledgeBase*
wisdom:GetContentSummary [read] => Content*,KnowledgeBase*
wisdom:GetKnowledgeBase [read] => KnowledgeBase*
wisdom:GetRecommendations [read] => Assistant*
wisdom:GetSession [read] => Assistant*,Session*
wisdom:ListAssistantAssociations [list] => Assistant*
wisdom:ListAssistants [list] => *
wisdom:ListContents [list] => KnowledgeBase*
wisdom:ListKnowledgeBases [list] => *
wisdom:ListTagsForResource [read] => *
wisdom:NotifyRecommendationsReceived [write] => Assistant*
wisdom:QueryAssistant [read] => Assistant*
wisdom:RemoveKnowledgeBaseTemplateUri [write] => KnowledgeBase*
wisdom:SearchContent [read] => KnowledgeBase*
wisdom:SearchSessions [read] => Assistant*
wisdom:StartContentUpload [write] => KnowledgeBase*
wisdom:TagResource [tagging] => *
wisdom:UntagResource [tagging] => *
wisdom:UpdateContent [write] => Content*,KnowledgeBase*
wisdom:UpdateKnowledgeBaseTemplateUri [write] => KnowledgeBase*
workdocs:AbortDocumentVersionUpload [write] => *
workdocs:ActivateUser [write] => *
workdocs:AddResourcePermissions [write] => *
workdocs:AddUserToGroup [write] => *
workdocs:CheckAlias [read] => *
workdocs:CreateComment [write] => *
workdocs:CreateCustomMetadata [write] => *
workdocs:CreateFolder [write] => *
workdocs:CreateInstance [write] => *
workdocs:CreateLabels [write] => *
workdocs:CreateNotificationSubscription [write] => *
workdocs:CreateUser [write] => *
workdocs:DeactivateUser [write] => *
workdocs:DeleteComment [write] => *
workdocs:DeleteCustomMetadata [write] => *
workdocs:DeleteDocument [write] => *
workdocs:DeleteFolder [write] => *
workdocs:DeleteFolderContents [write] => *
workdocs:DeleteInstance [write] => *
workdocs:DeleteLabels [write] => *
workdocs:DeleteNotificationSubscription [write] => *
workdocs:DeleteUser [write] => *
workdocs:DeregisterDirectory [write] => *
workdocs:DescribeActivities [list] => *
workdocs:DescribeAvailableDirectories [list] => *
workdocs:DescribeComments [list] => *
workdocs:DescribeDocumentVersions [list] => *
workdocs:DescribeFolderContents [list] => *
workdocs:DescribeGroups [list] => *
workdocs:DescribeInstances [list] => *
workdocs:DescribeNotificationSubscriptions [list] => *
workdocs:DescribeResourcePermissions [list] => *
workdocs:DescribeRootFolders [list] => *
workdocs:DescribeUsers [list] => *
workdocs:DownloadDocumentVersion [read] => *
workdocs:GetCurrentUser [read] => *
workdocs:GetDocument [read] => *
workdocs:GetDocumentPath [read] => *
workdocs:GetDocumentVersion [read] => *
workdocs:GetFolder [read] => *
workdocs:GetFolderPath [read] => *
workdocs:GetGroup [read] => *
workdocs:GetResources [read] => *
workdocs:InitiateDocumentVersionUpload [write] => *
workdocs:RegisterDirectory [write] => *
workdocs:RemoveAllResourcePermissions [write] => *
workdocs:RemoveResourcePermission [write] => *
workdocs:UpdateDocument [write] => *
workdocs:UpdateDocumentVersion [write] => *
workdocs:UpdateFolder [write] => *
workdocs:UpdateInstanceAlias [write] => *
workdocs:UpdateUser [write] => *
worklink:AssociateDomain [write] => fleet*
worklink:AssociateWebsiteAuthorizationProvider [write] => fleet*
worklink:AssociateWebsiteCertificateAuthority [write] => fleet*
worklink:CreateFleet [write] => *
worklink:DeleteFleet [write] => *,fleet*
worklink:DescribeAuditStreamConfiguration [read] => fleet*
worklink:DescribeCompanyNetworkConfiguration [read] => fleet*
worklink:DescribeDevice [read] => fleet*
worklink:DescribeDevicePolicyConfiguration [read] => fleet*
worklink:DescribeDomain [read] => fleet*
worklink:DescribeFleetMetadata [read] => *,fleet*
worklink:DescribeIdentityProviderConfiguration [read] => fleet*
worklink:DescribeWebsiteCertificateAuthority [read] => fleet*
worklink:DisassociateDomain [write] => fleet*
worklink:DisassociateWebsiteAuthorizationProvider [write] => fleet*
worklink:DisassociateWebsiteCertificateAuthority [write] => fleet*
worklink:ListDevices [list] => fleet*
worklink:ListDomains [list] => fleet*
worklink:ListFleets [list] => *
worklink:ListTagsForResource [read] => fleet*
worklink:ListWebsiteAuthorizationProviders [list] => fleet*
worklink:ListWebsiteCertificateAuthorities [list] => fleet*
worklink:RestoreDomainAccess [write] => fleet*
worklink:RevokeDomainAccess [write] => fleet*
worklink:SearchEntity [list] => fleet*
worklink:SignOutUser [write] => fleet*
worklink:TagResource [tagging] => *,fleet*
worklink:UntagResource [tagging] => *,fleet*
worklink:UpdateAuditStreamConfiguration [write] => fleet*
worklink:UpdateCompanyNetworkConfiguration [write] => fleet*
worklink:UpdateDevicePolicyConfiguration [write] => fleet*
worklink:UpdateDomainMetadata [write] => fleet*
worklink:UpdateFleetMetadata [write] => fleet*
worklink:UpdateIdentityProviderConfiguration [write] => fleet*
workmail:AddMembersToGroup [write] => organization*
workmail:AssociateDelegateToResource [write] => organization*
workmail:AssociateMemberToGroup [write] => organization*
workmail:CancelMailboxExportJob [write] => organization*
workmail:CreateAlias [write] => organization*
workmail:CreateGroup [write] => organization*
workmail:CreateInboundMailFlowRule [write] => organization*
workmail:CreateMailDomain [write] => organization*
workmail:CreateMailUser [write] => organization*
workmail:CreateMobileDeviceAccessRule [write] => organization*
workmail:CreateOrganization [write] => *
workmail:CreateOutboundMailFlowRule [write] => organization*
workmail:CreateResource [write] => organization*
workmail:CreateSmtpGateway [write] => organization*
workmail:CreateUser [write] => organization*
workmail:DeleteAccessControlRule [write] => organization*
workmail:DeleteAlias [write] => organization*
workmail:DeleteEmailMonitoringConfiguration [write] => organization*
workmail:DeleteGroup [write] => organization*
workmail:DeleteInboundMailFlowRule [write] => organization*
workmail:DeleteMailDomain [write] => organization*
workmail:DeleteMailboxPermissions [write] => organization*
workmail:DeleteMobileDevice [write] => organization*
workmail:DeleteMobileDeviceAccessOverride [write] => organization*
workmail:DeleteMobileDeviceAccessRule [write] => organization*
workmail:DeleteOrganization [write] => organization*
workmail:DeleteOutboundMailFlowRule [write] => organization*
workmail:DeleteResource [write] => organization*
workmail:DeleteRetentionPolicy [write] => organization*
workmail:DeleteSmtpGateway [write] => organization*
workmail:DeleteUser [write] => organization*
workmail:DeregisterFromWorkMail [write] => organization*
workmail:DeregisterMailDomain [write] => organization*
workmail:DescribeDirectories [list] => *
workmail:DescribeEmailMonitoringConfiguration [read] => organization*
workmail:DescribeGroup [list] => organization*
workmail:DescribeInboundDmarcSettings [read] => organization*
workmail:DescribeInboundMailFlowRule [read] => organization*
workmail:DescribeKmsKeys [list] => *
workmail:DescribeMailDomains [list] => organization*
workmail:DescribeMailGroups [list] => organization*
workmail:DescribeMailUsers [list] => organization*
workmail:DescribeMailboxExportJob [read] => organization*
workmail:DescribeOrganization [list] => organization*
workmail:DescribeOrganizations [list] => *
workmail:DescribeOutboundMailFlowRule [read] => organization*
workmail:DescribeResource [list] => organization*
workmail:DescribeSmtpGateway [read] => organization*
workmail:DescribeUser [list] => organization*
workmail:DisableMailGroups [write] => organization*
workmail:DisableMailUsers [write] => organization*
workmail:DisassociateDelegateFromResource [write] => organization*
workmail:DisassociateMemberFromGroup [write] => organization*
workmail:EnableMailDomain [write] => organization*
workmail:EnableMailGroups [write] => organization*
workmail:EnableMailUsers [write] => organization*
workmail:GetAccessControlEffect [read] => organization*
workmail:GetDefaultRetentionPolicy [read] => organization*
workmail:GetJournalingRules [read] => organization*
workmail:GetMailDomain [read] => organization*
workmail:GetMailDomainDetails [read] => organization*
workmail:GetMailGroupDetails [read] => organization*
workmail:GetMailUserDetails [read] => organization*
workmail:GetMailboxDetails [read] => organization*
workmail:GetMobileDeviceAccessEffect [read] => organization*
workmail:GetMobileDeviceAccessOverride [read] => organization*
workmail:GetMobileDeviceDetails [read] => organization*
workmail:GetMobileDevicesForUser [read] => organization*
workmail:GetMobilePolicyDetails [read] => organization*
workmail:ListAccessControlRules [read] => organization*
workmail:ListAliases [list] => organization*
workmail:ListGroupMembers [list] => organization*
workmail:ListGroups [list] => organization*
workmail:ListInboundMailFlowRules [list] => organization*
workmail:ListMailDomains [list] => organization*
workmail:ListMailboxExportJobs [list] => organization*
workmail:ListMailboxPermissions [list] => organization*
workmail:ListMembersInMailGroup [read] => organization*
workmail:ListMobileDeviceAccessOverrides [read] => organization*
workmail:ListMobileDeviceAccessRules [read] => organization*
workmail:ListOrganizations [list] => *
workmail:ListOutboundMailFlowRules [list] => organization*
workmail:ListResourceDelegates [list] => organization*
workmail:ListResources [list] => organization*
workmail:ListSmtpGateways [list] => organization*
workmail:ListTagsForResource [list] => *,organization*
workmail:ListUsers [list] => organization*
workmail:PutAccessControlRule [write] => organization*
workmail:PutEmailMonitoringConfiguration [write] => organization*
workmail:PutInboundDmarcSettings [write] => organization*
workmail:PutMailboxPermissions [write] => organization*
workmail:PutMobileDeviceAccessOverride [write] => organization*
workmail:PutRetentionPolicy [write] => organization*
workmail:RegisterMailDomain [write] => organization*
workmail:RegisterToWorkMail [write] => organization*
workmail:RemoveMembersFromGroup [write] => organization*
workmail:ResetPassword [write] => organization*
workmail:ResetUserPassword [write] => organization*
workmail:SearchMembers [read] => organization*
workmail:SetAdmin [write] => organization*
workmail:SetDefaultMailDomain [write] => organization*
workmail:SetJournalingRules [write] => organization*
workmail:SetMailGroupDetails [write] => organization*
workmail:SetMailUserDetails [write] => organization*
workmail:SetMobilePolicyDetails [write] => organization*
workmail:StartMailboxExportJob [write] => organization*
workmail:TagResource [tagging] => *,organization*
workmail:TestInboundMailFlowRules [write] => organization*
workmail:TestOutboundMailFlowRules [write] => organization*
workmail:UntagResource [tagging] => *,organization*
workmail:UpdateDefaultMailDomain [write] => organization*
workmail:UpdateInboundMailFlowRule [write] => organization*
workmail:UpdateMailboxQuota [write] => organization*
workmail:UpdateMobileDeviceAccessRule [write] => organization*
workmail:UpdateOutboundMailFlowRule [write] => organization*
workmail:UpdatePrimaryEmailAddress [write] => organization*
workmail:UpdateResource [write] => organization*
workmail:UpdateSmtpGateway [write] => organization*
workmail:WipeMobileDevice [write] => organization*
workmailmessageflow:GetRawMessageContent [read] => RawMessage*
workmailmessageflow:PutRawMessageContent [write] => RawMessage*
workspaces:AssociateConnectionAlias [write] => connectionalias*,directoryid*
workspaces:AssociateIpGroups [write] => directoryid*,workspaceipgroup*
workspaces:AuthorizeIpRules [write] => workspaceipgroup*
workspaces:CopyWorkspaceImage [write] => *,workspaceimage*
workspaces:CreateConnectClientAddIn [write] => directoryid*
workspaces:CreateConnectionAlias [write] => *
workspaces:CreateIpGroup [write] => *
workspaces:CreateTags [tagging] => *
workspaces:CreateUpdatedWorkspaceImage [write] => *,workspaceimage*
workspaces:CreateWorkspaceBundle [write] => *,workspacebundle*,workspaceimage*
workspaces:CreateWorkspaceImage [write] => *,workspaceid*
workspaces:CreateWorkspaces [write] => *,directoryid*,workspacebundle*,workspaceid*
workspaces:DeleteClientBranding [write] => directoryid*
workspaces:DeleteConnectClientAddIn [write] => directoryid*
workspaces:DeleteConnectionAlias [write] => connectionalias*
workspaces:DeleteIpGroup [write] => workspaceipgroup*
workspaces:DeleteTags [tagging] => *
workspaces:DeleteWorkspaceBundle [write] => workspacebundle*
workspaces:DeleteWorkspaceImage [write] => workspaceimage*
workspaces:DeregisterWorkspaceDirectory [write] => directoryid*
workspaces:DescribeAccount [read] => *
workspaces:DescribeAccountModifications [read] => *
workspaces:DescribeClientBranding [read] => directoryid*
workspaces:DescribeClientProperties [list] => directoryid*
workspaces:DescribeConnectClientAddIns [list] => directoryid*
workspaces:DescribeConnectionAliasPermissions [read] => connectionalias*
workspaces:DescribeConnectionAliases [read] => *
workspaces:DescribeIpGroups [read] => workspaceipgroup*
workspaces:DescribeTags [read] => *
workspaces:DescribeWorkspaceBundles [list] => *
workspaces:DescribeWorkspaceDirectories [read] => *
workspaces:DescribeWorkspaceImagePermissions [read] => workspaceimage*
workspaces:DescribeWorkspaceImages [list] => *
workspaces:DescribeWorkspaceSnapshots [list] => workspaceid*
workspaces:DescribeWorkspaces [list] => *
workspaces:DescribeWorkspacesConnectionStatus [read] => *
workspaces:DisassociateConnectionAlias [write] => connectionalias*
workspaces:DisassociateIpGroups [write] => directoryid*,workspaceipgroup*
workspaces:ImportClientBranding [write] => directoryid*
workspaces:ImportWorkspaceImage [write] => *
workspaces:ListAvailableManagementCidrRanges [list] => *
workspaces:MigrateWorkspace [write] => workspacebundle*,workspaceid*
workspaces:ModifyAccount [write] => *
workspaces:ModifyClientProperties [write] => directoryid*
workspaces:ModifySamlProperties [write] => directoryid*
workspaces:ModifySelfservicePermissions [permissions-management] => directoryid*
workspaces:ModifyWorkspaceAccessProperties [write] => directoryid*
workspaces:ModifyWorkspaceCreationProperties [write] => directoryid*
workspaces:ModifyWorkspaceProperties [write] => workspaceid*
workspaces:ModifyWorkspaceState [write] => workspaceid*
workspaces:RebootWorkspaces [write] => workspaceid*
workspaces:RebuildWorkspaces [write] => workspaceid*
workspaces:RegisterWorkspaceDirectory [write] => *,directoryid*
workspaces:RestoreWorkspace [write] => workspaceid*
workspaces:RevokeIpRules [write] => workspaceipgroup*
workspaces:StartWorkspaces [write] => workspaceid*
workspaces:StopWorkspaces [write] => workspaceid*
workspaces:Stream [write] => *,directoryid*
workspaces:TerminateWorkspaces [write] => workspaceid*
workspaces:UpdateConnectClientAddIn [write] => directoryid*
workspaces:UpdateConnectionAliasPermission [permissions-management] => connectionalias*
workspaces:UpdateRulesOfIpGroup [write] => workspaceipgroup*
workspaces:UpdateWorkspaceBundle [write] => workspacebundle*,workspaceimage*
workspaces:UpdateWorkspaceImagePermission [permissions-management] => workspaceimage*
workspaces-web:AssociateBrowserSettings [write] => browserSettings*,portal*
workspaces-web:AssociateNetworkSettings [write] => networkSettings*,portal*
workspaces-web:AssociateTrustStore [write] => portal*,trustStore*
workspaces-web:AssociateUserSettings [write] => portal*,userSettings*
workspaces-web:CreateBrowserSettings [write] => *
workspaces-web:CreateIdentityProvider [write] => portal*
workspaces-web:CreateNetworkSettings [write] => *
workspaces-web:CreatePortal [write] => *
workspaces-web:CreateTrustStore [write] => *
workspaces-web:CreateUserSettings [write] => *
workspaces-web:DeleteBrowserSettings [write] => browserSettings*
workspaces-web:DeleteIdentityProvider [write] => *
workspaces-web:DeleteNetworkSettings [write] => networkSettings*
workspaces-web:DeletePortal [write] => portal*
workspaces-web:DeleteTrustStore [write] => trustStore*
workspaces-web:DeleteUserSettings [write] => userSettings*
workspaces-web:DisassociateBrowserSettings [write] => portal*
workspaces-web:DisassociateNetworkSettings [write] => portal*
workspaces-web:DisassociateTrustStore [write] => portal*
workspaces-web:DisassociateUserSettings [write] => portal*
workspaces-web:GetBrowserSettings [read] => browserSettings*
workspaces-web:GetIdentityProvider [read] => *
workspaces-web:GetNetworkSettings [read] => networkSettings*
workspaces-web:GetPortal [read] => portal*
workspaces-web:GetPortalServiceProviderMetadata [read] => portal*
workspaces-web:GetTrustStore [read] => trustStore*
workspaces-web:GetTrustStoreCertificate [read] => trustStore*
workspaces-web:GetUserSettings [read] => userSettings*
workspaces-web:ListBrowserSettings [read] => *
workspaces-web:ListIdentityProviders [read] => *
workspaces-web:ListNetworkSettings [read] => *
workspaces-web:ListPortals [read] => *
workspaces-web:ListTagsForResource [read] => *
workspaces-web:ListTrustStoreCertificates [read] => *
workspaces-web:ListTrustStores [read] => *
workspaces-web:ListUserSettings [read] => *
workspaces-web:TagResource [tagging] => *
workspaces-web:UntagResource [tagging] => *
workspaces-web:UpdateBrowserSettings [write] => browserSettings*
workspaces-web:UpdateIdentityProvider [write] => *
workspaces-web:UpdateNetworkSettings [write] => networkSettings*
workspaces-web:UpdatePortal [write] => portal*
workspaces-web:UpdateTrustStore [write] => trustStore*
workspaces-web:UpdateUserSettings [write] => userSettings*
xray:BatchGetTraces [list] => *
xray:CreateGroup [write] => *,group*
xray:CreateSamplingRule [write] => *,sampling-rule*
xray:DeleteGroup [write] => *,group*
xray:DeleteSamplingRule [write] => *,sampling-rule*
xray:GetEncryptionConfig [read] => *
xray:GetGroup [read] => *,group*
xray:GetGroups [read] => *
xray:GetInsight [read] => *
xray:GetInsightEvents [read] => *
xray:GetInsightImpactGraph [read] => *
xray:GetInsightSummaries [read] => *
xray:GetSamplingRules [read] => *
xray:GetSamplingStatisticSummaries [read] => *
xray:GetSamplingTargets [read] => *
xray:GetServiceGraph [read] => *
xray:GetTimeSeriesServiceStatistics [read] => *
xray:GetTraceGraph [read] => *
xray:GetTraceSummaries [read] => *
xray:ListTagsForResource [list] => group,sampling-rule
xray:PutEncryptionConfig [permissions-management] => *
xray:PutTelemetryRecords [write] => *
xray:PutTraceSegments [write] => *
xray:TagResource [tagging] => *,group,sampling-rule
xray:UntagResource [tagging] => *,group,sampling-rule
xray:UpdateGroup [write] => *,group*
xray:UpdateSamplingRule [write] => *,sampling-rule*
